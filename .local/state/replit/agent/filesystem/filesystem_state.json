{"file_contents":{"design_guidelines.md":{"content":"# Rice Traceability Portal - Design Guidelines\n\n## Design Approach\n**Selected Approach**: Design System (Material Design-inspired)\n**Justification**: This is a utility-focused agricultural management dashboard requiring efficiency, data clarity, and professional appearance for rural producers managing rice production facilities.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors**:\n- Primary Green: 142 69% 45% (professional forest green)\n- Light Green: 142 40% 85% (subtle accent)\n- Dark Green: 142 80% 25% (headers/emphasis)\n\n**Neutrals**:\n- White: 0 0% 100% (primary background)\n- Light Gray: 210 15% 97% (secondary background)\n- Medium Gray: 210 10% 60% (borders/text)\n- Dark Gray: 210 15% 25% (primary text)\n\n### B. Typography\n**Font Family**: Inter (Google Fonts)\n- Headers: Inter 600 (Semi-bold) - 24px, 20px, 18px\n- Body Text: Inter 400 (Regular) - 16px, 14px\n- Labels: Inter 500 (Medium) - 14px, 12px\n- Data/Numbers: Inter 400 (Regular) - monospace feel\n\n### C. Layout System\n**Spacing Units**: Tailwind units of 2, 4, 6, and 8\n- Micro spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px)  \n- Section spacing: p-6, m-6 (24px)\n- Major spacing: p-8, m-8 (32px)\n\n### D. Component Library\n\n**Navigation**:\n- Clean horizontal tab interface with underline indicators\n- Tab states: default (medium gray), active (dark green), hover (light green background)\n\n**Data Tables**:\n- White background with subtle gray borders\n- Alternating row backgrounds (white/light gray)\n- Green accent for action buttons and status indicators\n- Expandable rows with smooth transitions\n\n**Forms & Inputs**:\n- Clean white input fields with gray borders\n- Green focus states and validation\n- Dropdown menus with green selection highlights\n\n**Buttons**:\n- Primary: Dark green background, white text\n- Secondary: Green outline, green text\n- Danger: Red outline for delete actions\n- All buttons with subtle shadows and hover states\n\n**Modals & Popups**:\n- White backgrounds with subtle shadows\n- Green accent headers\n- Clear action buttons (confirm/cancel)\n- Backdrop blur for focus\n\n**Cards & Containers**:\n- White backgrounds with subtle borders\n- Consistent padding (p-6)\n- Subtle shadows for depth\n- Green accent lines for emphasis\n\n### E. Professional Dashboard Characteristics\n- Clean, corporate styling with ample whitespace\n- Consistent grid-based layouts\n- Professional data visualization\n- Clear visual hierarchy with green accents\n- Responsive table layouts optimized for agricultural data\n- Confirmation dialogs for all critical actions\n- Status indicators using green color variations\n\n### Visual Hierarchy\n1. **Primary Actions**: Dark green buttons and active states\n2. **Secondary Information**: Medium gray text and borders  \n3. **Background Elements**: Light gray and white layering\n4. **Success/Positive States**: Various green tones\n5. **Warning/Delete Actions**: Red accents for contrast\n\nThis design creates a trustworthy, professional interface that rural producers can confidently use to manage their rice traceability operations while maintaining the clean, corporate aesthetic appropriate for agricultural business management.","size_bytes":3151},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Portal de Trazabilidad de Arroz\n\n## Overview\n\nA rice traceability portal designed for rural producers and mill workers to manage agricultural operations. The system provides comprehensive tracking of rice farms (chacras), field events, and mill relationships through a professional dashboard interface. The application serves two user types:\n\n- **Rural Producers**: Manage their establishments, field plots, and agricultural events. They control what information to share with associated mills.\n- **Mill Workers**: Access shared information from multiple producers based on granted permissions, manage harvest data, and coordinate rice collection.\n\nThe application includes mock user switching functionality to demonstrate different user perspectives during development.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system following Material Design principles\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API with `/api` prefix\n- **Development**: Hot module replacement via Vite middleware in development\n- **Error Handling**: Centralized error middleware with structured responses\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless provider\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema evolution\n- **Session Storage**: PostgreSQL-based sessions using connect-pg-simple\n\n### Database Schema Design\nThe system models agricultural operations through interconnected entities:\n- **Users**: Authentication and authorization\n- **Mills**: Rice processing facilities with permission-based data sharing\n- **Establishments**: Rural properties containing multiple fields\n- **Chacras**: Individual field plots with area, regime, and ownership details\n- **Zafras**: Agricultural seasons defining crop cycles (6-month periods)\n- **Events**: Time-stamped agricultural activities (planting, fertilization, harvest, etc.)\n\n### Component Architecture\n- **Modular Design**: Self-contained components with clear interfaces\n- **Design System**: Consistent spacing, typography, and color schemes\n- **Responsive Layout**: Mobile-first design with adaptive interfaces\n- **Accessibility**: ARIA compliance through Radix UI primitives\n\n### Key Features Implementation\n- **Mock User System**: Switchable user context demonstrating producer vs. mill worker perspectives\n  - Juan Carlos Rodríguez (Rural Producer): Full access to establishment and mill management\n  - María González (Mill Worker - Molino Los Pinos): Access to associated producer data based on permissions\n- **Mill Management**: Dynamic addition/removal of associated mills with granular permission controls\n- **Field Management**: Interactive maps (mockup), tabular data with sorting and filtering\n- **Event Registration**: Context-aware forms with specific fields for different event types\n  - Fertilization: Type selection (Urea, DAP, NPK) and dosage tracking\n  - Planting: Seed variety (El Paso 144, INIA Merín) and density\n  - Application: Product category (herbicide, insecticide, fungicide) with Uruguay-specific products\n  - Harvest: Yield tracking (ton/ha)\n- **Event Timeline**: Visual timeline representation with zafra-based organization\n- **Harvest Management**: Remito (delivery note) generation with automatic chacra selection\n- **Data Sharing**: Configurable sharing of field management, harvest data, and traceability information with mills\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Platform**: Development environment with integrated deployment\n\n### UI and Styling\n- **Google Fonts**: Inter font family for consistent typography\n- **Radix UI**: Headless component primitives for accessibility and functionality\n- **Tailwind CSS**: Utility-first styling with custom design tokens\n- **Lucide React**: Consistent icon library\n\n### Development and Build Tools\n- **Vite**: Fast development server with HMR and optimized production builds\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundling for production\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Data and Validation\n- **Zod**: Runtime type validation and schema definition\n- **Date-fns**: Date manipulation and formatting utilities\n- **TanStack Query**: Server state management with caching and synchronization\n\n### Development Quality\n- **Replit Cartographer**: Development environment integration\n- **Runtime Error Overlay**: Enhanced error reporting in development","size_bytes":5102},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const mills = pgTable(\"mills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  shareFieldManagement: boolean(\"share_field_management\").default(false),\n  shareHarvestManagement: boolean(\"share_harvest_management\").default(false),\n  shareTraceabilityInfo: boolean(\"share_traceability_info\").default(false),\n});\n\nexport const establishments = pgTable(\"establishments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\"),\n  owner: text(\"owner\").notNull(),\n  rut: text(\"rut\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  referenceCoordinates: text(\"reference_coordinates\"),\n  adminEmail: text(\"admin_email\"),\n});\n\nexport const chacras = pgTable(\"chacras\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  area: text(\"area\").notNull(), // in hectares\n  regime: text(\"regime\").notNull(), // propiedad, arrendamiento, gestionando para terceros\n  establishmentId: varchar(\"establishment_id\").references(() => establishments.id),\n  establishmentName: text(\"establishment_name\").notNull(), // denormalized for easier querying\n});\n\nexport const zafras = pgTable(\"zafras\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chacraId: varchar(\"chacra_id\").references(() => chacras.id),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\").notNull(),\n  type: text(\"type\").notNull(), // arroz, pasturas\n  variety: text(\"variety\"), // variedad de arroz o mezcla forrajera\n  waterLevel: text(\"water_level\"), // lámina de agua para arroz\n  notes: text(\"notes\"),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chacraId: varchar(\"chacra_id\").references(() => chacras.id),\n  zafraId: varchar(\"zafra_id\").references(() => zafras.id),\n  type: text(\"type\").notNull(), // laboreo, fertilización, siembra, emergencia, inundación, aplicación, drenado, cosecha\n  date: text(\"date\").notNull(),\n  details: text(\"details\"), // detalles como \"urea, 80 kg/ha\"\n  notes: text(\"notes\"),\n});\n\nexport const industrialPlants = pgTable(\"industrial_plants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\"),\n  silos: text(\"silos\").array(), // array of silo names/numbers\n});\n\nexport const remitos = pgTable(\"remitos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chacraId: varchar(\"chacra_id\").references(() => chacras.id).notNull(),\n  chacraName: text(\"chacra_name\").notNull(), // denormalized\n  estimatedWeight: integer(\"estimated_weight\").notNull(),\n  trailerPlate: text(\"trailer_plate\").notNull(),\n  driverName: text(\"driver_name\").notNull(),\n  driverWhatsapp: text(\"driver_whatsapp\").notNull(),\n  industrialPlantId: varchar(\"industrial_plant_id\").references(() => industrialPlants.id).notNull(),\n  industrialPlantName: text(\"industrial_plant_name\").notNull(), // denormalized\n  destinationSilo: text(\"destination_silo\"),\n  status: text(\"status\").notNull().default(\"creandose\"), // creandose, creado, cargandose, en_viaje, descargandose, perdido_destruido, descargado\n  createdAt: text(\"created_at\"), // ISO string format\n  departureDateTime: text(\"departure_date_time\"), // ISO string format  \n  arrivalDateTime: text(\"arrival_date_time\"), // ISO string format\n  notes: text(\"notes\"),\n});\n\nexport const silos = pgTable(\"silos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siloId: text(\"silo_id\").notNull(), // User-defined silo identifier\n  industrialPlantId: varchar(\"industrial_plant_id\").references(() => industrialPlants.id).notNull(),\n  type: text(\"type\").notNull(), // tipo de silo\n  maxCapacity: decimal(\"max_capacity\", { precision: 10, scale: 2 }).notNull(), // toneladas\n  currentOccupancy: decimal(\"current_occupancy\", { precision: 10, scale: 2 }).default(\"0\"), // toneladas ocupadas\n  diameter: decimal(\"diameter\", { precision: 8, scale: 2 }).notNull(), // metros - required for FIFO logic\n  createdAt: text(\"created_at\").default(sql`now()`),\n});\n\nexport const riceBatches = pgTable(\"rice_batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  remitoId: varchar(\"remito_id\").references(() => remitos.id).notNull(),\n  siloId: varchar(\"silo_id\").references(() => silos.id).notNull(),\n  chacraId: varchar(\"chacra_id\").references(() => chacras.id).notNull(),\n  chacraName: text(\"chacra_name\").notNull(), // denormalized\n  variety: text(\"variety\").notNull(), // variedad de arroz\n  tonnage: decimal(\"tonnage\", { precision: 10, scale: 2 }).notNull(),\n  originalTonnage: decimal(\"original_tonnage\", { precision: 10, scale: 2 }).notNull(), // original amount before any transfers\n  entryDate: text(\"entry_date\").notNull(), // ISO string format\n  layerOrder: integer(\"layer_order\").notNull().default(0), // for FIFO logic\n});\n\nexport const transfers = pgTable(\"transfers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromSiloId: varchar(\"from_silo_id\").references(() => silos.id),\n  toSiloId: varchar(\"to_silo_id\").references(() => silos.id),\n  transferType: text(\"transfer_type\").notNull(), // silo_to_silo, silo_to_sale\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  transferLogic: text(\"transfer_logic\").notNull(), // proportional_mix, fifo_layers\n  transferDate: text(\"transfer_date\").notNull(), // ISO string format\n  notes: text(\"notes\"),\n  saleOrderId: text(\"sale_order_id\"), // if transferType is silo_to_sale\n});\n\nexport const transferBatchDetails = pgTable(\"transfer_batch_details\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transferId: varchar(\"transfer_id\").references(() => transfers.id).notNull(),\n  riceBatchId: varchar(\"rice_batch_id\").references(() => riceBatches.id).notNull(),\n  amountTransferred: decimal(\"amount_transferred\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const industrialProcesses = pgTable(\"industrial_processes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siloId: varchar(\"silo_id\").references(() => silos.id).notNull(),\n  processType: text(\"process_type\").notNull(), // secado, aireacion, limpieza, etc.\n  processDate: text(\"process_date\").notNull(), // ISO string format\n  parameters: text(\"parameters\"), // JSON string with process parameters\n  notes: text(\"notes\"),\n});\n\nexport const plantTransferSettings = pgTable(\"plant_transfer_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  industrialPlantId: varchar(\"industrial_plant_id\").references(() => industrialPlants.id).notNull(),\n  defaultTransferLogic: text(\"default_transfer_logic\").notNull().default(\"proportional_mix\"), // proportional_mix, fifo_layers\n});\n\nexport const salesOrders = pgTable(\"sales_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\").notNull().unique(), // ID orden visible para usuarios\n  clientName: text(\"client_name\").notNull(),\n  destination: text(\"destination\").notNull(),\n  totalTonnage: decimal(\"total_tonnage\", { precision: 10, scale: 2 }).notNull(),\n  qualityRequirements: text(\"quality_requirements\"), // JSON string con requerimientos\n  status: text(\"status\").notNull().default(\"Virgen\"), // Virgen, En Proceso, Lista, Despachando, Despachada, Rechazada, Cancelada\n  orderDate: text(\"order_date\").default(sql`now()`),\n  estimatedDeliveryDate: text(\"estimated_delivery_date\"),\n  notes: text(\"notes\"),\n  createdAt: text(\"created_at\").default(sql`now()`),\n});\n\nexport const salesOrderBatchAssignments = pgTable(\"sales_order_batch_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  salesOrderId: varchar(\"sales_order_id\").references(() => salesOrders.id).notNull(),\n  riceBatchId: varchar(\"rice_batch_id\").references(() => riceBatches.id).notNull(),\n  siloId: varchar(\"silo_id\").references(() => silos.id).notNull(),\n  assignedTonnage: decimal(\"assigned_tonnage\", { precision: 10, scale: 2 }).notNull(),\n  reservedAt: text(\"reserved_at\").default(sql`now()`),\n});\n\nexport const sustainabilityMetrics = pgTable(\"sustainability_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  salesOrderId: varchar(\"sales_order_id\").references(() => salesOrders.id).notNull(),\n  carbonFootprintPerTon: decimal(\"carbon_footprint_per_ton\", { precision: 10, scale: 4 }), // kg CO₂-eq / ton\n  waterUsagePerTon: decimal(\"water_usage_per_ton\", { precision: 10, scale: 2 }), // L / ton\n  energyUsagePerTon: decimal(\"energy_usage_per_ton\", { precision: 10, scale: 2 }), // kWh / ton\n  calculatedAt: text(\"calculated_at\").default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertMillSchema = createInsertSchema(mills).omit({\n  id: true,\n});\n\nexport const insertEstablishmentSchema = createInsertSchema(establishments).omit({\n  id: true,\n});\n\nexport const insertChacraSchema = createInsertSchema(chacras).omit({\n  id: true,\n});\n\nexport const insertZafraSchema = createInsertSchema(zafras).omit({\n  id: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n});\n\nexport const insertIndustrialPlantSchema = createInsertSchema(industrialPlants).omit({\n  id: true,\n});\n\nexport const insertRemitoSchema = createInsertSchema(remitos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSiloSchema = createInsertSchema(silos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRiceBatchSchema = createInsertSchema(riceBatches).omit({\n  id: true,\n});\n\nexport const insertTransferSchema = createInsertSchema(transfers).omit({\n  id: true,\n});\n\nexport const insertTransferBatchDetailSchema = createInsertSchema(transferBatchDetails).omit({\n  id: true,\n});\n\nexport const insertIndustrialProcessSchema = createInsertSchema(industrialProcesses).omit({\n  id: true,\n});\n\nexport const insertPlantTransferSettingsSchema = createInsertSchema(plantTransferSettings).omit({\n  id: true,\n});\n\nexport const insertSalesOrderSchema = createInsertSchema(salesOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSalesOrderBatchAssignmentSchema = createInsertSchema(salesOrderBatchAssignments).omit({\n  id: true,\n  reservedAt: true,\n});\n\nexport const insertSustainabilityMetricsSchema = createInsertSchema(sustainabilityMetrics).omit({\n  id: true,\n  calculatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Mill = typeof mills.$inferSelect;\nexport type InsertMill = z.infer<typeof insertMillSchema>;\nexport type Establishment = typeof establishments.$inferSelect;\nexport type InsertEstablishment = z.infer<typeof insertEstablishmentSchema>;\nexport type Chacra = typeof chacras.$inferSelect;\nexport type InsertChacra = z.infer<typeof insertChacraSchema>;\nexport type Zafra = typeof zafras.$inferSelect;\nexport type InsertZafra = z.infer<typeof insertZafraSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type IndustrialPlant = typeof industrialPlants.$inferSelect;\nexport type InsertIndustrialPlant = z.infer<typeof insertIndustrialPlantSchema>;\nexport type Remito = typeof remitos.$inferSelect;\nexport type InsertRemito = z.infer<typeof insertRemitoSchema>;\nexport type Silo = typeof silos.$inferSelect;\nexport type InsertSilo = z.infer<typeof insertSiloSchema>;\nexport type RiceBatch = typeof riceBatches.$inferSelect;\nexport type InsertRiceBatch = z.infer<typeof insertRiceBatchSchema>;\nexport type Transfer = typeof transfers.$inferSelect;\nexport type InsertTransfer = z.infer<typeof insertTransferSchema>;\nexport type TransferBatchDetail = typeof transferBatchDetails.$inferSelect;\nexport type InsertTransferBatchDetail = z.infer<typeof insertTransferBatchDetailSchema>;\nexport type IndustrialProcess = typeof industrialProcesses.$inferSelect;\nexport type InsertIndustrialProcess = z.infer<typeof insertIndustrialProcessSchema>;\nexport type PlantTransferSettings = typeof plantTransferSettings.$inferSelect;\nexport type InsertPlantTransferSettings = z.infer<typeof insertPlantTransferSettingsSchema>;\nexport type SalesOrder = typeof salesOrders.$inferSelect;\nexport type InsertSalesOrder = z.infer<typeof insertSalesOrderSchema>;\nexport type SalesOrderBatchAssignment = typeof salesOrderBatchAssignments.$inferSelect;\nexport type InsertSalesOrderBatchAssignment = z.infer<typeof insertSalesOrderBatchAssignmentSchema>;\nexport type SustainabilityMetrics = typeof sustainabilityMetrics.$inferSelect;\nexport type InsertSustainabilityMetrics = z.infer<typeof insertSustainabilityMetricsSchema>;\n","size_bytes":13265},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { UserProvider } from \"@/contexts/UserContext\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <UserProvider>\n          <Toaster />\n          <Router />\n        </UserProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":850},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 210 15% 25%;\n\n  --border: 210 10% 85%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 210 15% 25%;\n\n  --card-border: 210 10% 88%;\n\n  --sidebar: 210 5% 96%;\n\n  --sidebar-foreground: 210 15% 25%;\n\n  --sidebar-border: 210 8% 90%;\n\n  --sidebar-primary: 142 69% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 142 40% 85%;\n\n  --sidebar-accent-foreground: 142 80% 25%;\n\n  --sidebar-ring: 142 69% 45%;\n\n  --popover: 0 0% 97%;\n\n  --popover-foreground: 210 15% 25%;\n\n  --popover-border: 210 10% 90%;\n\n  --primary: 142 69% 45%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 10% 92%;\n\n  --secondary-foreground: 210 15% 25%;\n\n  --muted: 210 15% 94%;\n\n  --muted-foreground: 210 10% 60%;\n\n  --accent: 142 40% 88%;\n\n  --accent-foreground: 142 80% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 10% 75%;\n  --ring: 142 69% 45%;\n  --chart-1: 142 69% 45%;\n  --chart-2: 180 65% 50%;\n  --chart-3: 210 80% 55%;\n  --chart-4: 270 65% 60%;\n  --chart-5: 30 85% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px rgba(0,0,0,0.05);\n  --shadow-xs: 0px 1px 3px 0px rgba(0,0,0,0.1), 0px 1px 2px -1px rgba(0,0,0,0.1);\n  --shadow-sm: 0px 1px 3px 0px rgba(0,0,0,0.1), 0px 1px 2px -1px rgba(0,0,0,0.1);\n  --shadow: 0px 1px 3px 0px rgba(0,0,0,0.1), 0px 1px 2px -1px rgba(0,0,0,0.1);\n  --shadow-md: 0px 4px 6px -1px rgba(0,0,0,0.1), 0px 2px 4px -2px rgba(0,0,0,0.1);\n  --shadow-lg: 0px 10px 15px -3px rgba(0,0,0,0.1), 0px 4px 6px -4px rgba(0,0,0,0.1);\n  --shadow-xl: 0px 20px 25px -5px rgba(0,0,0,0.1), 0px 8px 10px -6px rgba(0,0,0,0.1);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0,0,0,0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 15% 8%;\n\n  --foreground: 210 10% 92%;\n\n  --border: 210 12% 18%;\n\n  --card: 210 12% 12%;\n\n  --card-foreground: 210 10% 92%;\n\n  --card-border: 210 12% 20%;\n\n  --sidebar: 210 15% 10%;\n\n  --sidebar-foreground: 210 10% 92%;\n\n  --sidebar-border: 210 12% 16%;\n\n  --sidebar-primary: 142 69% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 142 50% 20%;\n\n  --sidebar-accent-foreground: 142 40% 85%;\n\n  --sidebar-ring: 142 69% 45%;\n\n  --popover: 210 12% 15%;\n\n  --popover-foreground: 210 10% 92%;\n\n  --popover-border: 210 12% 22%;\n\n  --primary: 142 69% 45%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 12% 18%;\n\n  --secondary-foreground: 210 10% 92%;\n\n  --muted: 210 12% 14%;\n\n  --muted-foreground: 210 8% 65%;\n\n  --accent: 142 50% 18%;\n\n  --accent-foreground: 142 40% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 210 12% 35%;\n  --ring: 142 69% 45%;\n  --chart-1: 142 69% 65%;\n  --chart-2: 180 65% 70%;\n  --chart-3: 210 80% 75%;\n  --chart-4: 270 65% 80%;\n  --chart-5: 30 85% 75%;\n\n  --shadow-2xs: 0px 1px 2px 0px rgba(0,0,0,0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0,0,0,0.4), 0px 1px 2px -1px rgba(0,0,0,0.4);\n  --shadow-sm: 0px 1px 3px 0px rgba(0,0,0,0.4), 0px 1px 2px -1px rgba(0,0,0,0.4);\n  --shadow: 0px 1px 3px 0px rgba(0,0,0,0.4), 0px 1px 2px -1px rgba(0,0,0,0.4);\n  --shadow-md: 0px 4px 6px -1px rgba(0,0,0,0.4), 0px 2px 4px -2px rgba(0,0,0,0.4);\n  --shadow-lg: 0px 10px 15px -3px rgba(0,0,0,0.4), 0px 4px 6px -4px rgba(0,0,0,0.4);\n  --shadow-xl: 0px 20px 25px -5px rgba(0,0,0,0.4), 0px 8px 10px -6px rgba(0,0,0,0.4);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0,0,0,0.6);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9923},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChacrasFilters.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\n\nexport interface ChacrasFilters {\n  establishment: string;\n  area: string; // \"asc\" | \"desc\" | \"all\"\n  regime: string;\n}\n\ninterface ChacrasFiltersProps {\n  onFilterChange: (filters: ChacrasFilters) => void;\n}\n\nexport default function ChacrasFilters({ onFilterChange }: ChacrasFiltersProps) {\n  const handleFilterChange = (key: keyof ChacrasFilters, value: string) => {\n    const newFilters = { establishment: \"all\", area: \"all\", regime: \"all\" };\n    newFilters[key] = value;\n    \n    // Get current filters from other selects\n    const establishmentSelect = document.querySelector('[data-testid=\"select-establishment-filter\"]') as HTMLSelectElement;\n    const areaSelect = document.querySelector('[data-testid=\"select-area-filter\"]') as HTMLSelectElement;\n    const regimeSelect = document.querySelector('[data-testid=\"select-regime-filter\"]') as HTMLSelectElement;\n    \n    if (establishmentSelect && establishmentSelect.getAttribute('data-value')) {\n      newFilters.establishment = establishmentSelect.getAttribute('data-value') || \"all\";\n    }\n    if (areaSelect && areaSelect.getAttribute('data-value')) {\n      newFilters.area = areaSelect.getAttribute('data-value') || \"all\";\n    }\n    if (regimeSelect && regimeSelect.getAttribute('data-value')) {\n      newFilters.regime = regimeSelect.getAttribute('data-value') || \"all\";\n    }\n    \n    // Override with the new value\n    newFilters[key] = value;\n    \n    console.log(`Filter changed: ${key} = ${value}`);\n    onFilterChange(newFilters);\n  };\n\n  const clearFilters = () => {\n    const clearedFilters: ChacrasFilters = {\n      establishment: \"all\",\n      area: \"all\", \n      regime: \"all\"\n    };\n    onFilterChange(clearedFilters);\n    console.log(\"Filters cleared\");\n  };\n\n  return (\n    <div className=\"flex flex-wrap items-center gap-4 p-4 bg-muted/30 rounded-md\">\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-sm font-medium text-foreground\">Filtrar por:</span>\n      </div>\n\n      {/* Establishment Filter */}\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-sm text-muted-foreground\">Establecimiento:</span>\n        <Select\n          onValueChange={(value) => handleFilterChange(\"establishment\", value)}\n          defaultValue=\"all\"\n        >\n          <SelectTrigger \n            className=\"w-48\"\n            data-testid=\"select-establishment-filter\"\n          >\n            <SelectValue placeholder=\"Todos los establecimientos\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos los establecimientos</SelectItem>\n            <SelectItem value=\"la-juanita\">La Juanita</SelectItem>\n            <SelectItem value=\"don-timoteo\">Don Timoteo</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Area Sorting Filter */}\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-sm text-muted-foreground\">Área:</span>\n        <Select\n          onValueChange={(value) => handleFilterChange(\"area\", value)}\n          defaultValue=\"all\"\n        >\n          <SelectTrigger \n            className=\"w-40\"\n            data-testid=\"select-area-filter\"\n          >\n            <SelectValue placeholder=\"Sin ordenar\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Sin ordenar</SelectItem>\n            <SelectItem value=\"desc\">Mayor a menor</SelectItem>\n            <SelectItem value=\"asc\">Menor a mayor</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Regime Filter */}\n      <div className=\"flex items-center space-x-2\">\n        <span className=\"text-sm text-muted-foreground\">Régimen:</span>\n        <Select\n          onValueChange={(value) => handleFilterChange(\"regime\", value)}\n          defaultValue=\"all\"\n        >\n          <SelectTrigger \n            className=\"w-52\"\n            data-testid=\"select-regime-filter\"\n          >\n            <SelectValue placeholder=\"Todos los regímenes\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos los regímenes</SelectItem>\n            <SelectItem value=\"propiedad\">Propiedad</SelectItem>\n            <SelectItem value=\"arrendamiento\">Arrendamiento</SelectItem>\n            <SelectItem value=\"gestionando para terceros\">Gestionando para terceros</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Clear Filters Button */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={clearFilters}\n        className=\"text-muted-foreground hover:text-foreground\"\n        data-testid=\"button-clear-filters\"\n      >\n        <X className=\"h-4 w-4 mr-1\" />\n        Limpiar filtros\n      </Button>\n    </div>\n  );\n}","size_bytes":4935},"client/src/components/ChacrasSelectionTable.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ChevronUp, ChevronDown } from \"lucide-react\";\nimport { Chacra } from \"@shared/schema\";\nimport { ChacrasFilters } from \"./ChacrasFilters\";\n\ntype SortField = \"name\" | \"area\" | \"regime\" | \"establishmentName\";\ntype SortDirection = \"asc\" | \"desc\";\n\ninterface ChacrasSelectionTableProps {\n  chacras: Chacra[];\n  filters: ChacrasFilters;\n  selectedChacras: string[];\n  onChacraSelectionChange: (chacraId: string, selected: boolean) => void;\n}\n\nconst regimeColors = {\n  \"propiedad\": \"bg-primary text-primary-foreground\",\n  \"arrendamiento\": \"bg-secondary text-secondary-foreground\", \n  \"gestionando para terceros\": \"bg-accent text-accent-foreground\"\n};\n\nexport default function ChacrasSelectionTable({ \n  chacras, \n  filters, \n  selectedChacras, \n  onChacraSelectionChange \n}: ChacrasSelectionTableProps) {\n  const [sortField, setSortField] = useState<SortField>(\"name\");\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\");\n\n  // Apply filters\n  const filteredChacras = useMemo(() => {\n    return chacras.filter(chacra => {\n      // Establishment filter\n      if (filters.establishment !== \"all\") {\n        const establishmentMatch = chacra.establishmentName.toLowerCase().includes(\n          filters.establishment.replace(\"-\", \" \")\n        );\n        if (!establishmentMatch) return false;\n      }\n\n      // Regime filter\n      if (filters.regime !== \"all\" && chacra.regime !== filters.regime) {\n        return false;\n      }\n\n      return true;\n    });\n  }, [chacras, filters]);\n\n  // Sort filtered chacras\n  const sortedAndFilteredChacras = useMemo(() => {\n    let result = [...filteredChacras];\n\n    // Apply area sorting from filters first\n    if (filters.area === \"asc\" || filters.area === \"desc\") {\n      result.sort((a, b) => {\n        const aArea = parseFloat(a.area);\n        const bArea = parseFloat(b.area);\n        return filters.area === \"asc\" ? aArea - bArea : bArea - aArea;\n      });\n      return result;\n    }\n\n    // Apply manual sorting\n    return result.sort((a, b) => {\n      let aValue: string | number;\n      let bValue: string | number;\n\n      switch (sortField) {\n        case \"area\":\n          aValue = parseFloat(a.area);\n          bValue = parseFloat(b.area);\n          break;\n        default:\n          aValue = a[sortField].toLowerCase();\n          bValue = b[sortField].toLowerCase();\n          break;\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === \"asc\" ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === \"asc\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [filteredChacras, filters.area, sortField, sortDirection]);\n\n  const handleSort = (field: SortField) => {\n    // Don't allow manual area sorting if filter area sorting is active\n    if (field === \"area\" && filters.area !== \"all\") return;\n\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n    console.log(`Sorting by ${field} in ${sortDirection === \"asc\" ? \"desc\" : \"asc\"} order`);\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    sortedAndFilteredChacras.forEach((chacra) => {\n      if (checked !== selectedChacras.includes(chacra.id)) {\n        onChacraSelectionChange(chacra.id, checked);\n      }\n    });\n  };\n\n  const isAllSelected = sortedAndFilteredChacras.length > 0 && \n    sortedAndFilteredChacras.every(chacra => selectedChacras.includes(chacra.id));\n  const isSomeSelected = sortedAndFilteredChacras.some(chacra => selectedChacras.includes(chacra.id));\n\n  const SortButton = ({ field, children }: { field: SortField; children: React.ReactNode }) => {\n    const isAreaWithFilter = field === \"area\" && filters.area !== \"all\";\n    \n    return (\n      <Button\n        variant=\"ghost\"\n        className={`h-auto p-0 font-semibold justify-start hover:bg-transparent ${\n          isAreaWithFilter ? \"cursor-not-allowed opacity-50\" : \"\"\n        }`}\n        onClick={() => handleSort(field)}\n        disabled={isAreaWithFilter}\n        data-testid={`sort-${field}`}\n      >\n        {children}\n        {isAreaWithFilter && (\n          <span className=\"ml-2 text-xs text-muted-foreground\">(filtrado)</span>\n        )}\n        {!isAreaWithFilter && (\n          <div className=\"ml-2 flex flex-col\">\n            <ChevronUp \n              className={`h-3 w-3 ${\n                sortField === field && sortDirection === \"asc\" \n                  ? \"text-primary\" \n                  : \"text-muted-foreground\"\n              }`} \n            />\n            <ChevronDown \n              className={`h-3 w-3 -mt-1 ${\n                sortField === field && sortDirection === \"desc\" \n                  ? \"text-primary\" \n                  : \"text-muted-foreground\"\n              }`} \n            />\n          </div>\n        )}\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Lista de Chacras\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"select-all-chacras\"\n              checked={isAllSelected}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"checkbox-select-all-chacras\"\n            />\n            <label htmlFor=\"select-all-chacras\" className=\"text-sm text-muted-foreground cursor-pointer\">\n              Seleccionar todas\n            </label>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {selectedChacras.length > 0 && (\n            <Badge variant=\"default\" className=\"text-sm\">\n              {selectedChacras.filter(id => sortedAndFilteredChacras.find(c => c.id === id)).length} seleccionadas\n            </Badge>\n          )}\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            {sortedAndFilteredChacras.length} de {chacras.length} chacras\n          </Badge>\n          {(filters.establishment !== \"all\" || filters.regime !== \"all\" || filters.area !== \"all\") && (\n            <Badge variant=\"outline\" className=\"text-sm\">\n              Filtros activos\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"hover:bg-transparent\">\n              <TableHead className=\"w-12\">\n                {/* Selection column header */}\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"name\">Nombre</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"area\">Área (ha)</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"regime\">Régimen</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"establishmentName\">Establecimiento</SortButton>\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedAndFilteredChacras.map((chacra) => (\n              <TableRow \n                key={chacra.id} \n                className=\"hover:bg-muted/50\"\n                data-testid={`row-chacra-${chacra.id}`}\n              >\n                <TableCell>\n                  <Checkbox\n                    id={`chacra-select-${chacra.id}`}\n                    checked={selectedChacras.includes(chacra.id)}\n                    onCheckedChange={(checked) => onChacraSelectionChange(chacra.id, checked as boolean)}\n                    data-testid={`checkbox-chacra-${chacra.id}`}\n                  />\n                </TableCell>\n                <TableCell className=\"font-medium\">{chacra.name}</TableCell>\n                <TableCell>{chacra.area}</TableCell>\n                <TableCell>\n                  <Badge \n                    className={regimeColors[chacra.regime as keyof typeof regimeColors]}\n                    variant=\"secondary\"\n                  >\n                    {chacra.regime}\n                  </Badge>\n                </TableCell>\n                <TableCell>{chacra.establishmentName}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {sortedAndFilteredChacras.length === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground bg-muted/30 rounded-md\">\n          <p>No se encontraron chacras que coincidan con los filtros seleccionados.</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8991},"client/src/components/ChacrasTable.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronUp, ChevronDown } from \"lucide-react\";\nimport { Chacra } from \"@shared/schema\";\n\ntype SortField = \"name\" | \"area\" | \"regime\" | \"establishmentName\";\ntype SortDirection = \"asc\" | \"desc\";\n\ninterface ChacrasTableProps {\n  chacras: Chacra[];\n}\n\nconst regimeColors = {\n  \"propiedad\": \"bg-primary text-primary-foreground\",\n  \"arrendamiento\": \"bg-secondary text-secondary-foreground\", \n  \"gestionando para terceros\": \"bg-accent text-accent-foreground\"\n};\n\nexport default function ChacrasTable({ chacras }: ChacrasTableProps) {\n  const [sortField, setSortField] = useState<SortField>(\"name\");\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\");\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n    console.log(`Sorting by ${field} in ${sortDirection === \"asc\" ? \"desc\" : \"asc\"} order`);\n  };\n\n  const sortedChacras = useMemo(() => {\n    return [...chacras].sort((a, b) => {\n      let aValue: string | number;\n      let bValue: string | number;\n\n      switch (sortField) {\n        case \"area\":\n          aValue = parseFloat(a.area);\n          bValue = parseFloat(b.area);\n          break;\n        default:\n          aValue = a[sortField].toLowerCase();\n          bValue = b[sortField].toLowerCase();\n          break;\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === \"asc\" ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === \"asc\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [chacras, sortField, sortDirection]);\n\n  const SortButton = ({ field, children }: { field: SortField; children: React.ReactNode }) => (\n    <Button\n      variant=\"ghost\"\n      className=\"h-auto p-0 font-semibold justify-start hover:bg-transparent\"\n      onClick={() => handleSort(field)}\n      data-testid={`sort-${field}`}\n    >\n      {children}\n      <div className=\"ml-2 flex flex-col\">\n        <ChevronUp \n          className={`h-3 w-3 ${\n            sortField === field && sortDirection === \"asc\" \n              ? \"text-primary\" \n              : \"text-muted-foreground\"\n          }`} \n        />\n        <ChevronDown \n          className={`h-3 w-3 -mt-1 ${\n            sortField === field && sortDirection === \"desc\" \n              ? \"text-primary\" \n              : \"text-muted-foreground\"\n          }`} \n        />\n      </div>\n    </Button>\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">\n          Lista de Chacras\n        </h3>\n        <Badge variant=\"secondary\" className=\"text-sm\">\n          {chacras.length} chacras registradas\n        </Badge>\n      </div>\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"hover:bg-transparent\">\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"name\">Nombre</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"area\">Área (ha)</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"regime\">Régimen</SortButton>\n              </TableHead>\n              <TableHead className=\"font-semibold\">\n                <SortButton field=\"establishmentName\">Establecimiento</SortButton>\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedChacras.map((chacra) => (\n              <TableRow \n                key={chacra.id} \n                className=\"hover:bg-muted/50\"\n                data-testid={`row-chacra-${chacra.id}`}\n              >\n                <TableCell className=\"font-medium\">{chacra.name}</TableCell>\n                <TableCell>{chacra.area}</TableCell>\n                <TableCell>\n                  <Badge \n                    className={regimeColors[chacra.regime as keyof typeof regimeColors]}\n                    variant=\"secondary\"\n                  >\n                    {chacra.regime}\n                  </Badge>\n                </TableCell>\n                <TableCell>{chacra.establishmentName}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {chacras.length === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <p>No hay chacras registradas aún.</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4872},"client/src/components/CosechaTabs.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Package, List } from \"lucide-react\";\nimport ChacrasFiltersComponent, { ChacrasFilters } from \"./ChacrasFilters\";\nimport ChacrasSelectionTable from \"./ChacrasSelectionTable\";\nimport RemitosList from \"./RemitosList\";\nimport { Chacra, Remito } from \"@shared/schema\";\n\ninterface CosechaTabsProps {\n  chacras: Chacra[];\n  remitos: Remito[];\n  selectedChacras: string[];\n  onChacraSelectionChange: (chacraId: string, selected: boolean) => void;\n}\n\nexport default function CosechaTabs({ \n  chacras, \n  remitos, \n  selectedChacras, \n  onChacraSelectionChange \n}: CosechaTabsProps) {\n  const [activeTab, setActiveTab] = useState<\"chacras\" | \"remitos\">(\"chacras\");\n  const [chacrasFilters, setChacrasFilters] = useState<ChacrasFilters>({\n    establishment: \"all\",\n    area: \"all\",\n    regime: \"all\"\n  });\n\n  const handleChacrasFilterChange = (newFilters: ChacrasFilters) => {\n    setChacrasFilters(newFilters);\n    console.log(\"Chacras filters changed:\", newFilters);\n  };\n\n  const tabs = [\n    {\n      id: \"chacras\" as const,\n      label: \"Lista de Chacras\",\n      icon: Package,\n      count: chacras.length\n    },\n    {\n      id: \"remitos\" as const,\n      label: \"Lista de Remitos\", \n      icon: List,\n      count: remitos.length\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-2 border-b border-border\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <Button\n              key={tab.id}\n              variant=\"ghost\"\n              className={`px-4 py-2 rounded-none border-b-2 transition-colors ${\n                activeTab === tab.id\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => setActiveTab(tab.id)}\n              data-testid={`tab-${tab.id}`}\n            >\n              <Icon className=\"h-4 w-4 mr-2\" />\n              {tab.label}\n              <span className=\"ml-2 bg-muted text-muted-foreground px-2 py-1 rounded-full text-xs\">\n                {tab.count}\n              </span>\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"min-h-[400px]\">\n        {activeTab === \"chacras\" && (\n          <div className=\"space-y-6\">\n            <ChacrasFiltersComponent onFilterChange={handleChacrasFilterChange} />\n            <ChacrasSelectionTable\n              chacras={chacras}\n              filters={chacrasFilters}\n              selectedChacras={selectedChacras}\n              onChacraSelectionChange={onChacraSelectionChange}\n            />\n          </div>\n        )}\n\n        {activeTab === \"remitos\" && (\n          <RemitosList remitos={remitos} />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":2891},"client/src/components/EmptyStateCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { FileText } from \"lucide-react\";\n\ninterface EmptyStateCardProps {\n  title: string;\n  description: string;\n}\n\nexport default function EmptyStateCard({ title, description }: EmptyStateCardProps) {\n  return (\n    <Card className=\"border-dashed\">\n      <CardContent className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <div className=\"p-3 bg-muted rounded-full mb-4\">\n          <FileText className=\"h-6 w-6 text-muted-foreground\" />\n        </div>\n        <h3 className=\"text-lg font-medium text-foreground mb-2\">\n          {title}\n        </h3>\n        <p className=\"text-muted-foreground max-w-md\">\n          {description}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":767},"client/src/components/EventRegistrationForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { CalendarDays, Plus } from \"lucide-react\";\n\nconst eventRegistrationSchema = z.object({\n  description: z.string().min(1, \"La descripción es requerida\"),\n  eventType: z.string().min(1, \"El tipo de evento es requerido\"),\n  startDate: z.string().min(1, \"La fecha de inicio es requerida\"),\n  endDate: z.string().optional(),\n  \n  // Campos específicos para Fertilización\n  fertilizante: z.string().optional(),\n  dosisFertilizante: z.string().optional(),\n  \n  // Campos específicos para Siembra\n  variedadSemilla: z.string().optional(),\n  densidadSiembra: z.string().optional(),\n  \n  // Campos específicos para Aplicación\n  categoriaProducto: z.string().optional(),\n  productoAplicado: z.string().optional(),\n  dosisAplicacion: z.string().optional(),\n  \n  // Campos específicos para Cosecha\n  rendimiento: z.string().optional(),\n  \n  details: z.string().optional(),\n  notes: z.string().optional()\n});\n\ntype EventRegistrationData = z.infer<typeof eventRegistrationSchema>;\n\ninterface EventRegistrationFormProps {\n  onSubmit: (data: EventRegistrationData) => void;\n}\n\n// Productos comunes en Uruguay para cultivo de arroz\nconst fertilizantes = [\n  { value: \"urea\", label: \"Urea\" },\n  { value: \"dap\", label: \"Fosfato Diamónico (DAP)\" },\n  { value: \"sulfato_amonio\", label: \"Sulfato de Amonio\" },\n  { value: \"npk\", label: \"NPK\" },\n  { value: \"superfosfato\", label: \"Superfosfato Triple\" },\n  { value: \"otro\", label: \"Otro\" }\n];\n\nconst herbicidas = [\n  { value: \"glifosato\", label: \"Glifosato\" },\n  { value: \"propanil\", label: \"Propanil\" },\n  { value: \"bentazon\", label: \"Bentazon\" },\n  { value: \"clomazone\", label: \"Clomazone\" },\n  { value: \"quinclorac\", label: \"Quinclorac\" },\n  { value: \"otro\", label: \"Otro\" }\n];\n\nconst insecticidas = [\n  { value: \"clorpirifos\", label: \"Clorpirifos\" },\n  { value: \"lambda_cihalotrina\", label: \"Lambda Cihalotrina\" },\n  { value: \"cipermetrina\", label: \"Cipermetrina\" },\n  { value: \"fipronil\", label: \"Fipronil\" },\n  { value: \"otro\", label: \"Otro\" }\n];\n\nconst fungicidas = [\n  { value: \"azoxistrobina\", label: \"Azoxistrobina\" },\n  { value: \"trifloxistrobina\", label: \"Trifloxistrobina\" },\n  { value: \"tebuconazol\", label: \"Tebuconazol\" },\n  { value: \"propiconazol\", label: \"Propiconazol\" },\n  { value: \"otro\", label: \"Otro\" }\n];\n\nconst variedadesSemilla = [\n  { value: \"el_paso_144\", label: \"El Paso 144\" },\n  { value: \"inia_merín\", label: \"INIA Merín\" },\n  { value: \"inia_tacuarí\", label: \"INIA Tacuarí\" },\n  { value: \"parao\", label: \"Parao\" },\n  { value: \"gurí_inta_cl\", label: \"Gurí INTA CL\" },\n  { value: \"irga_424\", label: \"IRGA 424\" },\n  { value: \"otro\", label: \"Otro\" }\n];\n\nexport default function EventRegistrationForm({ onSubmit }: EventRegistrationFormProps) {\n\n  const form = useForm<EventRegistrationData>({\n    resolver: zodResolver(eventRegistrationSchema),\n    defaultValues: {\n      description: \"\",\n      eventType: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      fertilizante: \"\",\n      dosisFertilizante: \"\",\n      variedadSemilla: \"\",\n      densidadSiembra: \"\",\n      categoriaProducto: \"\",\n      productoAplicado: \"\",\n      dosisAplicacion: \"\",\n      rendimiento: \"\",\n      details: \"\",\n      notes: \"\"\n    }\n  });\n\n  const eventTypes = [\n    { value: \"laboreo\", label: \"Laboreo\" },\n    { value: \"fertilización\", label: \"Fertilización\" },\n    { value: \"siembra\", label: \"Siembra\" },\n    { value: \"emergencia\", label: \"Emergencia\" },\n    { value: \"inundación\", label: \"Inundación\" },\n    { value: \"aplicación\", label: \"Aplicación\" },\n    { value: \"drenado\", label: \"Drenado\" },\n    { value: \"cosecha\", label: \"Cosecha\" }\n  ];\n\n  const watchedEventType = form.watch(\"eventType\");\n  const watchedCategoriaProducto = form.watch(\"categoriaProducto\");\n\n  const handleSubmit = (data: EventRegistrationData) => {\n    onSubmit(data);\n    console.log(\"Event registered:\", data);\n    \n    // Reset form\n    form.reset();\n  };\n\n  // Obtener productos según categoría seleccionada\n  const getProductosPorCategoria = () => {\n    switch (watchedCategoriaProducto) {\n      case \"herbicida\":\n        return herbicidas;\n      case \"insecticida\":\n        return insecticidas;\n      case \"fungicida\":\n        return fungicidas;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <CalendarDays className=\"h-5 w-5 text-primary\" />\n          <span>Registrar Eventos</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Event Details */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descripción del Evento</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ej: Aplicación de fertilizante...\"\n                        data-testid=\"input-event-description\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"eventType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Evento</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-event-type\">\n                          <SelectValue placeholder=\"Seleccionar tipo...\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {eventTypes.map((type) => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Date Fields */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fecha de Inicio / Ocurrencia</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\"\n                        data-testid=\"input-start-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fecha de Fin (opcional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\"\n                        placeholder=\"Solo si es un evento de múltiples días\"\n                        data-testid=\"input-end-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Campos específicos para Fertilización */}\n            {watchedEventType === \"fertilización\" && (\n              <div className=\"border border-muted rounded-lg p-4 space-y-4 bg-muted/10\">\n                <h4 className=\"font-medium text-sm text-foreground\">Detalles de Fertilización</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fertilizante\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tipo de Fertilizante</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-fertilizante\">\n                              <SelectValue placeholder=\"Seleccionar fertilizante...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {fertilizantes.map((fert) => (\n                              <SelectItem key={fert.value} value={fert.value}>\n                                {fert.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dosisFertilizante\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dosis (kg/ha)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"Ej: 80\"\n                            data-testid=\"input-dosis-fertilizante\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Campos específicos para Siembra */}\n            {watchedEventType === \"siembra\" && (\n              <div className=\"border border-muted rounded-lg p-4 space-y-4 bg-muted/10\">\n                <h4 className=\"font-medium text-sm text-foreground\">Detalles de Siembra</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"variedadSemilla\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Variedad de Semilla</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-variedad-semilla\">\n                              <SelectValue placeholder=\"Seleccionar variedad...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {variedadesSemilla.map((variedad) => (\n                              <SelectItem key={variedad.value} value={variedad.value}>\n                                {variedad.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"densidadSiembra\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Densidad de Siembra (kg/ha)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"Ej: 120\"\n                            data-testid=\"input-densidad-siembra\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Campos específicos para Aplicación */}\n            {watchedEventType === \"aplicación\" && (\n              <div className=\"border border-muted rounded-lg p-4 space-y-4 bg-muted/10\">\n                <h4 className=\"font-medium text-sm text-foreground\">Detalles de Aplicación</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"categoriaProducto\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Categoría de Producto</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-categoria-producto\">\n                              <SelectValue placeholder=\"Seleccionar...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"herbicida\">Herbicida</SelectItem>\n                            <SelectItem value=\"insecticida\">Insecticida</SelectItem>\n                            <SelectItem value=\"fungicida\">Fungicida</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {watchedCategoriaProducto && (\n                    <FormField\n                      control={form.control}\n                      name=\"productoAplicado\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Producto Aplicado</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-producto-aplicado\">\n                                <SelectValue placeholder=\"Seleccionar producto...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {getProductosPorCategoria().map((producto) => (\n                                <SelectItem key={producto.value} value={producto.value}>\n                                  {producto.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"dosisAplicacion\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Dosis (L/ha o kg/ha)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"text\"\n                            placeholder=\"Ej: 2.5 L/ha\"\n                            data-testid=\"input-dosis-aplicacion\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Campos específicos para Cosecha */}\n            {watchedEventType === \"cosecha\" && (\n              <div className=\"border border-muted rounded-lg p-4 space-y-4 bg-muted/10\">\n                <h4 className=\"font-medium text-sm text-foreground\">Detalles de Cosecha</h4>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"rendimiento\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Rendimiento (ton/ha)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            step=\"0.1\"\n                            placeholder=\"Ej: 8.5\"\n                            data-testid=\"input-rendimiento\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Additional Details */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"details\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Detalles Técnicos Adicionales</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Información técnica adicional...\"\n                        className=\"resize-none\"\n                        data-testid=\"textarea-details\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notas Adicionales</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Observaciones generales...\"\n                        className=\"resize-none\"\n                        data-testid=\"textarea-notes\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => form.reset()}\n                data-testid=\"button-clear-form\"\n              >\n                Limpiar\n              </Button>\n              <Button \n                type=\"submit\"\n                className=\"bg-primary text-primary-foreground\"\n                data-testid=\"button-register-event\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Registrar Evento/s\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":19766},"client/src/components/EventsFilters.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Filter, X } from \"lucide-react\";\n\ninterface EventsFiltersProps {\n  onFilterChange: (filters: EventFilters) => void;\n}\n\nexport interface EventFilters {\n  establishment: string;\n  zafra: string;\n  regime: string;\n  type: string;\n}\n\nexport default function EventsFilters({ onFilterChange }: EventsFiltersProps) {\n  const [filters, setFilters] = useState<EventFilters>({\n    establishment: \"all\",\n    zafra: \"all\", \n    regime: \"all\",\n    type: \"all\"\n  });\n\n  const handleFilterChange = (key: keyof EventFilters, value: string) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n    console.log(`Filter changed: ${key} = ${value}`);\n  };\n\n  const clearFilters = () => {\n    const clearedFilters = {\n      establishment: \"all\",\n      zafra: \"all\",\n      regime: \"all\", \n      type: \"all\"\n    };\n    setFilters(clearedFilters);\n    onFilterChange(clearedFilters);\n    console.log(\"Filters cleared\");\n  };\n\n  const hasActiveFilters = Object.values(filters).some(value => value !== \"all\");\n\n  return (\n    <div className=\"bg-card border border-border rounded-md p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"h-4 w-4 text-muted-foreground\" />\n          <h3 className=\"font-medium text-foreground\">Filtros</h3>\n        </div>\n        {hasActiveFilters && (\n          <Button\n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={clearFilters}\n            data-testid=\"button-clear-filters\"\n          >\n            <X className=\"h-4 w-4 mr-1\" />\n            Limpiar\n          </Button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium text-foreground mb-1 block\">\n            Establecimiento\n          </label>\n          <Select value={filters.establishment} onValueChange={(value) => handleFilterChange(\"establishment\", value)}>\n            <SelectTrigger data-testid=\"select-establishment\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos</SelectItem>\n              <SelectItem value=\"la-juanita\">La Juanita</SelectItem>\n              <SelectItem value=\"don-timoteo\">Don Timoteo</SelectItem>\n              <SelectItem value=\"los-pinos\">Los Pinos</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-foreground mb-1 block\">\n            Zafra\n          </label>\n          <Select value={filters.zafra} onValueChange={(value) => handleFilterChange(\"zafra\", value)}>\n            <SelectTrigger data-testid=\"select-zafra\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todas</SelectItem>\n              <SelectItem value=\"2024-25\">2024-25</SelectItem>\n              <SelectItem value=\"2023-24\">2023-24</SelectItem>\n              <SelectItem value=\"2022-23\">2022-23</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-foreground mb-1 block\">\n            Régimen\n          </label>\n          <Select value={filters.regime} onValueChange={(value) => handleFilterChange(\"regime\", value)}>\n            <SelectTrigger data-testid=\"select-regime\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos</SelectItem>\n              <SelectItem value=\"propiedad\">Propiedad</SelectItem>\n              <SelectItem value=\"arrendamiento\">Arrendamiento</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-foreground mb-1 block\">\n            Tipo\n          </label>\n          <Select value={filters.type} onValueChange={(value) => handleFilterChange(\"type\", value)}>\n            <SelectTrigger data-testid=\"select-type\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Todos</SelectItem>\n              <SelectItem value=\"arroz\">Arroz</SelectItem>\n              <SelectItem value=\"pasturas\">Pasturas</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4667},"client/src/components/EventsTable.tsx":{"content":"import { useState } from \"react\";\nimport TimelineRow from \"./TimelineRow\";\nimport TimelineModal from \"./TimelineModal\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Chacra, Event, Zafra } from \"@shared/schema\";\nimport { EventFilters } from \"./EventsFilters\";\n\ninterface EventsTableProps {\n  chacras: Chacra[];\n  events: Event[];\n  zafras: Zafra[];\n  filters: EventFilters;\n  selectedChacras: string[];\n  onChacraSelectionChange: (chacraId: string, selected: boolean) => void;\n}\n\nexport default function EventsTable({ chacras, events, zafras, filters, selectedChacras, onChacraSelectionChange }: EventsTableProps) {\n  const [selectedChacra, setSelectedChacra] = useState<Chacra | null>(null);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  // Filter chacras based on current filters\n  const filteredChacras = chacras.filter(chacra => {\n    if (filters.establishment !== \"all\") {\n      const establishmentMatch = chacra.establishmentName.toLowerCase().includes(filters.establishment.replace(\"-\", \" \"));\n      if (!establishmentMatch) return false;\n    }\n    \n    if (filters.regime !== \"all\" && chacra.regime !== filters.regime) {\n      return false;\n    }\n\n    // Filter by type (arroz/pasturas) based on zafras\n    if (filters.type !== \"all\") {\n      const chacraZafras = zafras.filter(z => z.chacraId === chacra.id);\n      const hasType = chacraZafras.some(z => z.type === filters.type);\n      if (!hasType) return false;\n    }\n\n    return true;\n  });\n\n  const handleViewDetails = (chacra: Chacra) => {\n    setSelectedChacra(chacra);\n    setModalOpen(true);\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    filteredChacras.forEach((chacra) => {\n      if (checked !== selectedChacras.includes(chacra.id)) {\n        onChacraSelectionChange(chacra.id, checked);\n      }\n    });\n  };\n\n  const isAllSelected = filteredChacras.length > 0 && filteredChacras.every(chacra => selectedChacras.includes(chacra.id));\n  const isSomeSelected = filteredChacras.some(chacra => selectedChacras.includes(chacra.id));\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Líneas de Tiempo de Chacras\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"select-all-chacras\"\n              checked={isAllSelected}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"checkbox-select-all-chacras\"\n            />\n            <label htmlFor=\"select-all-chacras\" className=\"text-sm text-muted-foreground cursor-pointer\">\n              Seleccionar todas\n            </label>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {selectedChacras.length > 0 && (\n            <Badge variant=\"default\" className=\"text-sm\">\n              {selectedChacras.filter(id => filteredChacras.find(c => c.id === id)).length} seleccionadas\n            </Badge>\n          )}\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            {filteredChacras.length} de {chacras.length} chacras\n          </Badge>\n          {filters.establishment !== \"all\" || filters.regime !== \"all\" || filters.type !== \"all\" ? (\n            <Badge variant=\"outline\" className=\"text-sm\">\n              Filtros activos\n            </Badge>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        {filteredChacras.length > 0 ? (\n          filteredChacras.map((chacra) => (\n            <div key={chacra.id} className=\"flex items-center space-x-3 border rounded-md p-3 hover-elevate\">\n              <Checkbox\n                id={`chacra-select-${chacra.id}`}\n                checked={selectedChacras.includes(chacra.id)}\n                onCheckedChange={(checked) => onChacraSelectionChange(chacra.id, checked as boolean)}\n                data-testid={`checkbox-chacra-${chacra.id}`}\n              />\n              <div className=\"flex-1\">\n                <TimelineRow\n                  chacra={chacra}\n                  events={events}\n                  zafras={zafras}\n                  onViewDetails={handleViewDetails}\n                />\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center py-8 text-muted-foreground bg-muted/30 rounded-md\">\n            <p>No se encontraron chacras que coincidan con los filtros seleccionados.</p>\n          </div>\n        )}\n      </div>\n\n      <TimelineModal\n        isOpen={modalOpen}\n        onClose={() => setModalOpen(false)}\n        chacra={selectedChacra}\n        events={events}\n        zafras={zafras}\n      />\n    </div>\n  );\n}","size_bytes":4794},"client/src/components/Header.tsx":{"content":"import { Wheat, User, Settings, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger, DropdownMenuLabel } from \"@/components/ui/dropdown-menu\";\nimport { useUser, MOCK_USERS } from \"@/contexts/UserContext\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Header() {\n  const { currentUser, setCurrentUser } = useUser();\n\n  return (\n    <header className=\"bg-white border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-primary rounded-md\">\n            <Wheat className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-foreground\">\n              Portal de Trazabilidad de Arroz\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Sistema de gestión para productores rurales\n            </p>\n          </div>\n        </div>\n        \n        {/* User Session Area */}\n        <div className=\"flex items-center space-x-3\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2 h-auto p-2\" data-testid=\"button-user-menu\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                    {currentUser.initials}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"text-left\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium\">{currentUser.name}</span>\n                    <Badge variant={currentUser.type === \"productor\" ? \"default\" : \"secondary\"} className=\"text-xs\">\n                      {currentUser.type === \"productor\" ? \"Productor\" : \"Molino\"}\n                    </Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{currentUser.email}</div>\n                </div>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-64\">\n              <DropdownMenuLabel className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                Cambiar Usuario Mock\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              \n              {Object.values(MOCK_USERS).map((user) => (\n                <DropdownMenuItem \n                  key={user.id}\n                  onClick={() => setCurrentUser(user)}\n                  data-testid={`menu-switch-user-${user.type}`}\n                  className={currentUser.id === user.id ? \"bg-accent\" : \"\"}\n                >\n                  <Avatar className=\"h-6 w-6 mr-2\">\n                    <AvatarFallback className=\"bg-primary text-primary-foreground text-xs\">\n                      {user.initials}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium\">{user.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {user.type === \"productor\" ? \"Productor Rural\" : user.organization}\n                    </div>\n                  </div>\n                  {currentUser.id === user.id && (\n                    <span className=\"text-xs text-primary\">✓</span>\n                  )}\n                </DropdownMenuItem>\n              ))}\n              \n              <DropdownMenuSeparator />\n              \n              <DropdownMenuItem data-testid=\"menu-profile\">\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Mi Perfil</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem data-testid=\"menu-settings\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Configuración</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":4287},"client/src/components/MapTabs.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Map, Plus, Eye, Edit, Phone, MapPin, Info, Share2, Hand, ZoomIn, MousePointer } from \"lucide-react\";\nimport { Establishment } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\n\ninterface MapTabsProps {\n  establishments: Establishment[];\n  onAddEstablishment?: (newEstablishment: Establishment) => void;\n  onUpdateEstablishment?: (establishment: Establishment) => void;\n  sharedEstablishmentIds?: string[];\n  showAdminAssignment?: boolean;\n}\n\nexport default function MapTabs({ establishments, onAddEstablishment, onUpdateEstablishment, sharedEstablishmentIds = [], showAdminAssignment = true }: MapTabsProps) {\n  const [activeTab, setActiveTab] = useState(establishments[0]?.id || \"new\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingEstablishment, setEditingEstablishment] = useState<Establishment | null>(null);\n  const [isCreatingNew, setIsCreatingNew] = useState(false);\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n  const [pendingEstablishment, setPendingEstablishment] = useState<Establishment | null>(null);\n  \n  const currentEstablishment = establishments.find(e => e.id === activeTab);\n  \n  const handleViewEstablishment = (establishment: Establishment) => {\n    setEditingEstablishment({ ...establishment });\n    setIsEditing(false);\n    setIsCreatingNew(false);\n    setIsModalOpen(true);\n  };\n  \n  const handleCreateNewEstablishment = () => {\n    const newEstablishment: Establishment = {\n      id: '',\n      name: '',\n      address: '',\n      phone: '',\n      owner: '',\n      rut: '',\n      latitude: '',\n      longitude: '',\n      referenceCoordinates: '',\n      adminEmail: null\n    };\n    setEditingEstablishment(newEstablishment);\n    setIsEditing(true);\n    setIsCreatingNew(true);\n    setIsModalOpen(true);\n  };\n  \n  const handleEditEstablishment = () => {\n    setIsEditing(true);\n  };\n  \n  const handleSaveEstablishment = () => {\n    if (editingEstablishment && editingEstablishment.adminEmail && editingEstablishment.adminEmail.trim()) {\n      setPendingEstablishment(editingEstablishment);\n      setIsConfirmationOpen(true);\n    } else {\n      confirmSaveEstablishment(editingEstablishment);\n    }\n  };\n\n  const confirmSaveEstablishment = (establishment: Establishment | null) => {\n    if (establishment) {\n      if (isCreatingNew) {\n        const newId = (establishments.length + 1).toString();\n        const newEstablishment = { ...establishment, id: newId };\n        if (onAddEstablishment) {\n          onAddEstablishment(newEstablishment);\n        }\n        setActiveTab(newId);\n      } else if (onUpdateEstablishment) {\n        onUpdateEstablishment(establishment);\n      }\n    }\n    setIsEditing(false);\n    setIsCreatingNew(false);\n    setIsModalOpen(false);\n    setIsConfirmationOpen(false);\n    setPendingEstablishment(null);\n  };\n  \n  const handleCancelEdit = () => {\n    if (isCreatingNew) {\n      setEditingEstablishment(null);\n    } else if (currentEstablishment) {\n      setEditingEstablishment({ ...currentEstablishment });\n    }\n    setIsEditing(false);\n    setIsCreatingNew(false);\n  };\n\n  const tabs = [\n    ...establishments,\n    { id: \"new\", name: \"Nuevo Establecimiento\" }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-2 border-b border-border\">\n        {tabs.map((tab) => {\n          const isShared = tab.id !== \"new\" && sharedEstablishmentIds.includes(tab.id);\n          const isActive = activeTab === tab.id;\n          \n          return (\n            <Button\n              key={tab.id}\n              variant=\"ghost\"\n              className={`px-4 py-2 rounded-none border-b-2 transition-colors ${\n                isActive\n                  ? isShared \n                    ? \"border-blue-500 text-blue-600\" \n                    : \"border-primary text-primary\"\n                  : isShared\n                    ? \"border-transparent text-blue-600 hover:text-blue-700\"\n                    : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => {\n                setActiveTab(tab.id);\n                if (tab.id === \"new\") {\n                  handleCreateNewEstablishment();\n                }\n              }}\n              data-testid={`tab-establishment-${tab.id}`}\n            >\n              {tab.id === \"new\" && <Plus className=\"h-4 w-4 mr-2\" />}\n              {isShared && <Share2 className=\"h-3 w-3 mr-1.5\" />}\n              {tab.name}\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* Información del Establecimiento */}\n      {currentEstablishment && activeTab !== \"new\" && (\n        <Card className=\"w-full mb-4\">\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              {sharedEstablishmentIds.includes(currentEstablishment.id) && (\n                <div className=\"flex items-center gap-2 p-2 bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-md\">\n                  <Share2 className=\"h-4 w-4 text-blue-600 dark:text-blue-400 flex-shrink-0\" />\n                  <div className=\"text-sm\">\n                    <span className=\"font-medium text-blue-700 dark:text-blue-300\">Establecimiento Compartido</span>\n                    <span className=\"text-blue-600 dark:text-blue-400\"> - Compartido por {currentEstablishment.owner}</span>\n                  </div>\n                </div>\n              )}\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-muted-foreground\">Dirección:</span>\n                    <span className=\"font-medium\" data-testid=\"text-establishment-address\">{currentEstablishment.address}</span>\n                  </div>\n                  {currentEstablishment.phone && (\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">Teléfono:</span>\n                      <span className=\"font-medium\" data-testid=\"text-establishment-phone\">{currentEstablishment.phone}</span>\n                    </div>\n                  )}\n                </div>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleViewEstablishment(currentEstablishment)}\n                  data-testid=\"button-view-establishment\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Ver\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Map Display */}\n      <Card className=\"w-full\">\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-4\">\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <Map className=\"h-6 w-6 text-muted-foreground\" />\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                  {activeTab === \"new\" \n                    ? \"Vista de Mapa - Nuevo Establecimiento\" \n                    : `Vista de Mapa - ${tabs.find(t => t.id === activeTab)?.name}`\n                  }\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {activeTab === \"new\" \n                    ? \"Aquí se mostrará el mapa interactivo una vez que se cree el establecimiento.\"\n                    : \"Mapa interactivo mostrando todas las chacras del usuario, centrado en este establecimiento.\"\n                  }\n                </p>\n              </div>\n            </div>\n\n            {activeTab !== \"new\" && (\n              <div className=\"border-t border-border pt-4 space-y-3\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  <div className=\"flex items-start gap-3 p-3 bg-muted/30 rounded-md\">\n                    <MapPin className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">Centrado en este establecimiento</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Vista inicial basada en las coordenadas de referencia\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3 p-3 bg-muted/30 rounded-md\">\n                    <Plus className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">Crear polígonos de chacras</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Las nuevas chacras se asignarán a este establecimiento\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3 p-3 bg-muted/30 rounded-md\">\n                    <Hand className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">Navegación con arrastre</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Mueve el mapa arrastrando con el cursor\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start gap-3 p-3 bg-muted/30 rounded-md\">\n                    <ZoomIn className=\"h-5 w-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">Zoom interactivo</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Acerca y aleja para ver detalles\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-md p-3\">\n                  <div className=\"flex items-start gap-2\">\n                    <MousePointer className=\"h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                      <span className=\"font-medium\">Visualización completa:</span> El mapa muestra todas tus chacras, \n                      independientemente del establecimiento. Puedes navegar libremente entre todos tus campos.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Modal de Información del Establecimiento */}\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {isCreatingNew ? (\n                <>\n                  <Plus className=\"h-5 w-5\" />\n                  Nuevo Establecimiento\n                </>\n              ) : (\n                <>\n                  <Eye className=\"h-5 w-5\" />\n                  Información del Establecimiento\n                </>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {editingEstablishment && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Nombre</Label>\n                <Input\n                  id=\"name\"\n                  value={editingEstablishment.name}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, name: e.target.value})}\n                  disabled={!isEditing}\n                  data-testid=\"input-establishment-name\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Dirección</Label>\n                <Input\n                  id=\"address\"\n                  value={editingEstablishment.address}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, address: e.target.value})}\n                  disabled={!isEditing}\n                  data-testid=\"input-establishment-address\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Teléfono</Label>\n                <Input\n                  id=\"phone\"\n                  value={editingEstablishment.phone || ''}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, phone: e.target.value})}\n                  disabled={!isEditing}\n                  data-testid=\"input-establishment-phone\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"owner\">Propietario</Label>\n                <Input\n                  id=\"owner\"\n                  value={editingEstablishment.owner}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, owner: e.target.value})}\n                  disabled={!isEditing}\n                  data-testid=\"input-establishment-owner\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"rut\">RUT</Label>\n                <Input\n                  id=\"rut\"\n                  value={editingEstablishment.rut}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, rut: e.target.value})}\n                  disabled={!isEditing}\n                  data-testid=\"input-establishment-rut\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"coordinates\">Coordenadas de Referencia</Label>\n                <Input\n                  id=\"coordinates\"\n                  value={editingEstablishment.referenceCoordinates || ''}\n                  onChange={(e) => setEditingEstablishment({...editingEstablishment, referenceCoordinates: e.target.value})}\n                  disabled={!isEditing}\n                  placeholder=\"Ej: -32.3054, -58.0836\"\n                  data-testid=\"input-establishment-coordinates\"\n                />\n              </div>\n\n              {showAdminAssignment && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Label htmlFor=\"adminEmail\">Asignar Usuario como Administrador</Label>\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <Button \n                            type=\"button\" \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            className=\"h-5 w-5 p-0\"\n                            data-testid=\"button-admin-info\"\n                          >\n                            <Info className=\"h-4 w-4 text-muted-foreground\" />\n                          </Button>\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-sm\">\n                          <p>\n                            Designar un Usuario como administrador de este establecimiento hará que el establecimiento \n                            aparezca en la sesión de ese usuario, el cual podrá editar y controlar todo el establecimiento. \n                            Por default, usted mantendrá todos los permisos para también editar el establecimiento, pero \n                            el usuario administrador puede retirarle los permisos luego si lo desea. Esta opción es útil \n                            si usted quiere subir la información de un establecimiento de un productor para ahorrarle el \n                            trabajo al mismo, pudiéndole entregar el control del mismo luego.\n                          </p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </div>\n                  <Input\n                    id=\"adminEmail\"\n                    type=\"email\"\n                    value={editingEstablishment.adminEmail || ''}\n                    onChange={(e) => setEditingEstablishment({...editingEstablishment, adminEmail: e.target.value})}\n                    disabled={!isEditing}\n                    placeholder=\"email@ejemplo.com\"\n                    data-testid=\"input-establishment-admin-email\"\n                  />\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-2 pt-4\">\n                {isEditing ? (\n                  <>\n                    <Button \n                      variant=\"outline\" \n                      onClick={handleCancelEdit}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button \n                      onClick={handleSaveEstablishment}\n                      data-testid=\"button-save-establishment\"\n                    >\n                      {isCreatingNew ? 'Crear' : 'Guardar'}\n                    </Button>\n                  </>\n                ) : (\n                  !isCreatingNew && (\n                    <Button \n                      onClick={handleEditEstablishment}\n                      data-testid=\"button-edit-establishment\"\n                    >\n                      <Edit className=\"h-4 w-4 mr-2\" />\n                      Editar\n                    </Button>\n                  )\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Confirmación de Asignación de Administrador */}\n      <Dialog open={isConfirmationOpen} onOpenChange={setIsConfirmationOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Confirmar Asignación de Administrador</DialogTitle>\n            <DialogDescription>\n              ¿Está seguro que desea asignar el email{' '}\n              <span className=\"font-semibold\">{pendingEstablishment?.adminEmail}</span>{' '}\n              como administrador de este establecimiento?\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setIsConfirmationOpen(false);\n                setPendingEstablishment(null);\n              }}\n              data-testid=\"button-cancel-confirmation\"\n            >\n              Cancelar\n            </Button>\n            <Button \n              onClick={() => confirmSaveEstablishment(pendingEstablishment)}\n              data-testid=\"button-confirm-admin-assignment\"\n            >\n              Confirmar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19917},"client/src/components/MillManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport MillRow, { Mill } from \"./MillRow\";\nimport { Plus } from \"lucide-react\";\n\nconst AVAILABLE_MILLS = [\"Casarone\", \"Dambo\", \"Saman\", \"Arrozal 33\"];\n\nexport default function MillManagement() {\n  // todo: remove mock functionality - this will be replaced with real data\n  const [mills, setMills] = useState<Mill[]>([\n    {\n      id: \"1\",\n      name: \"Casarone\",\n      shareFieldManagement: false,\n      shareHarvestManagement: false,\n      shareTraceabilityInfo: false,\n    }\n  ]);\n\n  const generateId = () => Math.random().toString(36).substr(2, 9);\n\n  const addNewMill = () => {\n    const newMill: Mill = {\n      id: generateId(),\n      name: \"\",\n      shareFieldManagement: false,\n      shareHarvestManagement: false,\n      shareTraceabilityInfo: false,\n    };\n    setMills([...mills, newMill]);\n    console.log(\"New mill added\");\n  };\n\n  const updateMill = (updatedMill: Mill) => {\n    setMills(mills.map(mill => \n      mill.id === updatedMill.id ? updatedMill : mill\n    ));\n    console.log(\"Mill updated:\", updatedMill);\n  };\n\n  const deleteMill = (millId: string) => {\n    setMills(mills.filter(mill => mill.id !== millId));\n    console.log(\"Mill deleted:\", millId);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold text-foreground\">\n          Gestión de Molinos Asociados\n        </h2>\n        \n        <div className=\"space-y-4\">\n          {mills.map((mill, index) => (\n            <MillRow\n              key={mill.id}\n              mill={mill}\n              availableMills={AVAILABLE_MILLS}\n              onUpdate={updateMill}\n              onDelete={deleteMill}\n              canDelete={mills.length > 1}\n            />\n          ))}\n        </div>\n\n        <Button\n          variant=\"outline\"\n          onClick={addNewMill}\n          className=\"w-full border-dashed\"\n          data-testid=\"button-add-mill\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Agregar Nuevo Molino\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":2116},"client/src/components/MillRow.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { X, Info } from \"lucide-react\";\n\nexport interface Mill {\n  id: string;\n  name: string;\n  shareFieldManagement: boolean;\n  shareHarvestManagement: boolean;\n  shareTraceabilityInfo: boolean;\n}\n\ninterface MillRowProps {\n  mill: Mill;\n  availableMills: string[];\n  onUpdate: (mill: Mill) => void;\n  onDelete: (millId: string) => void;\n  canDelete?: boolean;\n}\n\nconst permissionDescriptions = {\n  shareFieldManagement: {\n    title: \"Compartir Administración de Chacras y Eventos\",\n    description: \"Permite que los propios molinos cambien las chacras y asignen eventos a las mismas. Es útil cuando el molino tiene un técnico que anota los eventos de chacra por usted. Sin embargo usted también mantiene la capacidad de agregar o editar chacras y eventos en las mismas.\"\n  },\n  shareHarvestManagement: {\n    title: \"Compartir Administración de Cosecha\", \n    description: \"Al compartir la administración de cosecha, el molino asociado podrá crear remitos a su chacra, y enviar directamente el camión a levantar el arroz con el remito creado. Sin embargo usted también mantendrá la potestad de crear y administrar los remitos.\"\n  },\n  shareTraceabilityInfo: {\n    title: \"Compartir Información de Trazabilidad\",\n    description: \"Al aceptar usted compartirá los datos de trazabilidad (lista de eventos) de la o las chacras desde las que se envió arroz a ese molino.\"\n  }\n};\n\nexport default function MillRow({ mill, availableMills, onUpdate, onDelete, canDelete = true }: MillRowProps) {\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [permissionDialog, setPermissionDialog] = useState<string | null>(null);\n\n  const handleMillChange = (value: string) => {\n    onUpdate({ ...mill, name: value });\n  };\n\n  const handlePermissionChange = (permission: keyof Mill, checked: boolean) => {\n    onUpdate({ ...mill, [permission]: checked });\n  };\n\n  const handleDelete = () => {\n    onDelete(mill.id);\n    setDeleteDialogOpen(false);\n  };\n\n  const renderPermissionButton = (key: keyof Mill, label: string) => {\n    const isChecked = mill[key] as boolean;\n    const info = permissionDescriptions[key as keyof typeof permissionDescriptions];\n    \n    return (\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={`${mill.id}-${key}`}\n          checked={isChecked}\n          onCheckedChange={(checked) => handlePermissionChange(key, checked as boolean)}\n          data-testid={`checkbox-${key}-${mill.id}`}\n        />\n        <label\n          htmlFor={`${mill.id}-${key}`}\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n        >\n          {label}\n        </label>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-4 w-4 p-0\"\n          onClick={() => setPermissionDialog(key)}\n          data-testid={`info-${key}-${mill.id}`}\n        >\n          <Info className=\"h-3 w-3 text-muted-foreground\" />\n        </Button>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between p-4 border border-border rounded-md bg-card space-x-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"min-w-48\">\n              <label className=\"text-sm font-medium text-foreground mb-1 block\">\n                Molino Asociado\n              </label>\n              <Select value={mill.name} onValueChange={handleMillChange}>\n                <SelectTrigger data-testid={`select-mill-${mill.id}`}>\n                  <SelectValue placeholder=\"Seleccionar molino\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableMills.map((millName) => (\n                    <SelectItem key={millName} value={millName}>\n                      {millName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {canDelete && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setDeleteDialogOpen(true)}\n                className=\"text-destructive hover:text-destructive\"\n                data-testid={`button-delete-${mill.id}`}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {renderPermissionButton(\"shareFieldManagement\", \"Compartir Administración de Chacras y Eventos\")}\n            {renderPermissionButton(\"shareHarvestManagement\", \"Compartir Administración de Cosecha\")}\n            {renderPermissionButton(\"shareTraceabilityInfo\", \"Compartir Información de Trazabilidad\")}\n          </div>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirmar Eliminación</DialogTitle>\n            <DialogDescription>\n              ¿Está seguro que quiere eliminar este molino? Esta acción no se puede deshacer.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDeleteDialogOpen(false)}>\n              Cancelar\n            </Button>\n            <Button variant=\"destructive\" onClick={handleDelete} data-testid=\"button-confirm-delete\">\n              Eliminar\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Permission Info Dialog */}\n      {permissionDialog && (\n        <Dialog open={!!permissionDialog} onOpenChange={() => setPermissionDialog(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {permissionDescriptions[permissionDialog as keyof typeof permissionDescriptions].title}\n              </DialogTitle>\n              <DialogDescription className=\"text-base leading-relaxed\">\n                {permissionDescriptions[permissionDialog as keyof typeof permissionDescriptions].description}\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter>\n              <Button onClick={() => setPermissionDialog(null)}>\n                Entendido\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}","size_bytes":6863},"client/src/components/PlantDetails.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Settings, Building2 } from \"lucide-react\";\nimport { IndustrialPlant, Silo, RiceBatch } from \"@shared/schema\";\nimport SiloCard from \"./SiloCard\";\nimport SiloFormModal from \"./SiloFormModal\";\n\ninterface PlantDetailsProps {\n  selectedPlant: IndustrialPlant | null;\n}\n\nexport default function PlantDetails({ selectedPlant }: PlantDetailsProps) {\n\n  // TODO: remove mock functionality - mock silos for the selected plant\n  const mockSilos: Silo[] = selectedPlant ? [\n    {\n      id: \"s1\",\n      siloId: \"A-1\",\n      industrialPlantId: selectedPlant.id,\n      type: \"Almacenamiento\",\n      maxCapacity: \"10000.00\",\n      currentOccupancy: \"4500.00\", \n      diameter: \"12.50\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"s2\", \n      siloId: \"A-2\",\n      industrialPlantId: selectedPlant.id,\n      type: \"Secado\",\n      maxCapacity: \"8000.00\",\n      currentOccupancy: \"2800.00\",\n      diameter: \"10.00\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"s3\",\n      siloId: \"B-1\", \n      industrialPlantId: selectedPlant.id,\n      type: \"Almacenamiento\",\n      maxCapacity: \"12000.00\",\n      currentOccupancy: \"0.00\",\n      diameter: \"14.00\",\n      createdAt: new Date().toISOString()\n    }\n  ] : [];\n\n  // TODO: remove mock functionality - mock rice batches\n  const mockRiceBatches: RiceBatch[] = [\n    {\n      id: \"rb1\",\n      remitoId: \"r1\",\n      siloId: \"s1\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      variety: \"INIA Olimar\",\n      tonnage: \"25.50\",\n      originalTonnage: \"25.50\",\n      entryDate: \"2024-09-15T10:30:00.000Z\",\n      layerOrder: 1\n    },\n    {\n      id: \"rb2\",\n      remitoId: \"r2\", \n      siloId: \"s1\",\n      chacraId: \"2\",\n      chacraName: \"Campo Sur\",\n      variety: \"El Paso 144\",\n      tonnage: \"28.00\",\n      originalTonnage: \"28.00\", \n      entryDate: \"2024-09-16T14:15:00.000Z\",\n      layerOrder: 2\n    },\n    {\n      id: \"rb3\",\n      remitoId: \"r3\",\n      siloId: \"s2\",\n      chacraId: \"3\", \n      chacraName: \"Potrero Este\",\n      variety: \"INIA Olimar\",\n      tonnage: \"22.80\",\n      originalTonnage: \"22.80\",\n      entryDate: \"2024-09-17T08:45:00.000Z\", \n      layerOrder: 1\n    }\n  ];\n\n  if (!selectedPlant) {\n    return (\n      <Card className=\"h-full flex items-center justify-center\">\n        <CardContent className=\"text-center py-12\">\n          <Building2 className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n            Seleccione una planta\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Seleccione una planta industrial del panel izquierdo para gestionar sus silos\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Plant Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            {selectedPlant.name}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Global Actions */}\n          <div className=\"flex flex-wrap gap-3\">\n            <SiloFormModal \n              industrialPlantId={selectedPlant.id}\n              onSiloAdded={() => {\n                // TODO: Implement refetch logic when real API is connected\n                console.log(\"Silo added, should refetch data\");\n              }}\n            />\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"gap-2\"\n              data-testid=\"button-register-process\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              Registrar Proceso Industrial\n            </Button>\n          </div>\n\n        </CardContent>\n      </Card>\n\n      {/* Silos Grid */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n          Silos ({mockSilos.length})\n        </h3>\n        {mockSilos.length > 0 ? (\n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-4\">\n            {mockSilos.map((silo) => {\n              const siloBatches = mockRiceBatches.filter(batch => batch.siloId === silo.id);\n              return (\n                <SiloCard\n                  key={silo.id}\n                  silo={silo}\n                  batches={siloBatches}\n                  availableSilos={mockSilos}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">\n                No hay silos registrados para esta planta\n              </p>\n              <Button className=\"mt-4 gap-2\" size=\"sm\">\n                <Plus className=\"h-4 w-4\" />\n                Agregar Primer Silo\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5068},"client/src/components/PlantList.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, Plus, MapPin } from \"lucide-react\";\nimport { IndustrialPlant } from \"@shared/schema\";\n\ninterface PlantListProps {\n  plants: IndustrialPlant[];\n  selectedPlant: IndustrialPlant | null;\n  onPlantSelect: (plant: IndustrialPlant) => void;\n}\n\nexport default function PlantList({ plants, selectedPlant, onPlantSelect }: PlantListProps) {\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"text-lg flex items-center gap-2\">\n          <Building2 className=\"h-5 w-5\" />\n          Plantas Industriales\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {/* Add Plant Button */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full justify-start gap-2 h-auto py-3\"\n          data-testid=\"button-add-plant\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Agregar Planta\n        </Button>\n        \n        {/* Plants List */}\n        <div className=\"space-y-2\">\n          {plants.map((plant) => (\n            <Button\n              key={plant.id}\n              variant={selectedPlant?.id === plant.id ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              className={`w-full justify-start h-auto py-3 px-3 ${\n                selectedPlant?.id === plant.id \n                  ? \"bg-primary text-primary-foreground\" \n                  : \"text-left hover:bg-muted\"\n              }`}\n              onClick={() => onPlantSelect(plant)}\n              data-testid={`button-plant-${plant.id}`}\n            >\n              <div className=\"text-left space-y-1\">\n                <div className=\"font-medium text-sm\">\n                  {plant.name}\n                </div>\n                <div className=\"flex items-center gap-1 text-xs opacity-70\">\n                  <MapPin className=\"h-3 w-3\" />\n                  {plant.location}\n                </div>\n                <div className=\"text-xs opacity-70\">\n                  {plant.silos?.length || 0} silos\n                </div>\n              </div>\n            </Button>\n          ))}\n        </div>\n        \n        {plants.length === 0 && (\n          <div className=\"text-center py-8 text-muted-foreground text-sm\">\n            No hay plantas registradas\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2455},"client/src/components/PlantasySilos.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowRight, Truck, Sun, Warehouse, Cog, Send, Search, Filter, Grid, List, MapPin, Bell, Scale, FlaskConical, Droplets, Timer, TestTube, AlertCircle, CheckCircle, Clock } from \"lucide-react\";\nimport PlantList from \"./PlantList\";\nimport PlantDetails from \"./PlantDetails\";\nimport { IndustrialPlant, Silo, RiceBatch } from \"@shared/schema\";\n\nexport default function PlantasySilos() {\n  const [selectedPlant, setSelectedPlant] = useState<IndustrialPlant | null>(null);\n  const [viewMode, setViewMode] = useState<'list' | 'grid' | 'process'>('list');\n  const [searchFilter, setSearchFilter] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'alert'>('all');\n\n  // Panel de Control de Portería - Cola de camiones\n  const truckQueue = [\n    {\n      id: \"ABC123\",\n      producer: \"Juan Pérez\",\n      remito: \"R-2024-001\",\n      status: \"waiting\",\n      estimatedTonnage: 45.5,\n      arrivalTime: \"08:30\",\n      waitTime: \"15 min\"\n    },\n    {\n      id: \"XYZ789\",\n      producer: \"María Gómez\",\n      remito: \"R-2024-002\",\n      status: \"weighing\",\n      estimatedTonnage: 52.0,\n      arrivalTime: \"09:00\",\n      waitTime: \"5 min\"\n    },\n    {\n      id: \"LMN456\",\n      producer: \"Pedro Silva\",\n      remito: \"R-2024-003\",\n      status: \"sampling\",\n      estimatedTonnage: 38.2,\n      arrivalTime: \"09:15\",\n      waitTime: \"10 min\"\n    }\n  ];\n\n  // Datos de pozos de descarga\n  const dischargePits = [\n    {\n      id: \"pozo-1\",\n      name: \"Pozo 1\",\n      status: \"occupied\",\n      content: 45,\n      origin: [\"R-001\", \"R-002\"],\n      avgHumidity: 18.5,\n      destination: \"Secadora S-1\"\n    },\n    {\n      id: \"pozo-2\",\n      name: \"Pozo 2\",\n      status: \"available\",\n      content: 0,\n      origin: [],\n      avgHumidity: 0,\n      destination: \"\"\n    }\n  ];\n\n  // Datos de Laboratorio - Muestras y Análisis\n  const labSamples = [\n    {\n      id: \"M-001\",\n      lote: \"R-001\",\n      status: \"completed\",\n      results: {\n        humidity: 16.0,\n        impurities: 2.0,\n        brokenGrain: 3.0,\n        grade: \"Estándar\"\n      },\n      recommendation: \"Directo a secadora\",\n      analyst: \"Dr. Martínez\",\n      completedAt: \"09:45\"\n    },\n    {\n      id: \"M-002\",\n      lote: \"R-002\",\n      status: \"in_progress\",\n      results: null,\n      recommendation: \"\",\n      analyst: \"Dra. García\",\n      estimatedCompletion: \"10:30\"\n    },\n    {\n      id: \"M-003\", \n      lote: \"R-003\",\n      status: \"pending\",\n      results: null,\n      recommendation: \"\",\n      analyst: \"\",\n      priority: \"alta\"\n    }\n  ];\n\n  // Datos de Secadoras\n  const dryers = [\n    {\n      id: \"S-1\",\n      name: \"Secadora S-1\",\n      status: \"active\",\n      currentLot: \"LS-2024-045\",\n      origin: [\"R-001\", \"R-002\"],\n      tonnage: 85,\n      inputHumidity: 18.5,\n      targetHumidity: 13.0,\n      currentHumidity: 15.2,\n      timeRemaining: 4.5,\n      progress: 75,\n      temperature: 65,\n      airFlow: 2500,\n      gasConsumption: 45\n    },\n    {\n      id: \"S-2\",\n      name: \"Secadora S-2\",\n      status: \"maintenance\",\n      currentLot: \"\",\n      origin: [],\n      tonnage: 0,\n      inputHumidity: 0,\n      targetHumidity: 0,\n      currentHumidity: 0,\n      timeRemaining: 0,\n      progress: 0,\n      temperature: 0,\n      airFlow: 0,\n      gasConsumption: 0\n    }\n  ];\n\n  const getSampleStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"in_progress\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getSampleStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\": return CheckCircle;\n      case \"in_progress\": return Clock;\n      case \"pending\": return AlertCircle;\n      default: return TestTube;\n    }\n  };\n\n  const getDryerStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"idle\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      case \"maintenance\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n    }\n  };\n\n  const getTruckStatusColor = (status: string) => {\n    switch (status) {\n      case \"waiting\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"weighing\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"sampling\": return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"discharging\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getTruckStatusText = (status: string) => {\n    switch (status) {\n      case \"waiting\": return \"Esperando\";\n      case \"weighing\": return \"En báscula\";\n      case \"sampling\": return \"Muestreo\";\n      case \"discharging\": return \"Descargando\";\n      default: return \"Desconocido\";\n    }\n  };\n\n  // Panel de control - métricas operativas\n  const operationalMetrics = {\n    receivingQueue: 3,\n    activeDrying: { silo: \"C-2\", timeRemaining: \"2h\" },\n    pendingOrders: { count: 5, tonnage: 450 },\n    qualityAlerts: 1,\n    alertSilo: \"A-1\"\n  };\n\n  // Estados del flujo de proceso\n  const processFlow = [\n    { \n      stage: \"Recepción\", \n      icon: Truck, \n      count: 2, \n      status: \"active\",\n      description: \"Camiones en cola\"\n    },\n    { \n      stage: \"Secado\", \n      icon: Sun, \n      count: 1, \n      status: \"active\",\n      description: \"Proceso activo\"\n    },\n    { \n      stage: \"Almacenamiento\", \n      icon: Warehouse, \n      count: 5, \n      status: \"normal\",\n      description: \"Silos ocupados\"\n    },\n    { \n      stage: \"Molienda\", \n      icon: Cog, \n      count: 0, \n      status: \"idle\",\n      description: \"En espera\"\n    },\n    { \n      stage: \"Despacho\", \n      icon: Send, \n      count: 3, \n      status: \"normal\",\n      description: \"Órdenes listas\"\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"alert\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"idle\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      default: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n    }\n  };\n\n  // TODO: remove mock functionality - comprehensive mock data for plants\n  const mockPlants: IndustrialPlant[] = [\n    {\n      id: \"1\",\n      name: \"Planta Industrial SAMAN\",\n      location: \"Treinta y Tres\",\n      silos: [\"Silo A-1\", \"Silo A-2\", \"Silo A-3\", \"Silo B-1\", \"Silo B-2\"]\n    },\n    {\n      id: \"2\",\n      name: \"Molino San Fernando\",\n      location: \"Rocha\", \n      silos: [\"Silo Norte\", \"Silo Sur\", \"Silo Centro\"]\n    },\n    {\n      id: \"3\",\n      name: \"Cooperativa Arrocera del Este\",\n      location: \"Cerro Largo\",\n      silos: [\"Silo 1\", \"Silo 2\", \"Silo 3\", \"Silo 4\"]\n    },\n    {\n      id: \"4\",\n      name: \"Planta Industrial del Norte\",\n      location: \"Tacuarembó\",\n      silos: [\"Silo Principal\", \"Silo Secundario\"]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-foreground\">\n          Gestión de Plantas y Silos\n        </h2>\n        \n        {/* Sistema de Notificaciones */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative\">\n            <Bell className=\"h-5 w-5 text-muted-foreground\" />\n            <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-xs text-white font-bold\">2</span>\n            </div>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            2 alertas activas\n          </div>\n        </div>\n      </div>\n      \n      {/* Barra de Filtros y Búsqueda */}\n      <div className=\"flex items-center justify-between gap-4 mb-6 p-4 border rounded-lg bg-muted/30\">\n        <div className=\"flex items-center gap-4 flex-1\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder=\"Buscar plantas o silos...\"\n              className=\"w-full pl-10 pr-4 py-2 border rounded-md bg-background text-sm\"\n              value={searchFilter}\n              onChange={(e) => setSearchFilter(e.target.value)}\n            />\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Filter className=\"h-4 w-4 text-muted-foreground\" />\n            <select\n              className=\"border rounded-md px-3 py-2 bg-background text-sm\"\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value as any)}\n            >\n              <option value=\"all\">Todos</option>\n              <option value=\"active\">Activos</option>\n              <option value=\"alert\">Con Alertas</option>\n            </select>\n          </div>\n        </div>\n        \n        {/* Selectores de Vista */}\n        <div className=\"flex items-center gap-1 border rounded-md p-1\">\n          <Button\n            size=\"sm\"\n            variant={viewMode === 'list' ? 'default' : 'ghost'}\n            className=\"h-8 px-3\"\n            onClick={() => setViewMode('list')}\n          >\n            <List className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant={viewMode === 'grid' ? 'default' : 'ghost'}\n            className=\"h-8 px-3\"\n            onClick={() => setViewMode('grid')}\n          >\n            <Grid className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant={viewMode === 'process' ? 'default' : 'ghost'}\n            className=\"h-8 px-3\"\n            onClick={() => setViewMode('process')}\n          >\n            <MapPin className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Panel de Control de Portería */}\n      {selectedPlant && (\n        <div className=\"mb-6\">\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Truck className=\"h-5 w-5\" />\n                Control de Portería - {selectedPlant.name}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Cola de Camiones */}\n                <div className=\"lg:col-span-2\">\n                  <div className=\"mb-3\">\n                    <h4 className=\"font-medium text-sm\">Cola de Camiones en Espera</h4>\n                  </div>\n                  <div className=\"border rounded-md\">\n                    <div className=\"grid grid-cols-6 gap-2 p-3 bg-muted text-xs font-medium\">\n                      <div>Camión</div>\n                      <div>Productor</div>\n                      <div>e-Remito</div>\n                      <div>Tonelaje</div>\n                      <div>Estado</div>\n                      <div>Tiempo</div>\n                    </div>\n                    <div className=\"divide-y\">\n                      {truckQueue.map((truck) => (\n                        <div key={truck.id} className=\"grid grid-cols-6 gap-2 p-3 text-xs items-center\">\n                          <div className=\"font-mono\">{truck.id}</div>\n                          <div>{truck.producer}</div>\n                          <div className=\"font-mono text-blue-600\">{truck.remito}</div>\n                          <div>{truck.estimatedTonnage} t</div>\n                          <div>\n                            <Badge className={`text-xs ${getTruckStatusColor(truck.status)}`}>\n                              {getTruckStatusText(truck.status)}\n                            </Badge>\n                          </div>\n                          <div className=\"text-muted-foreground\">{truck.waitTime}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Proceso de Pesaje */}\n                <div>\n                  <div className=\"mb-3\">\n                    <h4 className=\"font-medium text-sm\">Proceso Activo</h4>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"border rounded-md p-3 bg-blue-50 dark:bg-blue-950\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Scale className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"font-medium text-sm\">Pesaje en Curso</span>\n                      </div>\n                      <div className=\"text-xs space-y-1\">\n                        <div>Camión: XYZ789</div>\n                        <div>Peso bruto: 32,450 kg</div>\n                        <div>Tara: 12,200 kg</div>\n                        <div className=\"font-medium\">Neto: 20,250 kg</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border rounded-md p-3 bg-purple-50 dark:bg-purple-950\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <FlaskConical className=\"h-4 w-4 text-purple-600\" />\n                        <span className=\"font-medium text-sm\">Análisis Rápido</span>\n                      </div>\n                      <div className=\"text-xs space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span>Humedad:</span>\n                          <span className=\"font-medium\">16.8%</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Impurezas:</span>\n                          <span className=\"font-medium\">2.1%</span>\n                        </div>\n                        <div className=\"mt-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Requiere Secado\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Pozos de Descarga */}\n      {selectedPlant && (\n        <div className=\"mb-6\">\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Warehouse className=\"h-5 w-5\" />\n                Pozos de Descarga\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {dischargePits.map((pit) => (\n                  <div key={pit.id} className=\"border rounded-md p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium\">{pit.name}</h4>\n                      <Badge className={pit.status === 'occupied' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}>\n                        {pit.status === 'occupied' ? 'OCUPADO' : 'DISPONIBLE'}\n                      </Badge>\n                    </div>\n                    \n                    {pit.status === 'occupied' && (\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Contenido:</span>\n                          <span className=\"font-medium\">{pit.content} tons</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Origen:</span>\n                          <span className=\"font-mono text-blue-600\">{pit.origin.join(\", \")}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span>Humedad promedio:</span>\n                          <span className=\"font-medium flex items-center gap-1\">\n                            <Droplets className=\"h-3 w-3 text-blue-500\" />\n                            {pit.avgHumidity}%\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Destino:</span>\n                          <span className=\"font-medium\">{pit.destination}</span>\n                        </div>\n                        <div className=\"mt-3\">\n                          <Button size=\"sm\" className=\"w-full\">\n                            Iniciar Transferencia\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {pit.status === 'available' && (\n                      <div className=\"text-center py-4 text-muted-foreground text-sm\">\n                        Listo para recibir carga\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Panel de Laboratorio */}\n      {selectedPlant && (\n        <div className=\"mb-6\">\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <FlaskConical className=\"h-5 w-5\" />\n                Laboratorio - Análisis de Muestras\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border rounded-md\">\n                <div className=\"grid grid-cols-7 gap-2 p-3 bg-muted text-xs font-medium\">\n                  <div>Muestra</div>\n                  <div>Lote</div>\n                  <div>Estado</div>\n                  <div>Resultados</div>\n                  <div>Recomendación</div>\n                  <div>Analista</div>\n                  <div>Acción</div>\n                </div>\n                <div className=\"divide-y\">\n                  {labSamples.map((sample) => {\n                    const StatusIcon = getSampleStatusIcon(sample.status);\n                    return (\n                      <div key={sample.id} className=\"grid grid-cols-7 gap-2 p-3 text-xs items-center\">\n                        <div className=\"font-mono text-blue-600\">{sample.id}</div>\n                        <div className=\"font-mono\">{sample.lote}</div>\n                        <div>\n                          <Badge className={`text-xs flex items-center gap-1 ${getSampleStatusColor(sample.status)}`}>\n                            <StatusIcon className=\"h-3 w-3\" />\n                            {sample.status === 'completed' ? 'Completado' : \n                             sample.status === 'in_progress' ? 'En progreso' : 'Pendiente'}\n                          </Badge>\n                        </div>\n                        <div>\n                          {sample.results ? (\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center gap-1\">\n                                <Droplets className=\"h-3 w-3 text-blue-500\" />\n                                <span>Hum: {sample.results.humidity}%</span>\n                              </div>\n                              <div>Imp: {sample.results.impurities}%</div>\n                              <div>Part: {sample.results.brokenGrain}%</div>\n                            </div>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </div>\n                        <div>\n                          {sample.recommendation ? (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {sample.recommendation}\n                            </Badge>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </div>\n                        <div>{sample.analyst || '-'}</div>\n                        <div>\n                          {sample.status === 'pending' && (\n                            <Button size=\"sm\" variant=\"outline\" className=\"h-6 text-xs px-2\">\n                              Iniciar\n                            </Button>\n                          )}\n                          {sample.status === 'completed' && (\n                            <Button size=\"sm\" variant=\"outline\" className=\"h-6 text-xs px-2\">\n                              Ver\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Panel de Control de Secadoras */}\n      {selectedPlant && (\n        <div className=\"mb-6\">\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Sun className=\"h-5 w-5\" />\n                Control de Secadoras\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {dryers.map((dryer) => (\n                  <div key={dryer.id} className=\"border rounded-md p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium\">{dryer.name}</h4>\n                      <Badge className={getDryerStatusColor(dryer.status)}>\n                        {dryer.status === 'active' ? 'EN PROCESO' : \n                         dryer.status === 'maintenance' ? 'MANTENIMIENTO' : 'INACTIVA'}\n                      </Badge>\n                    </div>\n\n                    {dryer.status === 'active' && (\n                      <div className=\"space-y-3\">\n                        <div className=\"text-sm space-y-1\">\n                          <div className=\"flex justify-between\">\n                            <span>Lote en proceso:</span>\n                            <span className=\"font-mono text-blue-600\">{dryer.currentLot}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Origen:</span>\n                            <span className=\"font-mono text-xs\">{dryer.origin.join(\", \")}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Tonelaje:</span>\n                            <span className=\"font-medium\">{dryer.tonnage} tons</span>\n                          </div>\n                        </div>\n\n                        <div className=\"bg-muted rounded p-3 text-xs space-y-2\">\n                          <div className=\"flex justify-between items-center\">\n                            <span>Progreso:</span>\n                            <span className=\"font-medium\">{dryer.progress}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-blue-600 h-2 rounded-full\" \n                              style={{ width: `${dryer.progress}%` }}\n                            ></div>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Tiempo restante:</span>\n                            <span className=\"font-medium\">{dryer.timeRemaining}h</span>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n                          <div className=\"bg-background rounded p-2\">\n                            <div className=\"font-medium mb-1\">Humedad</div>\n                            <div>{dryer.inputHumidity}% → {dryer.currentHumidity}% → {dryer.targetHumidity}%</div>\n                          </div>\n                          <div className=\"bg-background rounded p-2\">\n                            <div className=\"font-medium mb-1\">Temperatura</div>\n                            <div>{dryer.temperature}°C</div>\n                          </div>\n                          <div className=\"bg-background rounded p-2\">\n                            <div className=\"font-medium mb-1\">Flujo de aire</div>\n                            <div>{dryer.airFlow.toLocaleString()} m³/h</div>\n                          </div>\n                          <div className=\"bg-background rounded p-2\">\n                            <div className=\"font-medium mb-1\">Consumo gas</div>\n                            <div>{dryer.gasConsumption} m³/h</div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                            Pausar\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                            Ajustar\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                            Muestrear\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                    {dryer.status === 'maintenance' && (\n                      <div className=\"text-center py-6 text-muted-foreground text-sm\">\n                        <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-red-500\" />\n                        <div>Mantenimiento programado</div>\n                        <div className=\"text-xs mt-1\">Disponible mañana</div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Panel de Control de Operaciones */}\n      {selectedPlant && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Panel de Control</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-xs space-y-1\">\n              <div className=\"text-foreground\">📦 Cola recepción: {operationalMetrics.receivingQueue} camiones</div>\n              <div className=\"text-foreground\">🔥 Secado activo: {operationalMetrics.activeDrying.silo} ({operationalMetrics.activeDrying.timeRemaining})</div>\n              <div className=\"text-foreground\">📋 Órdenes pendientes: {operationalMetrics.pendingOrders.count} ({operationalMetrics.pendingOrders.tonnage} t)</div>\n              {operationalMetrics.qualityAlerts > 0 && (\n                <div className=\"text-red-600 font-medium\">⚠️ Alerta calidad: Silo {operationalMetrics.alertSilo}</div>\n              )}\n            </CardContent>\n          </Card>\n          \n          {/* Flujo Visual de Proceso */}\n          <div className=\"lg:col-span-3\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium\">Flujo de Proceso - {selectedPlant.name}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between gap-2\">\n                  {processFlow.map((step, index) => (\n                    <div key={step.stage} className=\"flex items-center gap-2\">\n                      <div className=\"flex flex-col items-center space-y-2\">\n                        <div className={`p-2 rounded-lg ${getStatusColor(step.status)}`}>\n                          <step.icon className=\"h-4 w-4\" />\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-xs font-medium\">{step.stage}</div>\n                          <Badge variant=\"secondary\" className=\"text-xs px-1 py-0\">\n                            {step.count}\n                          </Badge>\n                          <div className=\"text-xs text-muted-foreground mt-1\">{step.description}</div>\n                        </div>\n                      </div>\n                      {index < processFlow.length - 1 && (\n                        <ArrowRight className=\"h-3 w-3 text-muted-foreground mt-[-20px]\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 min-h-[600px]\">\n        {/* Panel Izquierdo: Lista de Plantas */}\n        <div className=\"lg:col-span-1\">\n          <PlantList\n            plants={mockPlants}\n            selectedPlant={selectedPlant}\n            onPlantSelect={setSelectedPlant}\n          />\n        </div>\n        \n        {/* Panel Derecho: Detalles y Silos de la Planta */}\n        <div className=\"lg:col-span-2\">\n          <PlantDetails\n            selectedPlant={selectedPlant}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":30106},"client/src/components/RemitoGenerationForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Truck, Plus, Minus } from \"lucide-react\";\nimport { Chacra } from \"@shared/schema\";\n\nconst remitoRowSchema = z.object({\n  estimatedWeight: z.number().min(1, \"El peso estimado es requerido\"),\n  trailerPlate: z.string().min(1, \"La matrícula de la zorra es requerida\"),\n  driverName: z.string().min(1, \"El nombre del camionero es requerido\"),\n  driverWhatsapp: z.string().min(1, \"El WhatsApp del camionero es requerido\"),\n  industrialPlantId: z.string().min(1, \"La planta industrial es requerida\"),\n  chacraId: z.string().optional()\n});\n\nconst remitoFormSchema = z.object({\n  remitoRows: z.array(remitoRowSchema).min(1, \"Debe tener al menos una fila de remitos\")\n});\n\nexport type RemitoFormData = z.infer<typeof remitoFormSchema>;\nexport type RemitoRowData = z.infer<typeof remitoRowSchema>;\n\ninterface RemitoGenerationFormProps {\n  onSubmit: (data: RemitoFormData) => void;\n  selectedChacras: string[];\n  chacras: Chacra[];\n}\n\n\n// Mock industrial plants data\nexport const mockIndustrialPlants = [\n  { id: \"1\", name: \"Planta Arrocera del Este\", location: \"Treinta y Tres\" },\n  { id: \"2\", name: \"Molino San Fernando\", location: \"Rocha\" },\n  { id: \"3\", name: \"Cooperativa Arrocera\", location: \"Cerro Largo\" },\n  { id: \"4\", name: \"Planta Industrial del Norte\", location: \"Tacuarembó\" }\n];\n\nexport default function RemitoGenerationForm({ onSubmit, selectedChacras, chacras }: RemitoGenerationFormProps) {\n  const [remitoRowsCount, setRemitoRowsCount] = useState(1);\n\n  const form = useForm<RemitoFormData>({\n    resolver: zodResolver(remitoFormSchema),\n    defaultValues: {\n      remitoRows: [{\n        estimatedWeight: 0,\n        trailerPlate: \"\",\n        driverName: \"\",\n        driverWhatsapp: \"\",\n        industrialPlantId: \"\",\n        chacraId: \"\"\n      }]\n    }\n  });\n\n  const addRemitoRow = () => {\n    if (remitoRowsCount < 5) { // Limit to 5 rows for UI purposes\n      setRemitoRowsCount(prev => prev + 1);\n      const currentRows = form.getValues(\"remitoRows\");\n      form.setValue(\"remitoRows\", [\n        ...currentRows,\n        {\n          estimatedWeight: 0,\n          trailerPlate: \"\",\n          driverName: \"\",\n          driverWhatsapp: \"\",\n          industrialPlantId: \"\",\n          chacraId: \"\"\n        }\n      ]);\n    }\n  };\n\n  const removeRemitoRow = (index: number) => {\n    if (remitoRowsCount > 1) {\n      setRemitoRowsCount(prev => prev - 1);\n      const currentRows = form.getValues(\"remitoRows\");\n      const newRows = currentRows.filter((_, i) => i !== index);\n      form.setValue(\"remitoRows\", newRows);\n    }\n  };\n\n  const handleSubmit = (data: RemitoFormData) => {\n    // Check if at least one remito row has a chacra selected\n    const hasChacraSelected = data.remitoRows.some(row => row.chacraId && row.chacraId.trim() !== '');\n    \n    if (!hasChacraSelected) {\n      alert(\"Debe seleccionar una chacra para al menos un remito\");\n      return;\n    }\n\n    console.log(\"Generating remitos:\", data);\n    onSubmit(data);\n    \n    // Reset form\n    form.reset();\n    setRemitoRowsCount(1);\n  };\n\n  const watchedRows = form.watch(\"remitoRows\");\n\n  // Auto-fill chacra selection when selectedChacras changes\n  useEffect(() => {\n    const currentRows = form.getValues(\"remitoRows\");\n    let updated = false;\n    \n    // Find rows that don't have a chacra selected yet\n    const updatedRows = currentRows.map((row, index) => {\n      // Skip if this row already has a chacra selected\n      if (row.chacraId && row.chacraId.trim() !== '') {\n        return row;\n      }\n      \n      // Find a selected chacra that hasn't been assigned to any row yet\n      const assignedChacras = currentRows\n        .filter((r, i) => i !== index && r.chacraId && r.chacraId.trim() !== '')\n        .map(r => r.chacraId);\n      \n      const availableChacra = selectedChacras.find(\n        chacraId => !assignedChacras.includes(chacraId)\n      );\n      \n      if (availableChacra) {\n        updated = true;\n        return { ...row, chacraId: availableChacra };\n      }\n      \n      return row;\n    });\n    \n    if (updated) {\n      form.setValue(\"remitoRows\", updatedRows);\n    }\n  }, [selectedChacras, form]);\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Truck className=\"h-5 w-5 text-primary\" />\n          <span>Generar Remitos</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Remito Rows */}\n            <div className=\"space-y-4\">\n              {watchedRows.map((_, index) => (\n                <div key={index} className=\"border rounded-md p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-foreground\">\n                      Remito {index + 1}\n                    </h4>\n                    {remitoRowsCount > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeRemitoRow(index)}\n                        data-testid={`button-remove-remito-${index}`}\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  {/* Display selected chacra if exists */}\n                  {watchedRows[index]?.chacraId && (\n                    <div className=\"bg-muted/30 rounded-md p-3 mb-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        <span className=\"font-medium\">Chacra seleccionada:</span>{' '}\n                        {chacras.find(c => c.id === watchedRows[index]?.chacraId)?.name || 'N/A'}\n                        {' - '}\n                        {chacras.find(c => c.id === watchedRows[index]?.chacraId)?.area} ha\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {/* Chacra Selection */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.chacraId` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Chacra de Origen</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid={`select-chacra-${index}`}>\n                                <SelectValue placeholder=\"Seleccionar chacra...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {selectedChacras.map((chacraId) => {\n                                const chacra = chacras.find(c => c.id === chacraId);\n                                return chacra ? (\n                                  <SelectItem key={chacra.id} value={chacra.id}>\n                                    {chacra.name} ({chacra.area} ha)\n                                  </SelectItem>\n                                ) : null;\n                              })}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Estimated Weight */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.estimatedWeight` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Peso Estimado (ton)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"999\"\n                              placeholder=\"Ej: 25\"\n                              data-testid={`input-estimated-weight-${index}`}\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Trailer Plate */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.trailerPlate` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Matrícula de la Zorra</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Ej: SAA 1234\"\n                              data-testid={`input-trailer-plate-${index}`}\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Driver Name */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.driverName` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nombre del Camionero</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Ej: Juan Pérez\"\n                              data-testid={`input-driver-name-${index}`}\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Driver WhatsApp */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.driverWhatsapp` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>WhatsApp Camionero</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"tel\"\n                              placeholder=\"Ej: +59899123456\"\n                              data-testid={`input-driver-whatsapp-${index}`}\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Industrial Plant */}\n                    <FormField\n                      control={form.control}\n                      name={`remitoRows.${index}.industrialPlantId` as const}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Planta Industrial</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid={`select-industrial-plant-${index}`}>\n                                <SelectValue placeholder=\"Seleccionar...\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {mockIndustrialPlants.map((plant) => (\n                                <SelectItem key={plant.id} value={plant.id}>\n                                  {plant.name} - {plant.location}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              ))}\n\n              {/* Add More Remitos Button */}\n              {remitoRowsCount < 5 && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={addRemitoRow}\n                  className=\"w-full\"\n                  data-testid=\"button-add-remito-row\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Crear más remitos\n                </Button>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                type=\"submit\"\n                className=\"bg-primary text-primary-foreground\"\n                data-testid=\"button-generate-remitos\"\n              >\n                <Truck className=\"h-4 w-4 mr-2\" />\n                Generar Remitos\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13986},"client/src/components/RemitosList.tsx":{"content":"import { useMemo } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Truck, Package, Route, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { Remito } from \"@shared/schema\";\n\ninterface RemitosListProps {\n  remitos: Remito[];\n}\n\nconst statusConfig = {\n  \"creandose\": {\n    label: \"Creándose\",\n    color: \"bg-gray-100 text-gray-800 border-gray-200\",\n    icon: Package\n  },\n  \"creado\": {\n    label: \"Creado\",\n    color: \"bg-blue-100 text-blue-800 border-blue-200\",\n    icon: CheckCircle\n  },\n  \"cargandose\": {\n    label: \"Cargándose\",\n    color: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    icon: Package\n  },\n  \"en_viaje\": {\n    label: \"En viaje\",\n    color: \"bg-purple-100 text-purple-800 border-purple-200\",\n    icon: Route\n  },\n  \"descargandose\": {\n    label: \"Descargándose\",\n    color: \"bg-orange-100 text-orange-800 border-orange-200\",\n    icon: Package\n  },\n  \"perdido_destruido\": {\n    label: \"Perdido/Destruido\",\n    color: \"bg-red-100 text-red-800 border-red-200\",\n    icon: AlertTriangle\n  },\n  \"descargado\": {\n    label: \"Descargado\",\n    color: \"bg-green-100 text-green-800 border-green-200\",\n    icon: CheckCircle\n  }\n};\n\nexport default function RemitosList({ remitos }: RemitosListProps) {\n  // Group remitos by status\n  const remitosByStatus = useMemo(() => {\n    const grouped: Record<string, Remito[]> = {};\n    \n    remitos.forEach(remito => {\n      if (!grouped[remito.status]) {\n        grouped[remito.status] = [];\n      }\n      grouped[remito.status].push(remito);\n    });\n\n    // Sort each group by creation date (most recent first)\n    Object.keys(grouped).forEach(status => {\n      grouped[status].sort((a, b) => \n        new Date(b.createdAt || \"\").getTime() - new Date(a.createdAt || \"\").getTime()\n      );\n    });\n\n    return grouped;\n  }, [remitos]);\n\n  const formatDateTime = (dateTime: string | null) => {\n    if (!dateTime) return \"-\";\n    return new Date(dateTime).toLocaleString(\"es-UY\", {\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  };\n\n  const StatusBadge = ({ status }: { status: string }) => {\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.creandose;\n    const Icon = config.icon;\n    \n    return (\n      <Badge \n        variant=\"outline\" \n        className={`${config.color} font-medium border`}\n      >\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const totalRemitos = remitos.length;\n  const completedRemitos = remitos.filter(r => r.status === \"descargado\").length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">\n          Lista de Remitos\n        </h3>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            {totalRemitos} remitos totales\n          </Badge>\n          <Badge variant=\"default\" className=\"text-sm\">\n            {completedRemitos} completados\n          </Badge>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4\">\n        {Object.entries(statusConfig).map(([status, config]) => {\n          const count = remitosByStatus[status]?.length || 0;\n          const Icon = config.icon;\n          \n          return (\n            <Card key={status} className=\"text-center\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-center mb-2\">\n                  <Icon className=\"h-6 w-6 text-muted-foreground\" />\n                </div>\n                <div className=\"text-2xl font-bold text-foreground\">{count}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {config.label}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Remitos Table */}\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow className=\"hover:bg-transparent\">\n              <TableHead className=\"font-semibold\">Estado</TableHead>\n              <TableHead className=\"font-semibold\">Chacra de Origen</TableHead>\n              <TableHead className=\"font-semibold\">Camión</TableHead>\n              <TableHead className=\"font-semibold\">Destino</TableHead>\n              <TableHead className=\"font-semibold\">Creado</TableHead>\n              <TableHead className=\"font-semibold\">Salida</TableHead>\n              <TableHead className=\"font-semibold\">Llegada</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {remitos.length > 0 ? (\n              remitos\n                .sort((a, b) => new Date(b.createdAt || \"\").getTime() - new Date(a.createdAt || \"\").getTime())\n                .map((remito) => (\n                  <TableRow \n                    key={remito.id} \n                    className=\"hover:bg-muted/50\"\n                    data-testid={`row-remito-${remito.id}`}\n                  >\n                    <TableCell>\n                      <StatusBadge status={remito.status} />\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {remito.chacraName}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-1\">\n                        <Truck className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm\">\n                          {remito.loadedTonnage}t / {remito.truckMaxTonnage}t\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {remito.driverWhatsapp}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm font-medium\">\n                        {remito.industrialPlantName}\n                      </div>\n                      {remito.destinationSilo && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Silo: {remito.destinationSilo}\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {formatDateTime(remito.createdAt?.toString() || null)}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {formatDateTime(remito.departureDateTime?.toString() || null)}\n                    </TableCell>\n                    <TableCell className=\"text-sm\">\n                      {formatDateTime(remito.arrivalDateTime?.toString() || null)}\n                    </TableCell>\n                  </TableRow>\n                ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                  No hay remitos registrados aún.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}","size_bytes":7456},"client/src/components/SaleAssignmentModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ShoppingCart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Silo, RiceBatch } from \"@shared/schema\";\n\nconst saleAssignmentFormSchema = z.object({\n  saleOrderId: z.string().min(1, \"ID de orden de venta es requerido\"),\n  amount: z.string().min(1, \"Cantidad es requerida\"),\n  notes: z.string().optional(),\n});\n\ntype SaleAssignmentFormValues = z.infer<typeof saleAssignmentFormSchema>;\n\ninterface SaleAssignmentModalProps {\n  silo: Silo;\n  batches: RiceBatch[];\n  transferLogic: \"proportional_mix\" | \"fifo_layers\";\n  onSaleAssigned?: () => void;\n}\n\nexport default function SaleAssignmentModal({ \n  silo, \n  batches, \n  transferLogic, \n  onSaleAssigned \n}: SaleAssignmentModalProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SaleAssignmentFormValues>({\n    resolver: zodResolver(saleAssignmentFormSchema),\n    defaultValues: {\n      saleOrderId: \"\",\n      amount: \"\",\n      notes: \"\",\n    },\n  });\n\n  const currentOccupancy = parseFloat(silo.currentOccupancy || \"0\");\n\n  const calculateSalePreview = (amount: number) => {\n    if (transferLogic === \"proportional_mix\") {\n      const percentage = amount / currentOccupancy;\n      return batches.map(batch => ({\n        ...batch,\n        saleAmount: (parseFloat(batch.tonnage) * percentage).toFixed(2)\n      }));\n    } else {\n      // FIFO - take from oldest layers first\n      const sortedBatches = [...batches].sort((a, b) => a.layerOrder - b.layerOrder);\n      let remainingAmount = amount;\n      return sortedBatches.map(batch => {\n        const batchTonnage = parseFloat(batch.tonnage);\n        const saleAmount = Math.min(remainingAmount, batchTonnage);\n        remainingAmount -= saleAmount;\n        return {\n          ...batch,\n          saleAmount: saleAmount.toFixed(2)\n        };\n      }).filter(batch => parseFloat(batch.saleAmount) > 0);\n    }\n  };\n\n  const onSubmit = async (values: SaleAssignmentFormValues) => {\n    try {\n      const amount = parseFloat(values.amount);\n      const salePreview = calculateSalePreview(amount);\n      \n      // TODO: Implement actual sale assignment logic\n      console.log(\"Sale Assignment Details:\", {\n        fromSilo: silo.id,\n        saleOrderId: values.saleOrderId,\n        totalAmount: amount,\n        transferLogic,\n        batchDetails: salePreview,\n        notes: values.notes\n      });\n\n      toast({\n        title: \"Asignación a venta exitosa\",\n        description: `Se asignaron ${amount} toneladas del silo ${silo.siloId} a la orden de venta ${values.saleOrderId}.`,\n      });\n\n      form.reset();\n      setOpen(false);\n      onSaleAssigned?.();\n    } catch (error) {\n      toast({\n        title: \"Error en asignación\",\n        description: \"Ocurrió un error al asignar a la orden de venta. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const watchedAmount = form.watch(\"amount\");\n  const salePreview = watchedAmount ? calculateSalePreview(parseFloat(watchedAmount) || 0) : [];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"sm\"\n          className=\"w-full gap-2\"\n          disabled={batches.length === 0}\n          data-testid={`button-assign-sale-${silo.id}`}\n        >\n          <ShoppingCart className=\"h-4 w-4\" />\n          Asignar a Orden de Venta\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Asignar a Orden de Venta - Silo {silo.siloId}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mb-4 p-3 bg-muted rounded-md text-sm\">\n          <div className=\"font-medium\">Lógica de Asignación: {transferLogic === \"proportional_mix\" ? \"Mezcla Proporcional\" : \"Manejo por Capas (FIFO)\"}</div>\n          <div className=\"text-muted-foreground\">\n            {transferLogic === \"proportional_mix\" \n              ? \"Se asignará el mismo porcentaje de cada lote individual\"\n              : \"Los lotes más antiguos (abajo) se asignarán primero\"\n            }\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"saleOrderId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>ID de Orden de Venta *</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Ej: OV-2024-001\"\n                      {...field}\n                      data-testid=\"input-sale-order-id\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cantidad a Asignar (toneladas) *</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0.00\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max={currentOccupancy.toString()}\n                      {...field}\n                      data-testid=\"input-sale-amount\"\n                    />\n                  </FormControl>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Disponible: {currentOccupancy.toLocaleString()} toneladas\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notas (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Notas adicionales sobre la asignación a venta...\"\n                      {...field}\n                      data-testid=\"textarea-sale-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Sale Preview */}\n            {salePreview.length > 0 && (\n              <div className=\"border rounded-md p-4 bg-muted/50\">\n                <h4 className=\"font-medium mb-3\">Vista Previa de Asignación</h4>\n                <div className=\"space-y-2 text-sm\">\n                  {salePreview.map((batch, index) => (\n                    <div key={batch.id} className=\"flex justify-between items-center\">\n                      <div>\n                        <span className=\"font-mono\">{batch.remitoId}</span> - {batch.variety}\n                        <div className=\"text-xs text-muted-foreground\">\n                          Chacra: {batch.chacraName}\n                        </div>\n                      </div>\n                      <div className=\"font-medium\">\n                        {parseFloat(batch.saleAmount).toLocaleString()} t\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"border-t pt-2 flex justify-between font-medium\">\n                    <span>Total a asignar:</span>\n                    <span>{salePreview.reduce((sum, batch) => sum + parseFloat(batch.saleAmount), 0).toLocaleString()} t</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-sale\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={form.formState.isSubmitting}\n                data-testid=\"button-submit-sale\"\n              >\n                {form.formState.isSubmitting ? \"Procesando...\" : \"Asignar a Venta\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8779},"client/src/components/SalesOrderStep1.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowRight, X } from \"lucide-react\";\nimport { OrderGeneralData } from \"./SalesOrderWizard\";\n\nconst step1Schema = z.object({\n  clientName: z.string().min(1, \"Nombre del cliente es requerido\"),\n  destination: z.string().min(1, \"Destino es requerido\"),\n  totalTonnage: z.string().min(1, \"Cantidad total es requerida\"),\n  variety: z.string().optional(),\n  moisture: z.string().optional(),\n  purity: z.string().optional(),\n  certifications: z.array(z.string()).optional(),\n  estimatedDeliveryDate: z.string().min(1, \"Fecha estimada de entrega es requerida\"),\n  notes: z.string().optional(),\n});\n\ntype Step1FormValues = z.infer<typeof step1Schema>;\n\ninterface SalesOrderStep1Props {\n  data: OrderGeneralData;\n  onDataChange: (data: OrderGeneralData) => void;\n  onNext: () => void;\n  onCancel: () => void;\n}\n\nexport default function SalesOrderStep1({ data, onDataChange, onNext, onCancel }: SalesOrderStep1Props) {\n  const form = useForm<Step1FormValues>({\n    resolver: zodResolver(step1Schema),\n    defaultValues: {\n      clientName: data.clientName,\n      destination: data.destination,\n      totalTonnage: data.totalTonnage,\n      variety: data.qualityRequirements.variety || \"\",\n      moisture: data.qualityRequirements.moisture || \"\",\n      purity: data.qualityRequirements.purity || \"\",\n      certifications: data.qualityRequirements.certifications || [],\n      estimatedDeliveryDate: data.estimatedDeliveryDate,\n      notes: data.notes,\n    },\n  });\n\n  const availableCertifications = [\n    \"Orgánico\",\n    \"Comercio Justo\",\n    \"Rainforest Alliance\",\n    \"GlobalGAP\",\n    \"ISO 14001\",\n    \"RTRS (Soja Responsable)\",\n  ];\n\n  const onSubmit = (values: Step1FormValues) => {\n    const updatedData: OrderGeneralData = {\n      clientName: values.clientName,\n      destination: values.destination,\n      totalTonnage: values.totalTonnage,\n      qualityRequirements: {\n        variety: values.variety,\n        moisture: values.moisture,\n        purity: values.purity,\n        certifications: values.certifications,\n      },\n      estimatedDeliveryDate: values.estimatedDeliveryDate,\n      notes: values.notes || \"\",\n    };\n\n    onDataChange(updatedData);\n    onNext();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-sm text-muted-foreground\">\n        Paso 1 de 3: Ingrese los datos generales de la orden de venta\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Información Básica */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Información Básica</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"clientName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre del Cliente *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ej: Cooperativa Tacuarembó\"\n                          {...field}\n                          data-testid=\"input-client-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"destination\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Destino *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ej: Montevideo\"\n                          {...field}\n                          data-testid=\"input-destination\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"totalTonnage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cantidad Total Requerida (toneladas) *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          placeholder=\"500\"\n                          step=\"0.01\"\n                          min=\"0\"\n                          {...field}\n                          data-testid=\"input-total-tonnage\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"estimatedDeliveryDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Fecha Estimada de Entrega *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          {...field}\n                          data-testid=\"input-delivery-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Requerimientos de Calidad */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Requerimientos de Calidad</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"variety\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Variedad Preferida</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ej: INIA Olimar\"\n                          {...field}\n                          data-testid=\"input-variety\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"moisture\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Humedad Máxima</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ej: 14%\"\n                          {...field}\n                          data-testid=\"input-moisture\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"purity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pureza Mínima</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ej: 98%\"\n                          {...field}\n                          data-testid=\"input-purity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Certificaciones */}\n              <FormField\n                control={form.control}\n                name=\"certifications\"\n                render={() => (\n                  <FormItem>\n                    <FormLabel>Certificaciones Requeridas</FormLabel>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {availableCertifications.map((certification) => (\n                        <FormField\n                          key={certification}\n                          control={form.control}\n                          name=\"certifications\"\n                          render={({ field }) => {\n                            return (\n                              <FormItem\n                                key={certification}\n                                className=\"flex flex-row items-start space-x-3 space-y-0\"\n                              >\n                                <FormControl>\n                                  <Checkbox\n                                    checked={field.value?.includes(certification)}\n                                    onCheckedChange={(checked) => {\n                                      return checked\n                                        ? field.onChange([...(field.value || []), certification])\n                                        : field.onChange(\n                                            field.value?.filter(\n                                              (value) => value !== certification\n                                            )\n                                          );\n                                    }}\n                                    data-testid={`checkbox-cert-${certification.toLowerCase().replace(/\\s+/g, '-')}`}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal\">\n                                  {certification}\n                                </FormLabel>\n                              </FormItem>\n                            );\n                          }}\n                        />\n                      ))}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Notas Adicionales */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Notas Adicionales</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notas y Observaciones</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Información adicional sobre la orden...\"\n                        {...field}\n                        data-testid=\"textarea-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"flex justify-between\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"gap-2\"\n              data-testid=\"button-cancel-step1\"\n            >\n              <X className=\"h-4 w-4\" />\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"gap-2\"\n              data-testid=\"button-next-step1\"\n            >\n              Continuar\n              <ArrowRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":12165},"client/src/components/SalesOrderStep2.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, ArrowRight, Plus, Minus } from \"lucide-react\";\nimport { OrderGeneralData, BatchAssignment } from \"./SalesOrderWizard\";\nimport { Silo, RiceBatch } from \"@shared/schema\";\n\ninterface SalesOrderStep2Props {\n  orderData: OrderGeneralData;\n  assignments: BatchAssignment[];\n  onAssignmentsChange: (assignments: BatchAssignment[]) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n}\n\nexport default function SalesOrderStep2({ \n  orderData, \n  assignments, \n  onAssignmentsChange, \n  onNext, \n  onPrevious \n}: SalesOrderStep2Props) {\n  const [selectedSilo, setSelectedSilo] = useState<string | null>(null);\n\n  // TODO: remove mock functionality - mock available silos and batches\n  const mockSilos: Silo[] = [\n    {\n      id: \"s1\",\n      siloId: \"A-1\",\n      industrialPlantId: \"plant1\",\n      type: \"Almacenamiento\",\n      maxCapacity: \"10000.00\",\n      currentOccupancy: \"4500.00\",\n      diameter: \"12.50\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"s2\",\n      siloId: \"A-2\", \n      industrialPlantId: \"plant1\",\n      type: \"Almacenamiento\",\n      maxCapacity: \"8000.00\",\n      currentOccupancy: \"2800.00\",\n      diameter: \"10.00\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"s3\",\n      siloId: \"B-1\",\n      industrialPlantId: \"plant1\", \n      type: \"Almacenamiento\",\n      maxCapacity: \"12000.00\",\n      currentOccupancy: \"6200.00\",\n      diameter: \"14.00\",\n      createdAt: new Date().toISOString()\n    }\n  ];\n\n  const mockRiceBatches: RiceBatch[] = [\n    {\n      id: \"rb1\",\n      remitoId: \"r1\",\n      siloId: \"s1\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      variety: \"INIA Olimar\",\n      tonnage: \"25.50\",\n      originalTonnage: \"25.50\",\n      entryDate: \"2024-09-15T10:30:00.000Z\",\n      layerOrder: 1\n    },\n    {\n      id: \"rb2\",\n      remitoId: \"r2\",\n      siloId: \"s1\", \n      chacraName: \"Campo Sur\",\n      chacraId: \"2\",\n      variety: \"El Paso 144\",\n      tonnage: \"28.00\",\n      originalTonnage: \"28.00\",\n      entryDate: \"2024-09-16T14:15:00.000Z\",\n      layerOrder: 2\n    },\n    {\n      id: \"rb3\",\n      remitoId: \"r3\",\n      siloId: \"s2\",\n      chacraId: \"3\",\n      chacraName: \"Potrero Este\", \n      variety: \"INIA Olimar\",\n      tonnage: \"22.80\",\n      originalTonnage: \"22.80\",\n      entryDate: \"2024-09-17T08:45:00.000Z\",\n      layerOrder: 1\n    },\n    {\n      id: \"rb4\",\n      remitoId: \"r4\",\n      siloId: \"s3\",\n      chacraId: \"4\",\n      chacraName: \"Estancia La Esperanza\",\n      variety: \"INIA Olimar\",\n      tonnage: \"45.20\",\n      originalTonnage: \"45.20\", \n      entryDate: \"2024-09-18T11:20:00.000Z\",\n      layerOrder: 1\n    },\n    {\n      id: \"rb5\",\n      remitoId: \"r5\",\n      siloId: \"s3\",\n      chacraId: \"5\",\n      chacraName: \"Campo Verde\",\n      variety: \"El Paso 144\",\n      tonnage: \"38.70\",\n      originalTonnage: \"38.70\",\n      entryDate: \"2024-09-19T09:10:00.000Z\",\n      layerOrder: 2\n    }\n  ];\n\n  const totalRequired = parseFloat(orderData.totalTonnage || \"0\");\n  const totalAssigned = assignments.reduce((sum, assignment) => sum + assignment.assignedTonnage, 0);\n  const remainingToAssign = totalRequired - totalAssigned;\n\n  const handleAddAssignment = (batch: RiceBatch, silo: Silo) => {\n    const availableTonnage = parseFloat(batch.tonnage || \"0\");\n    const newAssignment: BatchAssignment = {\n      siloId: silo.id,\n      siloName: silo.siloId,\n      riceBatchId: batch.id,\n      remitoId: batch.remitoId || \"\",\n      chacraName: batch.chacraName || \"\",\n      variety: batch.variety || \"\",\n      assignedTonnage: Math.min(availableTonnage, remainingToAssign),\n      availableTonnage: availableTonnage,\n    };\n\n    onAssignmentsChange([...assignments, newAssignment]);\n  };\n\n  const handleUpdateAssignment = (index: number, newTonnage: number) => {\n    const updatedAssignments = [...assignments];\n    const assignment = updatedAssignments[index];\n    const maxAllowed = Math.min(assignment.availableTonnage, totalRequired - totalAssigned + assignment.assignedTonnage);\n    \n    updatedAssignments[index] = {\n      ...assignment,\n      assignedTonnage: Math.max(0, Math.min(newTonnage, maxAllowed))\n    };\n\n    onAssignmentsChange(updatedAssignments);\n  };\n\n  const handleRemoveAssignment = (index: number) => {\n    const updatedAssignments = assignments.filter((_, i) => i !== index);\n    onAssignmentsChange(updatedAssignments);\n  };\n\n  const isAssignmentComplete = totalAssigned >= totalRequired;\n  const canProceed = isAssignmentComplete && assignments.length > 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-sm text-muted-foreground\">\n        Paso 2 de 3: Seleccione los lotes de arroz para cumplir con la orden\n      </div>\n\n      {/* Summary Card */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Total Requerido</div>\n              <div className=\"text-lg font-semibold\">{totalRequired.toLocaleString()} t</div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Total Asignado</div>\n              <div className=\"text-lg font-semibold text-green-600\">{totalAssigned.toLocaleString()} t</div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Faltante</div>\n              <div className={`text-lg font-semibold ${remainingToAssign > 0 ? 'text-orange-600' : 'text-green-600'}`}>\n                {Math.max(0, remainingToAssign).toLocaleString()} t\n              </div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Estado</div>\n              <Badge variant={isAssignmentComplete ? \"default\" : \"secondary\"} className={isAssignmentComplete ? \"bg-green-100 text-green-800\" : \"\"}>\n                {isAssignmentComplete ? \"Completo\" : \"Pendiente\"}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Left Panel: Available Silos */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Silos Disponibles</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockSilos.map((silo) => {\n              const siloBatches = mockRiceBatches.filter(batch => batch.siloId === silo.id);\n              const siloOccupancy = parseFloat(silo.currentOccupancy || \"0\");\n              \n              return (\n                <div\n                  key={silo.id}\n                  className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                    selectedSilo === silo.id ? \"border-primary bg-primary/5\" : \"hover:border-muted-foreground/30\"\n                  }`}\n                  onClick={() => setSelectedSilo(silo.id)}\n                  data-testid={`silo-${silo.id}`}\n                >\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <h4 className=\"font-medium\">Silo {silo.siloId}</h4>\n                      <Badge variant=\"outline\" className=\"text-xs\">{silo.type}</Badge>\n                    </div>\n                    <div className=\"text-right text-sm\">\n                      <div className=\"font-mono\">{siloOccupancy.toLocaleString()} t</div>\n                      <div className=\"text-muted-foreground\">{siloBatches.length} lotes</div>\n                    </div>\n                  </div>\n\n                  {selectedSilo === silo.id && siloBatches.length > 0 && (\n                    <div className=\"space-y-2 mt-4\">\n                      <h5 className=\"text-sm font-medium\">Lotes Disponibles:</h5>\n                      {siloBatches.map((batch) => {\n                        const isAlreadyAssigned = assignments.some(a => a.riceBatchId === batch.id);\n                        \n                        return (\n                          <div\n                            key={batch.id}\n                            className=\"flex justify-between items-center bg-muted/50 p-2 rounded text-sm\"\n                          >\n                            <div>\n                              <span className=\"font-mono\">{batch.remitoId}</span> - {batch.variety}\n                              <div className=\"text-xs text-muted-foreground\">{batch.chacraName}</div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-mono\">{parseFloat(batch.tonnage || \"0\").toLocaleString()} t</span>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                disabled={isAlreadyAssigned || remainingToAssign <= 0}\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleAddAssignment(batch, silo);\n                                }}\n                                data-testid={`button-add-batch-${batch.id}`}\n                              >\n                                <Plus className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Right Panel: Current Assignments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Lotes Asignados ({assignments.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {assignments.length > 0 ? (\n              <div className=\"space-y-3\">\n                {assignments.map((assignment, index) => (\n                  <div key={`${assignment.riceBatchId}-${index}`} className=\"border rounded-lg p-3\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div>\n                        <div className=\"font-medium font-mono\">{assignment.remitoId}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {assignment.chacraName} • {assignment.variety}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Silo {assignment.siloName}\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleRemoveAssignment(index)}\n                        data-testid={`button-remove-assignment-${index}`}\n                      >\n                        <Minus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      <Input\n                        type=\"number\"\n                        value={assignment.assignedTonnage}\n                        onChange={(e) => handleUpdateAssignment(index, parseFloat(e.target.value) || 0)}\n                        step=\"0.01\"\n                        min=\"0\"\n                        max={assignment.availableTonnage}\n                        className=\"w-24 h-8 text-sm\"\n                        data-testid={`input-tonnage-${index}`}\n                      />\n                      <span className=\"text-sm\">t de {assignment.availableTonnage.toLocaleString()} t disponibles</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <div className=\"mb-2\">No hay lotes asignados</div>\n                <div className=\"text-sm\">Seleccione un silo de la izquierda para ver los lotes disponibles</div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-between\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onPrevious}\n          className=\"gap-2\"\n          data-testid=\"button-previous-step2\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Anterior\n        </Button>\n        <Button\n          onClick={onNext}\n          disabled={!canProceed}\n          className=\"gap-2\"\n          data-testid=\"button-next-step2\"\n        >\n          Continuar\n          <ArrowRight className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":13006},"client/src/components/SalesOrderStep3.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Check, FileDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { OrderGeneralData, BatchAssignment, TraceabilitySummary } from \"./SalesOrderWizard\";\n\ninterface SalesOrderStep3Props {\n  orderData: OrderGeneralData;\n  assignments: BatchAssignment[];\n  summary: TraceabilitySummary;\n  onSummaryChange: (summary: TraceabilitySummary) => void;\n  onOrderCreated: (newOrder: any) => void; // TODO: Use proper SalesOrder type\n  onPrevious: () => void;\n}\n\nexport default function SalesOrderStep3({ \n  orderData, \n  assignments, \n  summary, \n  onSummaryChange, \n  onOrderCreated, \n  onPrevious \n}: SalesOrderStep3Props) {\n  const { toast } = useToast();\n  const [isCreating, setIsCreating] = useState(false);\n\n  // Calculate traceability summary when component mounts or assignments change\n  useEffect(() => {\n    calculateTraceabilitySummary();\n  }, [assignments]);\n\n  const calculateTraceabilitySummary = () => {\n    // Group assignments by chacra\n    const chacraGroups = assignments.reduce((groups, assignment) => {\n      if (!groups[assignment.chacraName]) {\n        groups[assignment.chacraName] = {\n          chacraName: assignment.chacraName,\n          producer: \"Productor Rural\", // TODO: Get from real data\n          variety: assignment.variety,\n          tonnage: 0,\n        };\n      }\n      groups[assignment.chacraName].tonnage += assignment.assignedTonnage;\n      return groups;\n    }, {} as Record<string, any>);\n\n    const totalTonnage = assignments.reduce((sum, a) => sum + a.assignedTonnage, 0);\n    \n    const chacraBreakdown = Object.values(chacraGroups).map((group: any) => ({\n      ...group,\n      percentage: totalTonnage > 0 ? (group.tonnage / totalTonnage) * 100 : 0,\n    }));\n\n    // TODO: Calculate real sustainability metrics based on events data\n    // For now, using mock calculations\n    const sustainabilityMetrics = {\n      carbonFootprintPerTon: calculateWeightedAverage([\n        { value: 2.1, weight: 0.4 }, // INIA Olimar\n        { value: 2.3, weight: 0.6 }, // El Paso 144\n      ]),\n      waterUsagePerTon: calculateWeightedAverage([\n        { value: 1200, weight: 0.4 },\n        { value: 1350, weight: 0.6 },\n      ]),\n      energyUsagePerTon: calculateWeightedAverage([\n        { value: 180, weight: 0.4 },\n        { value: 195, weight: 0.6 },\n      ]),\n    };\n\n    onSummaryChange({\n      chacraBreakdown,\n      sustainabilityMetrics,\n    });\n  };\n\n  const calculateWeightedAverage = (values: { value: number; weight: number }[]) => {\n    const totalWeight = values.reduce((sum, v) => sum + v.weight, 0);\n    const weightedSum = values.reduce((sum, v) => sum + v.value * v.weight, 0);\n    return totalWeight > 0 ? weightedSum / totalWeight : 0;\n  };\n\n  const handleCreateOrder = async () => {\n    setIsCreating(true);\n    \n    try {\n      // Generate order number\n      const orderNumber = `OV-${new Date().getFullYear()}-${String(Date.now()).slice(-3)}`;\n      \n      // Create new order object\n      const newOrder = {\n        id: `so_${Date.now()}`,\n        orderNumber,\n        clientName: orderData.clientName,\n        destination: orderData.destination,\n        totalTonnage: totalTonnage.toString(),\n        qualityRequirements: JSON.stringify(orderData.qualityRequirements),\n        status: \"Virgen\",\n        orderDate: new Date().toISOString(),\n        estimatedDeliveryDate: orderData.estimatedDeliveryDate,\n        notes: orderData.notes || \"\",\n        createdAt: new Date().toISOString()\n      };\n      \n      // TODO: Implement actual order creation API call\n      console.log(\"Creating order:\", {\n        orderNumber,\n        ...orderData,\n        assignments,\n        traceabilitySummary: summary,\n      });\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      toast({\n        title: \"Orden creada exitosamente\",\n        description: `La orden ${orderNumber} ha sido creada y los lotes han sido reservados.`,\n      });\n\n      onOrderCreated(newOrder);\n    } catch (error) {\n      toast({\n        title: \"Error al crear orden\",\n        description: \"Ocurrió un error al crear la orden. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleExportPDF = () => {\n    // TODO: Implement PDF export functionality\n    toast({\n      title: \"Exportando reporte\",\n      description: \"La funcionalidad de exportación PDF será implementada próximamente.\",\n    });\n  };\n\n  const totalTonnage = assignments.reduce((sum, a) => sum + a.assignedTonnage, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-sm text-muted-foreground\">\n        Paso 3 de 3: Revise el resumen de trazabilidad y confirme la creación de la orden\n      </div>\n\n      {/* Order Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Resumen de la Orden</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-sm font-medium text-muted-foreground\">Cliente</div>\n              <div>{orderData.clientName}</div>\n            </div>\n            <div>\n              <div className=\"text-sm font-medium text-muted-foreground\">Destino</div>\n              <div>{orderData.destination}</div>\n            </div>\n            <div>\n              <div className=\"text-sm font-medium text-muted-foreground\">Cantidad Total</div>\n              <div className=\"font-mono\">{totalTonnage.toLocaleString()} toneladas</div>\n            </div>\n            <div>\n              <div className=\"text-sm font-medium text-muted-foreground\">Fecha de Entrega</div>\n              <div>{new Date(orderData.estimatedDeliveryDate).toLocaleDateString(\"es-UY\")}</div>\n            </div>\n          </div>\n\n          {orderData.qualityRequirements.variety && (\n            <div>\n              <div className=\"text-sm font-medium text-muted-foreground\">Requerimientos de Calidad</div>\n              <div className=\"flex gap-2 mt-1\">\n                {orderData.qualityRequirements.variety && (\n                  <Badge variant=\"outline\">Variedad: {orderData.qualityRequirements.variety}</Badge>\n                )}\n                {orderData.qualityRequirements.moisture && (\n                  <Badge variant=\"outline\">Humedad: {orderData.qualityRequirements.moisture}</Badge>\n                )}\n                {orderData.qualityRequirements.purity && (\n                  <Badge variant=\"outline\">Pureza: {orderData.qualityRequirements.purity}</Badge>\n                )}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Traceability Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Desglose de Origen</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {summary.chacraBreakdown.length > 0 ? (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Chacra Origen</TableHead>\n                    <TableHead>Productor</TableHead>\n                    <TableHead>Variedad</TableHead>\n                    <TableHead className=\"text-right\">Porcentaje (%)</TableHead>\n                    <TableHead className=\"text-right\">Tonelaje (t)</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {summary.chacraBreakdown.map((breakdown, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{breakdown.chacraName}</TableCell>\n                      <TableCell>{breakdown.producer}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\">{breakdown.variety}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right font-mono\">\n                        {breakdown.percentage.toFixed(1)}%\n                      </TableCell>\n                      <TableCell className=\"text-right font-mono\">\n                        {breakdown.tonnage.toLocaleString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              No hay datos de origen disponibles\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Sustainability Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Cálculo de Sostenibilidad</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {summary.sustainabilityMetrics.carbonFootprintPerTon.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">kg CO₂-eq / ton</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Huella de Carbono</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {summary.sustainabilityMetrics.waterUsagePerTon.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">L / ton</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Uso de Agua</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {summary.sustainabilityMetrics.energyUsagePerTon.toFixed(0)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">kWh / ton</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Uso de Energía</div>\n            </div>\n          </div>\n\n          <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-md\">\n            <div className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n              Huella de Carbono Estimada Total\n            </div>\n            <div className=\"text-lg font-bold text-green-900 dark:text-green-100\">\n              {(summary.sustainabilityMetrics.carbonFootprintPerTon * totalTonnage).toFixed(2)} kg CO₂-eq\n            </div>\n            <div className=\"text-xs text-green-700 dark:text-green-300\">\n              Para {totalTonnage.toLocaleString()} toneladas de arroz\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <div className=\"flex justify-between\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={onPrevious}\n          className=\"gap-2\"\n          data-testid=\"button-previous-step3\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Anterior\n        </Button>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleExportPDF}\n            className=\"gap-2\"\n            data-testid=\"button-export-pdf\"\n          >\n            <FileDown className=\"h-4 w-4\" />\n            Exportar Reporte\n          </Button>\n          <Button\n            onClick={handleCreateOrder}\n            disabled={isCreating}\n            className=\"gap-2\"\n            data-testid=\"button-create-order\"\n          >\n            {isCreating ? (\n              \"Creando...\"\n            ) : (\n              <>\n                <Check className=\"h-4 w-4\" />\n                Generar Orden y Reservar Inventario\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12100},"client/src/components/SalesOrderWizard.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\nimport SalesOrderStep1 from \"./SalesOrderStep1\";\nimport SalesOrderStep2 from \"./SalesOrderStep2\";\nimport SalesOrderStep3 from \"./SalesOrderStep3\";\n\ninterface SalesOrderWizardProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onOrderCreated?: (newOrder: any) => void; // TODO: Use proper SalesOrder type\n}\n\nexport interface OrderGeneralData {\n  clientName: string;\n  destination: string;\n  totalTonnage: string;\n  qualityRequirements: {\n    variety?: string;\n    moisture?: string;\n    purity?: string;\n    certifications?: string[];\n  };\n  estimatedDeliveryDate: string;\n  notes: string;\n}\n\nexport interface BatchAssignment {\n  siloId: string;\n  siloName: string;\n  riceBatchId: string;\n  remitoId: string;\n  chacraName: string;\n  variety: string;\n  assignedTonnage: number;\n  availableTonnage: number;\n}\n\nexport interface TraceabilitySummary {\n  chacraBreakdown: {\n    chacraName: string;\n    producer: string;\n    variety: string;\n    percentage: number;\n    tonnage: number;\n  }[];\n  sustainabilityMetrics: {\n    carbonFootprintPerTon: number;\n    waterUsagePerTon: number;\n    energyUsagePerTon: number;\n  };\n}\n\nexport default function SalesOrderWizard({ open, onOpenChange, onOrderCreated }: SalesOrderWizardProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [orderData, setOrderData] = useState<OrderGeneralData>({\n    clientName: \"\",\n    destination: \"\",\n    totalTonnage: \"\",\n    qualityRequirements: {},\n    estimatedDeliveryDate: \"\",\n    notes: \"\",\n  });\n  const [batchAssignments, setBatchAssignments] = useState<BatchAssignment[]>([]);\n  const [traceabilitySummary, setTraceabilitySummary] = useState<TraceabilitySummary>({\n    chacraBreakdown: [],\n    sustainabilityMetrics: {\n      carbonFootprintPerTon: 0,\n      waterUsagePerTon: 0,\n      energyUsagePerTon: 0,\n    },\n  });\n\n  const steps = [\n    { number: 1, title: \"Datos Generales\" },\n    { number: 2, title: \"Asignación de Lotes\" },\n    { number: 3, title: \"Resumen y Confirmación\" },\n  ];\n\n  const progress = (currentStep / steps.length) * 100;\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleClose = () => {\n    // Reset wizard state\n    setCurrentStep(1);\n    setOrderData({\n      clientName: \"\",\n      destination: \"\",\n      totalTonnage: \"\",\n      qualityRequirements: {},\n      estimatedDeliveryDate: \"\",\n      notes: \"\",\n    });\n    setBatchAssignments([]);\n    setTraceabilitySummary({\n      chacraBreakdown: [],\n      sustainabilityMetrics: {\n        carbonFootprintPerTon: 0,\n        waterUsagePerTon: 0,\n        energyUsagePerTon: 0,\n      },\n    });\n    onOpenChange(false);\n  };\n\n  const handleOrderCreated = (newOrder: any) => {\n    onOrderCreated?.(newOrder);\n    handleClose();\n  };\n\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <SalesOrderStep1\n            data={orderData}\n            onDataChange={setOrderData}\n            onNext={handleNext}\n            onCancel={handleClose}\n          />\n        );\n      case 2:\n        return (\n          <SalesOrderStep2\n            orderData={orderData}\n            assignments={batchAssignments}\n            onAssignmentsChange={setBatchAssignments}\n            onNext={handleNext}\n            onPrevious={handlePrevious}\n          />\n        );\n      case 3:\n        return (\n          <SalesOrderStep3\n            orderData={orderData}\n            assignments={batchAssignments}\n            summary={traceabilitySummary}\n            onSummaryChange={setTraceabilitySummary}\n            onOrderCreated={handleOrderCreated}\n            onPrevious={handlePrevious}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">\n            Crear Nueva Orden de Venta - {steps[currentStep - 1]?.title}\n          </DialogTitle>\n        </DialogHeader>\n\n        {/* Progress Indicator */}\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between text-sm\">\n            {steps.map((step) => (\n              <div\n                key={step.number}\n                className={`flex items-center space-x-2 ${\n                  step.number === currentStep\n                    ? \"text-primary font-medium\"\n                    : step.number < currentStep\n                    ? \"text-green-600\"\n                    : \"text-muted-foreground\"\n                }`}\n              >\n                <div\n                  className={`w-8 h-8 rounded-full flex items-center justify-center text-xs ${\n                    step.number === currentStep\n                      ? \"bg-primary text-primary-foreground\"\n                      : step.number < currentStep\n                      ? \"bg-green-600 text-white\"\n                      : \"bg-muted text-muted-foreground\"\n                  }`}\n                >\n                  {step.number}\n                </div>\n                <span className=\"hidden sm:inline\">{step.title}</span>\n              </div>\n            ))}\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        {/* Step Content */}\n        <div className=\"flex-1\">\n          {renderCurrentStep()}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5833},"client/src/components/SiloCard.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowRightLeft, Wheat, ShoppingCart, Thermometer, Droplets, Wind, AlertTriangle, Clock, Wifi, WifiOff } from \"lucide-react\";\nimport { Silo, RiceBatch } from \"@shared/schema\";\nimport TransferModal from \"./TransferModal\";\nimport SaleAssignmentModal from \"./SaleAssignmentModal\";\n\ninterface SiloCardProps {\n  silo: Silo;\n  batches: RiceBatch[];\n  availableSilos?: Silo[];\n}\n\ntype TransferLogic = \"proportional_mix\" | \"fifo_layers\";\n\nexport default function SiloCard({ silo, batches, availableSilos = [] }: SiloCardProps) {\n  const [transferLogic, setTransferLogic] = useState<TransferLogic>(\"proportional_mix\");\n  const maxCapacity = parseFloat(silo.maxCapacity || \"0\");\n  const currentOccupancy = parseFloat(silo.currentOccupancy || \"0\");\n  const occupancyPercentage = maxCapacity > 0 ? (currentOccupancy / maxCapacity) * 100 : 0;\n\n  // Cálculo de días en silo\n  function getDaysInSilo(entryDate: string): number {\n    const entry = new Date(entryDate);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - entry.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  }\n\n  // Datos de sensores en tiempo real (mock data)\n  const temperature = 22.5;\n  const humidity = 13.5;\n  const sensorData = {\n    temperature,\n    humidity,\n    co2Level: 450,\n    isOnline: true,\n    lastReading: new Date(),\n    aerationActive: silo.type.toLowerCase() === 'almacenamiento',\n    qualityAlerts: [\n      ...(batches.some(b => getDaysInSilo(b.entryDate) > 25) ? ['Lote r1 se aproxima al límite de 30 días'] : []),\n      ...(temperature > 25 ? ['Temperatura elevada'] : [])\n    ]\n  };\n\n  function getTemperatureStatus(temp: number): string {\n    if (temp > 28) return 'alert';\n    if (temp > 25) return 'warning';\n    return 'normal';\n  }\n\n  function getHumidityStatus(humidity: number): string {\n    if (humidity > 14) return 'alert';\n    if (humidity > 13.5) return 'warning';\n    return 'normal';\n  }\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'alert': return 'text-red-600';\n      case 'warning': return 'text-yellow-600';\n      default: return 'text-green-600';\n    }\n  }\n\n  const formatDateTime = (dateString: string) => {\n    if (!dateString) return \"-\";\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleString(\"es-UY\", {\n        day: \"2-digit\",\n        month: \"2-digit\", \n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n    } catch {\n      return \"-\";\n    }\n  };\n\n  const getSiloTypeColor = (type: string) => {\n    switch (type.toLowerCase()) {\n      case \"almacenamiento\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"secado\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"aireacion\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Wheat className=\"h-5 w-5\" />\n            Silo {silo.siloId}\n          </CardTitle>\n          <Badge className={getSiloTypeColor(silo.type)}>\n            {silo.type}\n          </Badge>\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          Capacidad: {maxCapacity.toLocaleString()} toneladas\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Sensores en Tiempo Real */}\n        <div className=\"border rounded-md p-3 bg-muted/30\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <div className=\"flex items-center gap-1\">\n              {sensorData.isOnline ? (\n                <Wifi className=\"h-3 w-3 text-green-600\" />\n              ) : (\n                <WifiOff className=\"h-3 w-3 text-red-600\" />\n              )}\n              <span className=\"text-xs font-medium\">Sensores Activos</span>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Última lectura: {sensorData.lastReading.toLocaleTimeString('es-UY', { hour: '2-digit', minute: '2-digit' })}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-3\">\n            <div className=\"flex items-center gap-1\">\n              <Thermometer className={`h-3 w-3 ${getStatusColor(getTemperatureStatus(sensorData.temperature))}`} />\n              <div className=\"text-xs\">\n                <div className=\"font-medium\">{sensorData.temperature}°C</div>\n                <div className=\"text-muted-foreground\">Temp.</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-1\">\n              <Droplets className={`h-3 w-3 ${getStatusColor(getHumidityStatus(sensorData.humidity))}`} />\n              <div className=\"text-xs\">\n                <div className=\"font-medium\">{sensorData.humidity}%</div>\n                <div className=\"text-muted-foreground\">Humedad</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-1\">\n              <Wind className={`h-3 w-3 ${sensorData.aerationActive ? 'text-blue-600' : 'text-gray-400'}`} />\n              <div className=\"text-xs\">\n                <div className=\"font-medium\">{sensorData.aerationActive ? 'ON' : 'OFF'}</div>\n                <div className=\"text-muted-foreground\">Aireación</div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Alertas de Calidad */}\n          {sensorData.qualityAlerts.length > 0 && (\n            <div className=\"mt-3 pt-2 border-t\">\n              {sensorData.qualityAlerts.map((alert: string, index: number) => (\n                <div key={index} className=\"flex items-center gap-2 text-xs text-amber-600\">\n                  <AlertTriangle className=\"h-3 w-3\" />\n                  <span>{alert}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Occupancy Level */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Ocupación</span>\n            <span className=\"text-sm text-muted-foreground\">\n              {currentOccupancy.toLocaleString()} / {maxCapacity.toLocaleString()} t\n            </span>\n          </div>\n          <Progress \n            value={occupancyPercentage} \n            className=\"h-3\"\n          />\n          <div className=\"text-xs text-muted-foreground text-center\">\n            {occupancyPercentage.toFixed(1)}% ocupado\n          </div>\n        </div>\n\n        {/* Batches Table */}\n        <div>\n          <h4 className=\"text-sm font-semibold mb-3 flex items-center gap-2\">\n            Lotes de Arroz ({batches.length})\n            {transferLogic === \"fifo_layers\" && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                FIFO\n              </Badge>\n            )}\n          </h4>\n          \n          {batches.length > 0 ? (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-xs\">ID Lote</TableHead>\n                    <TableHead className=\"text-xs\">Chacra</TableHead>\n                    <TableHead className=\"text-xs\">Variedad</TableHead>\n                    <TableHead className=\"text-xs\">Calidad</TableHead>\n                    <TableHead className=\"text-xs\">Certificación</TableHead>\n                    <TableHead className=\"text-xs text-right\">Tonelaje</TableHead>\n                    <TableHead className=\"text-xs\">F. Entrada</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {batches\n                    .sort((a, b) => {\n                      if (transferLogic === \"fifo_layers\") {\n                        return a.layerOrder - b.layerOrder; // Show oldest first for FIFO\n                      }\n                      return new Date(b.entryDate).getTime() - new Date(a.entryDate).getTime(); // Show newest first for proportional\n                    })\n                    .map((batch, index) => (\n                    <TableRow \n                      key={batch.id}\n                      className=\"text-xs\"\n                      data-testid={`row-batch-${batch.id}`}\n                    >\n                      <TableCell className=\"font-mono\">\n                        {batch.remitoId}\n                        {transferLogic === \"fifo_layers\" && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            Capa #{batch.layerOrder}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>{batch.chacraName}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {batch.variety}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1 text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            <Droplets className=\"h-3 w-3 text-blue-500\" />\n                            <span>13.2%</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-muted-foreground\">Partidos: 2.8%</span>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <Badge \n                            variant={Math.random() > 0.5 ? \"default\" : \"outline\"} \n                            className={`text-xs ${\n                              Math.random() > 0.5 \n                                ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" \n                                : \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\"\n                            }`}\n                          >\n                            {Math.random() > 0.5 ? \"Orgánico\" : \"Convencional\"}\n                          </Badge>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {Math.random() > 0.7 ? \"Comercio Justo\" : \"Estándar\"}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-right font-mono\">\n                        {parseFloat(batch.tonnage).toLocaleString()} t\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        <div className=\"space-y-1\">\n                          <div>{formatDateTime(batch.entryDate)}</div>\n                          <div className=\"flex items-center gap-1 text-xs\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span className={getDaysInSilo(batch.entryDate) > 25 ? 'text-amber-600 font-medium' : ''}>\n                              {getDaysInSilo(batch.entryDate)} días\n                            </span>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground text-sm border rounded-md\">\n              Silo vacío - No hay lotes registrados\n            </div>\n          )}\n        </div>\n\n        {/* Transfer Logic Selector */}\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium\">Lógica de Trasiego</Label>\n          <RadioGroup\n            value={transferLogic}\n            onValueChange={(value: TransferLogic) => setTransferLogic(value)}\n            className=\"space-y-2\"\n          >\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem \n                value=\"proportional_mix\" \n                id={`proportional_mix_${silo.id}`}\n                data-testid={`radio-proportional-mix-${silo.id}`}\n              />\n              <Label htmlFor={`proportional_mix_${silo.id}`} className=\"text-sm\">\n                Mezcla Proporcional\n              </Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem \n                value=\"fifo_layers\" \n                id={`fifo_layers_${silo.id}`}\n                data-testid={`radio-fifo-layers-${silo.id}`}\n              />\n              <Label htmlFor={`fifo_layers_${silo.id}`} className=\"text-sm\">\n                Manejo por Capas (FIFO)\n              </Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        {/* Silo Actions */}\n        <div className=\"space-y-2\">\n          <TransferModal\n            silo={silo}\n            batches={batches}\n            transferLogic={transferLogic}\n            availableSilos={availableSilos}\n            onTransferComplete={() => {\n              // TODO: Implement refetch logic when real API is connected\n              console.log(\"Transfer completed, should refetch data\");\n            }}\n          />\n          <SaleAssignmentModal\n            silo={silo}\n            batches={batches}\n            transferLogic={transferLogic}\n            onSaleAssigned={() => {\n              // TODO: Implement refetch logic when real API is connected\n              console.log(\"Sale assigned, should refetch data\");\n            }}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14452},"client/src/components/SiloFormModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst siloFormSchema = z.object({\n  siloId: z.string().min(1, \"ID del silo es requerido\"),\n  type: z.string().min(1, \"Tipo de silo es requerido\"),\n  maxCapacity: z.string().min(1, \"Capacidad máxima es requerida\"),\n  diameter: z.string().min(1, \"Diámetro es requerido\"),\n});\n\ntype SiloFormValues = z.infer<typeof siloFormSchema>;\n\ninterface SiloFormModalProps {\n  industrialPlantId: string;\n  onSiloAdded?: () => void;\n}\n\nexport default function SiloFormModal({ industrialPlantId, onSiloAdded }: SiloFormModalProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SiloFormValues>({\n    resolver: zodResolver(siloFormSchema),\n    defaultValues: {\n      siloId: \"\",\n      type: \"\",\n      maxCapacity: \"\",\n      diameter: \"\",\n    },\n  });\n\n  const onSubmit = async (values: SiloFormValues) => {\n    try {\n      // TODO: Implement API call to create silo\n      console.log(\"Creating silo:\", {\n        ...values,\n        industrialPlantId,\n        maxCapacity: parseFloat(values.maxCapacity),\n        diameter: parseFloat(values.diameter),\n      });\n\n      toast({\n        title: \"Silo creado exitosamente\",\n        description: `El silo ${values.siloId} ha sido registrado en la planta.`,\n      });\n\n      form.reset();\n      setOpen(false);\n      onSiloAdded?.();\n    } catch (error) {\n      toast({\n        title: \"Error al crear silo\",\n        description: \"Ocurrió un error al intentar crear el silo. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const siloTypes = [\n    { value: \"Almacenamiento\", label: \"Almacenamiento\" },\n    { value: \"Secado\", label: \"Secado\" },\n    { value: \"Aireacion\", label: \"Aireación\" },\n    { value: \"Limpieza\", label: \"Limpieza\" },\n    { value: \"Pre-almacenamiento\", label: \"Pre-almacenamiento\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button size=\"sm\" className=\"gap-2\" data-testid=\"button-add-silo\">\n          <Plus className=\"h-4 w-4\" />\n          Agregar Silo\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Agregar Nuevo Silo</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"siloId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>ID del Silo *</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Ej: A-1, Norte, Principal...\"\n                      {...field}\n                      data-testid=\"input-silo-id\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de Silo *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-silo-type\">\n                        <SelectValue placeholder=\"Seleccionar tipo de silo\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {siloTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"maxCapacity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Capacidad Máxima (toneladas) *</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"10000\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      {...field}\n                      data-testid=\"input-max-capacity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"diameter\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Diámetro (metros) *</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"12.5\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      {...field}\n                      data-testid=\"input-diameter\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-silo\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={form.formState.isSubmitting}\n                data-testid=\"button-submit-silo\"\n              >\n                {form.formState.isSubmitting ? \"Creando...\" : \"Crear Silo\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6529},"client/src/components/TabNavigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Tab {\n  id: string;\n  label: string;\n  isActive?: boolean;\n}\n\ninterface TabNavigationProps {\n  tabs: Tab[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n}\n\nexport default function TabNavigation({ tabs, activeTab, onTabChange }: TabNavigationProps) {\n  return (\n    <div className=\"border-b border-border bg-white\">\n      <div className=\"flex space-x-8 px-6\">\n        {tabs.map((tab) => (\n          <Button\n            key={tab.id}\n            variant=\"ghost\"\n            data-testid={`tab-${tab.id}`}\n            className={`relative px-0 py-4 text-sm font-medium rounded-none border-b-2 transition-colors ${\n              activeTab === tab.id\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground hover:border-muted\"\n            }`}\n            onClick={() => onTabChange(tab.id)}\n          >\n            {tab.label}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1066},"client/src/components/Timeline.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Event, Zafra } from \"@shared/schema\";\n\ninterface TimelineProps {\n  events: Event[];\n  zafras: Zafra[];\n  monthsToShow?: number;\n  isCompact?: boolean;\n  onEventClick?: (event: Event) => void;\n}\n\nconst eventTypeColors = {\n  laboreo: \"bg-orange-500\",\n  fertilización: \"bg-yellow-500\", \n  siembra: \"bg-green-600\",\n  emergencia: \"bg-green-400\",\n  inundación: \"bg-blue-500\",\n  aplicación: \"bg-purple-500\",\n  drenado: \"bg-blue-300\",\n  cosecha: \"bg-amber-600\"\n};\n\nconst eventTypeIcons = {\n  laboreo: \"🚜\",\n  fertilización: \"🌱\", \n  siembra: \"🌾\",\n  emergencia: \"🌱\",\n  inundación: \"💧\",\n  aplicación: \"💊\",\n  drenado: \"🌊\",\n  cosecha: \"✂️\"\n};\n\nexport default function Timeline({ \n  events, \n  zafras, \n  monthsToShow = 6, \n  isCompact = false,\n  onEventClick \n}: TimelineProps) {\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  const getZafraBackground = (zafraType: string) => {\n    return zafraType === \"pasturas\" ? \"bg-green-100\" : \"bg-orange-50\";\n  };\n\n  // Generate timeline months\n  const generateTimelineMonths = () => {\n    const months = [];\n    const today = new Date();\n    \n    for (let i = monthsToShow - 1; i >= 0; i--) {\n      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\n      months.push({\n        date,\n        label: date.toLocaleDateString('es-ES', { month: 'short', year: '2-digit' })\n      });\n    }\n    return months;\n  };\n\n  const timelineMonths = generateTimelineMonths();\n\n  const getEventPosition = (eventDate: string) => {\n    const date = new Date(eventDate);\n    const firstMonth = timelineMonths[0].date;\n    const lastMonth = timelineMonths[timelineMonths.length - 1].date;\n    \n    if (date < firstMonth || date > lastMonth) return null;\n    \n    const totalDays = (lastMonth.getTime() - firstMonth.getTime()) / (1000 * 60 * 60 * 24);\n    const eventDays = (date.getTime() - firstMonth.getTime()) / (1000 * 60 * 60 * 24);\n    \n    return (eventDays / totalDays) * 100;\n  };\n\n  return (\n    <TooltipProvider>\n      <div className={`relative ${isCompact ? 'h-12' : 'h-20'} bg-background border border-border rounded overflow-hidden`}>\n        {/* Zafra backgrounds */}\n        {zafras.map((zafra) => (\n          <div\n            key={zafra.id}\n            className={`absolute top-0 h-full ${getZafraBackground(zafra.type)} opacity-50`}\n            style={{\n              left: '10%',\n              width: '40%', // Placeholder positioning\n            }}\n          />\n        ))}\n\n        {/* Timeline grid */}\n        <div className=\"absolute top-0 left-0 w-full h-full\">\n          <div className=\"flex h-full\">\n            {timelineMonths.map((month, index) => (\n              <div\n                key={index}\n                className=\"flex-1 border-r border-border/30 relative\"\n              >\n                {!isCompact && (\n                  <div className=\"absolute bottom-1 left-1 text-xs text-muted-foreground\">\n                    {month.label}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Events */}\n        {events.map((event) => {\n          const position = getEventPosition(event.date);\n          if (position === null) return null;\n\n          return (\n            <Tooltip key={event.id}>\n              <TooltipTrigger asChild>\n                <div\n                  className={`absolute top-2 w-6 h-6 rounded-full cursor-pointer transform -translate-x-3 \n                    ${eventTypeColors[event.type as keyof typeof eventTypeColors] || 'bg-gray-500'}\n                    hover:scale-110 transition-transform flex items-center justify-center text-xs`}\n                  style={{ left: `${position}%` }}\n                  onClick={() => {\n                    onEventClick?.(event);\n                    console.log('Event clicked:', event);\n                  }}\n                  data-testid={`event-${event.id}`}\n                >\n                  <span className=\"text-white\">\n                    {eventTypeIcons[event.type as keyof typeof eventTypeIcons] || '📅'}\n                  </span>\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <div className=\"text-sm\">\n                  <p className=\"font-medium\">{event.type}</p>\n                  <p className=\"text-muted-foreground\">{new Date(event.date).toLocaleDateString('es-ES')}</p>\n                  {event.details && <p className=\"text-sm mt-1\">{event.details}</p>}\n                </div>\n              </TooltipContent>\n            </Tooltip>\n          );\n        })}\n\n        {/* Zafra dividers */}\n        <div className=\"absolute top-0 w-full h-full pointer-events-none\">\n          <div className=\"absolute left-1/2 top-0 w-0.5 h-full bg-border\"></div>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}","size_bytes":4966},"client/src/components/TimelineModal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport Timeline from \"./Timeline\";\nimport { Chacra, Event, Zafra } from \"@shared/schema\";\nimport { ChevronLeft, ChevronRight, ZoomIn, ZoomOut } from \"lucide-react\";\n\ninterface TimelineModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  chacra: Chacra | null;\n  events: Event[];\n  zafras: Zafra[];\n}\n\nexport default function TimelineModal({ isOpen, onClose, chacra, events, zafras }: TimelineModalProps) {\n  const [timelineOffset, setTimelineOffset] = useState(0);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const timelineRef = useRef<HTMLDivElement>(null);\n\n  if (!chacra) return null;\n\n  const chacraEvents = events.filter(event => event.chacraId === chacra.id);\n  const chacraZafras = zafras.filter(zafra => zafra.chacraId === chacra.id);\n\n  const moveTimeline = (direction: 'left' | 'right') => {\n    const step = 100;\n    setTimelineOffset(prev => {\n      const newOffset = direction === 'left' ? prev - step : prev + step;\n      console.log(`Timeline moved ${direction}, new offset: ${newOffset}`);\n      return newOffset;\n    });\n  };\n\n  const handleZoom = (direction: 'in' | 'out') => {\n    setZoomLevel(prev => {\n      const newZoom = direction === 'in' ? Math.min(prev * 1.2, 3) : Math.max(prev / 1.2, 0.5);\n      console.log(`Timeline zoomed ${direction}, new zoom: ${newZoom}`);\n      return newZoom;\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl w-full max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div>\n              <span>Línea de Tiempo - {chacra.name}</span>\n              <p className=\"text-sm text-muted-foreground font-normal mt-1\">\n                {chacra.area} ha • {chacra.establishmentName} • {chacra.regime}\n              </p>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Timeline Controls */}\n          <div className=\"flex items-center justify-between bg-muted/50 p-3 rounded-md\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => moveTimeline('left')}\n                data-testid=\"button-move-left\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => moveTimeline('right')}\n                data-testid=\"button-move-right\"\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm text-muted-foreground px-2\">\n                Mover línea de tiempo\n              </span>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleZoom('out')}\n                data-testid=\"button-zoom-out\"\n              >\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm text-muted-foreground px-2\">\n                {Math.round(zoomLevel * 100)}%\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleZoom('in')}\n                data-testid=\"button-zoom-in\"\n              >\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Detailed Timeline */}\n          <div \n            ref={timelineRef}\n            className=\"relative overflow-hidden border border-border rounded-md\"\n            style={{\n              transform: `translateX(${timelineOffset}px) scale(${zoomLevel})`,\n              transformOrigin: 'left center',\n              transition: 'transform 0.3s ease'\n            }}\n          >\n            <Timeline \n              events={chacraEvents}\n              zafras={chacraZafras}\n              monthsToShow={12}\n              isCompact={false}\n              onEventClick={(event) => console.log('Detailed event clicked:', event)}\n            />\n          </div>\n\n          {/* Event Legend */}\n          <div className=\"bg-muted/30 p-4 rounded-md\">\n            <h4 className=\"font-medium text-foreground mb-3\">Tipos de Eventos</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-sm\">\n              {[\n                { type: 'laboreo', icon: '🚜', color: 'bg-orange-500' },\n                { type: 'fertilización', icon: '🌱', color: 'bg-yellow-500' },\n                { type: 'siembra', icon: '🌾', color: 'bg-green-600' },\n                { type: 'emergencia', icon: '🌱', color: 'bg-green-400' },\n                { type: 'inundación', icon: '💧', color: 'bg-blue-500' },\n                { type: 'aplicación', icon: '💊', color: 'bg-purple-500' },\n                { type: 'drenado', icon: '🌊', color: 'bg-blue-300' },\n                { type: 'cosecha', icon: '✂️', color: 'bg-amber-600' }\n              ].map((item) => (\n                <div key={item.type} className=\"flex items-center space-x-2\">\n                  <div className={`w-4 h-4 rounded-full ${item.color} flex items-center justify-center text-xs`}>\n                    <span className=\"text-white\">{item.icon}</span>\n                  </div>\n                  <span className=\"text-muted-foreground capitalize\">{item.type}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Event Summary */}\n          <div className=\"bg-card border border-border p-4 rounded-md\">\n            <h4 className=\"font-medium text-foreground mb-3\">\n              Resumen de Eventos ({chacraEvents.length})\n            </h4>\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n              {chacraEvents\n                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n                .map((event) => (\n                <div key={event.id} className=\"flex items-center justify-between py-2 border-b border-border/50 last:border-0\">\n                  <div className=\"flex items-center space-x-3\">\n                    <span className=\"text-lg\">\n                      {({ laboreo: '🚜', fertilización: '🌱', siembra: '🌾', emergencia: '🌱', inundación: '💧', aplicación: '💊', drenado: '🌊', cosecha: '✂️' } as any)[event.type] || '📅'}\n                    </span>\n                    <div>\n                      <p className=\"font-medium text-sm capitalize\">{event.type}</p>\n                      {event.details && <p className=\"text-xs text-muted-foreground\">{event.details}</p>}\n                    </div>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {new Date(event.date).toLocaleDateString('es-ES')}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7297},"client/src/components/TimelineRow.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Timeline from \"./Timeline\";\nimport { Chacra, Event, Zafra } from \"@shared/schema\";\nimport { Eye } from \"lucide-react\";\n\ninterface TimelineRowProps {\n  chacra: Chacra;\n  events: Event[];\n  zafras: Zafra[];\n  onViewDetails: (chacra: Chacra) => void;\n}\n\nconst regimeColors = {\n  \"propiedad\": \"bg-primary text-primary-foreground\",\n  \"arrendamiento\": \"bg-secondary text-secondary-foreground\", \n  \"gestionando para terceros\": \"bg-accent text-accent-foreground\"\n};\n\nexport default function TimelineRow({ chacra, events, zafras, onViewDetails }: TimelineRowProps) {\n  const chacraEvents = events.filter(event => event.chacraId === chacra.id);\n  const chacraZafras = zafras.filter(zafra => zafra.chacraId === chacra.id);\n\n  return (\n    <div className=\"flex items-center space-x-4 p-4 border border-border rounded-md bg-card hover:bg-muted/50 transition-colors\">\n      {/* Chacra Info */}\n      <div className=\"min-w-0 flex-1 max-w-xs\">\n        <div className=\"space-y-2\">\n          <div>\n            <h4 className=\"font-medium text-foreground truncate\">{chacra.name}</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {chacra.area} ha • {chacra.establishmentName}\n            </p>\n          </div>\n          <Badge \n            className={regimeColors[chacra.regime as keyof typeof regimeColors]}\n            variant=\"secondary\"\n          >\n            {chacra.regime}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Timeline */}\n      <div className=\"flex-1 min-w-0\">\n        <Timeline \n          events={chacraEvents}\n          zafras={chacraZafras}\n          isCompact={true}\n          onEventClick={(event) => console.log('Event clicked:', event)}\n        />\n      </div>\n\n      {/* View Details Button */}\n      <div className=\"flex-shrink-0\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => {\n            onViewDetails(chacra);\n            console.log('View details clicked for chacra:', chacra.name);\n          }}\n          data-testid={`button-view-details-${chacra.id}`}\n        >\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Ver Detalles\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":2312},"client/src/components/TransferModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowRightLeft, AlertTriangle, CheckCircle, Calculator, History, Award } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Silo, RiceBatch } from \"@shared/schema\";\n\nconst transferFormSchema = z.object({\n  transferType: z.enum([\"silo_to_silo\", \"silo_to_sale\"]),\n  targetSiloId: z.string().optional(),\n  saleOrderId: z.string().optional(),\n  amount: z.string().min(1, \"Cantidad es requerida\"),\n  notes: z.string().optional(),\n}).refine((data) => {\n  if (data.transferType === \"silo_to_silo\" && !data.targetSiloId) {\n    return false;\n  }\n  if (data.transferType === \"silo_to_sale\" && !data.saleOrderId) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Debe seleccionar destino válido según el tipo de trasiego\",\n  path: [\"targetSiloId\"]\n});\n\ntype TransferFormValues = z.infer<typeof transferFormSchema>;\n\ninterface TransferModalProps {\n  silo: Silo;\n  batches: RiceBatch[];\n  transferLogic: \"proportional_mix\" | \"fifo_layers\";\n  availableSilos?: Silo[];\n  onTransferComplete?: () => void;\n}\n\nexport default function TransferModal({ \n  silo, \n  batches, \n  transferLogic, \n  availableSilos = [], \n  onTransferComplete \n}: TransferModalProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<TransferFormValues>({\n    resolver: zodResolver(transferFormSchema),\n    defaultValues: {\n      transferType: \"silo_to_silo\",\n      targetSiloId: \"\",\n      saleOrderId: \"\",\n      amount: \"\",\n      notes: \"\",\n    },\n  });\n\n  const transferType = form.watch(\"transferType\");\n  const currentOccupancy = parseFloat(silo.currentOccupancy || \"0\");\n\n  const calculateTransferPreview = (amount: number) => {\n    if (transferLogic === \"proportional_mix\") {\n      const percentage = amount / currentOccupancy;\n      return batches.map(batch => ({\n        ...batch,\n        transferAmount: (parseFloat(batch.tonnage) * percentage).toFixed(2)\n      }));\n    } else {\n      // FIFO - take from oldest layers first\n      const sortedBatches = [...batches].sort((a, b) => a.layerOrder - b.layerOrder);\n      let remainingAmount = amount;\n      return sortedBatches.map(batch => {\n        const batchTonnage = parseFloat(batch.tonnage);\n        const transferAmount = Math.min(remainingAmount, batchTonnage);\n        remainingAmount -= transferAmount;\n        return {\n          ...batch,\n          transferAmount: transferAmount.toFixed(2)\n        };\n      }).filter(batch => parseFloat(batch.transferAmount) > 0);\n    }\n  };\n\n  const onSubmit = async (values: TransferFormValues) => {\n    try {\n      const amount = parseFloat(values.amount);\n      const transferPreview = calculateTransferPreview(amount);\n      \n      // TODO: Implement actual transfer logic\n      console.log(\"Transfer Details:\", {\n        fromSilo: silo.id,\n        transferType: values.transferType,\n        targetSiloId: values.targetSiloId,\n        saleOrderId: values.saleOrderId,\n        totalAmount: amount,\n        transferLogic,\n        batchDetails: transferPreview,\n        notes: values.notes\n      });\n\n      toast({\n        title: \"Trasiego realizado exitosamente\",\n        description: `Se transfirieron ${amount} toneladas del silo ${silo.siloId} usando lógica ${transferLogic === \"proportional_mix\" ? \"proporcional\" : \"FIFO\"}.`,\n      });\n\n      form.reset();\n      setOpen(false);\n      onTransferComplete?.();\n    } catch (error) {\n      toast({\n        title: \"Error en trasiego\",\n        description: \"Ocurrió un error al realizar el trasiego. Intente nuevamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const watchedAmount = form.watch(\"amount\");\n  const transferPreview = watchedAmount ? calculateTransferPreview(parseFloat(watchedAmount) || 0) : [];\n\n  // Sistema de compatibilidad y predicción de calidad\n  const analyzeCompatibility = (targetSiloId?: string) => {\n    if (!targetSiloId || !transferPreview.length) return null;\n    \n    const targetSilo = availableSilos.find(s => s.id === targetSiloId);\n    if (!targetSilo) return null;\n\n    // Mock: obtener lotes existentes del silo destino\n    const existingBatches = [\n      { variety: \"INIA Olimar\", moisture: 13.2, broken: 2.5, certification: \"Convencional\" },\n      { variety: \"El Paso 144\", moisture: 13.8, broken: 3.1, certification: \"Orgánico\" }\n    ];\n    \n    const transferBatches = transferPreview.map(batch => ({\n      variety: batch.variety,\n      moisture: 13.5, // Mock data\n      broken: 2.8,\n      certification: \"Convencional\"\n    }));\n\n    // Verificar compatibilidad de variedades\n    const allVarieties = [...existingBatches.map(b => b.variety), ...transferBatches.map(b => b.variety)];\n    const uniqueVarieties = allVarieties.filter((variety, index) => allVarieties.indexOf(variety) === index);\n    const varietyMix = uniqueVarieties.length > 1;\n\n    // Verificar compatibilidad de certificaciones\n    const allCertifications = [...existingBatches.map(b => b.certification), ...transferBatches.map(b => b.certification)];\n    const uniqueCertifications = allCertifications.filter((cert, index) => allCertifications.indexOf(cert) === index);\n    const certificationConflict = uniqueCertifications.includes(\"Orgánico\") && uniqueCertifications.includes(\"Convencional\");\n\n    // Calcular calidad resultante (promedio ponderado)\n    const totalTonnage = transferPreview.reduce((sum, batch) => sum + parseFloat(batch.transferAmount), 0);\n    const existingTonnage = parseFloat(targetSilo.currentOccupancy || \"0\");\n    const finalTonnage = totalTonnage + existingTonnage;\n    \n    const avgMoisture = finalTonnage > 0 ? \n      ((existingBatches.reduce((sum, b) => sum + b.moisture, 0) * existingTonnage) + \n       (transferBatches.reduce((sum, b) => sum + b.moisture, 0) * totalTonnage)) / finalTonnage : 0;\n    \n    const avgBroken = finalTonnage > 0 ?\n      ((existingBatches.reduce((sum, b) => sum + b.broken, 0) * existingTonnage) + \n       (transferBatches.reduce((sum, b) => sum + b.broken, 0) * totalTonnage)) / finalTonnage : 0;\n\n    // Calcular costos estimados\n    const transferCost = totalTonnage * 2.5; // USD por tonelada\n    const storageCost = totalTonnage * 0.8; // USD por tonelada por mes\n\n    return {\n      varietyMix,\n      certificationConflict,\n      uniqueVarieties,\n      uniqueCertifications,\n      quality: {\n        moisture: avgMoisture.toFixed(1),\n        broken: avgBroken.toFixed(1)\n      },\n      costs: {\n        transfer: transferCost.toFixed(2),\n        storage: storageCost.toFixed(2)\n      },\n      warnings: [\n        ...(varietyMix ? [\"Mezcla de variedades detectada\"] : []),\n        ...(certificationConflict ? [\"ALERTA: Conflicto de certificación Orgánico/Convencional\"] : []),\n        ...(avgMoisture > 14 ? [\"Humedad resultante excede límite recomendado\"] : [])\n      ],\n      recommendations: [\n        ...(varietyMix ? [\"Considere usar silo dedicado para mantener pureza varietal\"] : []),\n        ...(avgBroken > 4 ? [\"Alto porcentaje de granos partidos afectará precio final\"] : [])\n      ]\n    };\n  };\n\n  const targetSiloId = form.watch(\"targetSiloId\");\n  const compatibilityAnalysis = analyzeCompatibility(targetSiloId);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"w-full gap-2\"\n          disabled={batches.length === 0}\n          data-testid={`button-transfer-${silo.id}`}\n        >\n          <ArrowRightLeft className=\"h-4 w-4\" />\n          Trasiego entre Silos\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Trasiego - Silo {silo.siloId}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mb-4 p-3 bg-muted rounded-md text-sm\">\n          <div className=\"font-medium\">Lógica de Trasiego: {transferLogic === \"proportional_mix\" ? \"Mezcla Proporcional\" : \"Manejo por Capas (FIFO)\"}</div>\n          <div className=\"text-muted-foreground\">\n            {transferLogic === \"proportional_mix\" \n              ? \"Se extraerá el mismo porcentaje de cada lote individual\"\n              : \"Los lotes más antiguos (abajo) salen primero\"\n            }\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"transferType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Tipo de Trasiego</FormLabel>\n                  <FormControl>\n                    <RadioGroup\n                      onValueChange={field.onChange}\n                      value={field.value}\n                      className=\"flex space-x-6\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"silo_to_silo\" id=\"silo_to_silo\" />\n                        <Label htmlFor=\"silo_to_silo\">Entre Silos</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"silo_to_sale\" id=\"silo_to_sale\" />\n                        <Label htmlFor=\"silo_to_sale\">Asignar a Venta</Label>\n                      </div>\n                    </RadioGroup>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {transferType === \"silo_to_silo\" && (\n              <FormField\n                control={form.control}\n                name=\"targetSiloId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Silo Destino</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-target-silo\">\n                          <SelectValue placeholder=\"Seleccionar silo destino\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availableSilos\n                          .filter(s => s.id !== silo.id)\n                          .map((targetSilo) => (\n                          <SelectItem key={targetSilo.id} value={targetSilo.id}>\n                            Silo {targetSilo.siloId} - {targetSilo.type} \n                            ({parseFloat(targetSilo.currentOccupancy || \"0\").toLocaleString()}/{parseFloat(targetSilo.maxCapacity || \"0\").toLocaleString()} t)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {transferType === \"silo_to_sale\" && (\n              <FormField\n                control={form.control}\n                name=\"saleOrderId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ID de Orden de Venta</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ej: OV-2024-001\"\n                        {...field}\n                        data-testid=\"input-sale-order-id\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"amount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cantidad a Transferir (toneladas)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0.00\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max={currentOccupancy.toString()}\n                      {...field}\n                      data-testid=\"input-transfer-amount\"\n                    />\n                  </FormControl>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Disponible: {currentOccupancy.toLocaleString()} toneladas\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notas (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Notas adicionales sobre el trasiego...\"\n                      {...field}\n                      data-testid=\"textarea-transfer-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Transfer Preview and Analysis */}\n            {transferPreview.length > 0 && (\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-md p-4 bg-muted/50\">\n                  <h4 className=\"font-medium mb-3\">Vista Previa del Trasiego</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    {transferPreview.map((batch, index) => (\n                      <div key={batch.id} className=\"flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-mono\">{batch.remitoId}</span> - {batch.variety}\n                        </div>\n                        <div className=\"font-medium\">\n                          {parseFloat(batch.transferAmount).toLocaleString()} t\n                        </div>\n                      </div>\n                    ))}\n                    <div className=\"border-t pt-2 flex justify-between font-medium\">\n                      <span>Total:</span>\n                      <span>{transferPreview.reduce((sum, batch) => sum + parseFloat(batch.transferAmount), 0).toLocaleString()} t</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Compatibility Analysis */}\n                {transferType === \"silo_to_silo\" && compatibilityAnalysis && (\n                  <div className=\"border rounded-md p-4\">\n                    <h4 className=\"font-medium mb-3 flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      Análisis de Compatibilidad\n                    </h4>\n                    \n                    {/* Warnings */}\n                    {compatibilityAnalysis.warnings.length > 0 && (\n                      <div className=\"mb-3 space-y-1\">\n                        {compatibilityAnalysis.warnings.map((warning, index) => (\n                          <div key={index} className={`flex items-center gap-2 text-sm ${\n                            warning.includes(\"ALERTA\") ? \"text-red-600\" : \"text-amber-600\"\n                          }`}>\n                            <AlertTriangle className=\"h-3 w-3\" />\n                            <span>{warning}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Quality Prediction */}\n                    <div className=\"grid grid-cols-2 gap-4 mb-3 text-sm\">\n                      <div className=\"bg-background rounded p-2\">\n                        <div className=\"font-medium mb-1 flex items-center gap-1\">\n                          <Calculator className=\"h-3 w-3\" />\n                          Calidad Resultante\n                        </div>\n                        <div>Humedad: {compatibilityAnalysis.quality.moisture}%</div>\n                        <div>Granos partidos: {compatibilityAnalysis.quality.broken}%</div>\n                      </div>\n                      \n                      <div className=\"bg-background rounded p-2\">\n                        <div className=\"font-medium mb-1\">Costos Estimados</div>\n                        <div>Trasiego: ${compatibilityAnalysis.costs.transfer}</div>\n                        <div>Almacenamiento/mes: ${compatibilityAnalysis.costs.storage}</div>\n                      </div>\n                    </div>\n\n                    {/* Varieties and Certifications */}\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <div className=\"font-medium mb-1\">Variedades:</div>\n                        <div className=\"space-y-1\">\n                          {compatibilityAnalysis.uniqueVarieties.map((variety, index) => (\n                            <div key={index} className=\"flex items-center gap-1\">\n                              <Award className=\"h-3 w-3 text-green-600\" />\n                              <span>{variety}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <div className=\"font-medium mb-1\">Certificaciones:</div>\n                        <div className=\"space-y-1\">\n                          {compatibilityAnalysis.uniqueCertifications.map((cert, index) => (\n                            <div key={index} className={`flex items-center gap-1 ${\n                              compatibilityAnalysis.certificationConflict ? \"text-red-600\" : \"\"\n                            }`}>\n                              {compatibilityAnalysis.certificationConflict ? (\n                                <AlertTriangle className=\"h-3 w-3\" />\n                              ) : (\n                                <CheckCircle className=\"h-3 w-3 text-green-600\" />\n                              )}\n                              <span>{cert}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Recommendations */}\n                    {compatibilityAnalysis.recommendations.length > 0 && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <div className=\"font-medium mb-2 text-sm\">Recomendaciones:</div>\n                        <div className=\"space-y-1\">\n                          {compatibilityAnalysis.recommendations.map((rec, index) => (\n                            <div key={index} className=\"flex items-start gap-2 text-sm text-blue-600\">\n                              <CheckCircle className=\"h-3 w-3 mt-0.5\" />\n                              <span>{rec}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-transfer\"\n              >\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={form.formState.isSubmitting}\n                data-testid=\"button-submit-transfer\"\n              >\n                {form.formState.isSubmitting ? \"Procesando...\" : \"Realizar Trasiego\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20341},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport TabNavigation from \"@/components/TabNavigation\";\nimport MillManagement from \"@/components/MillManagement\";\nimport ChacrasManagementProductor from \"@/components/ChacrasManagementProductor\";\nimport ChacrasManagementMolino from \"@/components/ChacrasManagementMolino\";\nimport EventsManagementProductor from \"@/components/EventsManagementProductor\";\nimport EventsManagementMolino from \"@/components/EventsManagementMolino\";\nimport CosechaManagementProductor from \"@/components/CosechaManagementProductor\";\nimport CosechaManagementMolino from \"@/components/CosechaManagementMolino\";\nimport TrazabilidadManagementProductor from \"@/components/TrazabilidadManagementProductor\";\nimport TrazabilidadManagementMolino from \"@/components/TrazabilidadManagementMolino\";\nimport EmptyStateCard from \"@/components/EmptyStateCard\";\nimport { useUser } from \"@/contexts/UserContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, Users } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [activeTab, setActiveTab] = useState(\"principal\");\n  const { isProductor, isMolino, currentUser } = useUser();\n\n  const tabs = [\n    { id: \"principal\", label: \"Principal\" },\n    { id: \"chacras\", label: \"Gestión de Chacras y Polígonos\" },\n    { id: \"eventos\", label: \"Eventos\" },\n    { id: \"cosecha\", label: \"Cosecha\" },\n    { id: \"trazabilidad\", label: \"Trazabilidad\" },\n  ];\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"principal\":\n        if (isProductor) {\n          return (\n            <div className=\"max-w-4xl\">\n              <MillManagement />\n            </div>\n          );\n        } else {\n          // Vista para usuarios de molino\n          return (\n            <div className=\"max-w-4xl space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Building2 className=\"h-5 w-5 text-primary\" />\n                    Panel de Molino\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Como trabajador de molino, aquí puedes gestionar las chacras y eventos de los productores asociados según los permisos otorgados.\n                  </div>\n                  \n                  <div className=\"border border-muted rounded-lg p-4\">\n                    <h3 className=\"font-medium text-sm mb-3 flex items-center gap-2\">\n                      <Users className=\"h-4 w-4\" />\n                      Productores Asociados\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between p-2 bg-muted/30 rounded\">\n                        <div>\n                          <div className=\"font-medium text-sm\">Juan Carlos Rodríguez</div>\n                          <div className=\"text-xs text-muted-foreground\">3 establecimientos • Acceso: Trazabilidad + Cosecha</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between p-2 bg-muted/30 rounded\">\n                        <div>\n                          <div className=\"font-medium text-sm\">Pedro Martínez</div>\n                          <div className=\"text-xs text-muted-foreground\">1 establecimiento • Acceso: Administración completa</div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between p-2 bg-muted/30 rounded\">\n                        <div>\n                          <div className=\"font-medium text-sm\">Ana Fernández</div>\n                          <div className=\"text-xs text-muted-foreground\">2 establecimientos • Acceso: Solo trazabilidad</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground italic\">\n                    Nota: Esta es una vista mock de demostración. En la aplicación real, aquí se mostrarían los productores asociados y sus permisos.\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          );\n        }\n      case \"chacras\":\n        return (\n          <div className=\"max-w-6xl\">\n            {isProductor ? <ChacrasManagementProductor /> : <ChacrasManagementMolino />}\n          </div>\n        );\n      case \"eventos\":\n        return (\n          <div className=\"max-w-7xl\">\n            {isProductor ? <EventsManagementProductor /> : <EventsManagementMolino />}\n          </div>\n        );\n      case \"cosecha\":\n        return (\n          <div className=\"max-w-7xl\">\n            {isProductor ? <CosechaManagementProductor /> : <CosechaManagementMolino />}\n          </div>\n        );\n      case \"trazabilidad\":\n        return (\n          <div className=\"max-w-7xl\">\n            {isProductor ? <TrazabilidadManagementProductor /> : <TrazabilidadManagementMolino />}\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <TabNavigation\n        tabs={tabs}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n      />\n      <main className=\"p-6\">\n        {renderTabContent()}\n      </main>\n    </div>\n  );\n}","size_bytes":5543},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/ChacrasManagement.tsx":{"content":"import ChacrasManagement from \"../ChacrasManagement\";\n\nexport default function ChacrasManagementExample() {\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <ChacrasManagement />\n    </div>\n  );\n}","size_bytes":200},"client/src/components/examples/ChacrasTable.tsx":{"content":"import ChacrasTable from \"../ChacrasTable\";\nimport { Chacra } from \"@shared/schema\";\n\nexport default function ChacrasTableExample() {\n  // todo: remove mock functionality - comprehensive mock data with all options\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"gestionando para terceros\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"5\",\n      name: \"Loma Alta\",\n      area: \"156.3\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"6\",\n      name: \"Campo Nuevo\",\n      area: \"92.1\",\n      regime: \"gestionando para terceros\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"7\",\n      name: \"Chacra Central\",\n      area: \"178.9\",\n      regime: \"propiedad\", \n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <ChacrasTable chacras={mockChacras} />\n    </div>\n  );\n}","size_bytes":1593},"client/src/components/examples/EmptyStateCard.tsx":{"content":"import EmptyStateCard from \"../EmptyStateCard\";\n\nexport default function EmptyStateCardExample() {\n  return (\n    <div className=\"p-6 max-w-md\">\n      <EmptyStateCard\n        title=\"Contenido en Desarrollo\"\n        description=\"Esta sección estará disponible próximamente. Actualmente nos enfocamos en la funcionalidad principal de gestión de molinos.\"\n      />\n    </div>\n  );\n}","size_bytes":383},"client/src/components/examples/EventRegistrationForm.tsx":{"content":"import EventRegistrationForm from \"../EventRegistrationForm\";\nimport { Chacra } from \"@shared/schema\";\n\nexport default function EventRegistrationFormExample() {\n  // todo: remove mock functionality - sample chacras for form\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\",\n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"gestionando para terceros\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    }\n  ];\n\n  const handleEventSubmit = (data: any) => {\n    console.log(\"Event registration submitted:\", data);\n    alert(\"Evento registrado exitosamente!\");\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <EventRegistrationForm \n        onSubmit={handleEventSubmit}\n      />\n    </div>\n  );\n}","size_bytes":1083},"client/src/components/examples/EventsFilters.tsx":{"content":"import { useState } from \"react\";\nimport EventsFilters, { EventFilters } from \"../EventsFilters\";\n\nexport default function EventsFiltersExample() {\n  const [filters, setFilters] = useState<EventFilters>({\n    establishment: \"all\",\n    zafra: \"all\",\n    regime: \"all\",\n    type: \"all\"\n  });\n\n  const handleFilterChange = (newFilters: EventFilters) => {\n    setFilters(newFilters);\n    console.log(\"Filters changed:\", newFilters);\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <EventsFilters onFilterChange={handleFilterChange} />\n      <div className=\"mt-4 p-4 bg-muted rounded-md\">\n        <h4 className=\"font-medium mb-2\">Estado actual de filtros:</h4>\n        <pre className=\"text-sm text-muted-foreground\">\n          {JSON.stringify(filters, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}","size_bytes":813},"client/src/components/examples/EventsManagement.tsx":{"content":"import EventsManagement from \"../EventsManagement\";\n\nexport default function EventsManagementExample() {\n  return (\n    <div className=\"p-6 max-w-7xl\">\n      <EventsManagement />\n    </div>\n  );\n}","size_bytes":196},"client/src/components/examples/Header.tsx":{"content":"import Header from \"../Header\";\n\nexport default function HeaderExample() {\n  return (\n    <div className=\"w-full\">\n      <Header />\n    </div>\n  );\n}","size_bytes":149},"client/src/components/examples/MapTabs.tsx":{"content":"import MapTabs from \"../MapTabs\";\n\nexport default function MapTabsExample() {\n  const establishments = [\n    { id: \"1\", name: \"La Juanita\" },\n    { id: \"2\", name: \"Don Timoteo\" },\n  ];\n\n  const handleAddEstablishment = () => {\n    console.log(\"Adding new establishment\");\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <MapTabs \n        establishments={establishments}\n        onAddEstablishment={handleAddEstablishment}\n      />\n    </div>\n  );\n}","size_bytes":459},"client/src/components/examples/MillManagement.tsx":{"content":"import MillManagement from \"../MillManagement\";\n\nexport default function MillManagementExample() {\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <MillManagement />\n    </div>\n  );\n}","size_bytes":188},"client/src/components/examples/MillRow.tsx":{"content":"import { useState } from \"react\";\nimport MillRow, { Mill } from \"../MillRow\";\n\nexport default function MillRowExample() {\n  const [mill, setMill] = useState<Mill>({\n    id: \"1\",\n    name: \"Casarone\",\n    shareFieldManagement: false,\n    shareHarvestManagement: true,\n    shareTraceabilityInfo: false,\n  });\n\n  const availableMills = [\"Casarone\", \"Dambo\", \"Saman\", \"Arrozal 33\"];\n\n  const handleUpdate = (updatedMill: Mill) => {\n    setMill(updatedMill);\n    console.log(\"Mill updated:\", updatedMill);\n  };\n\n  const handleDelete = (millId: string) => {\n    console.log(\"Delete mill:\", millId);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <MillRow\n        mill={mill}\n        availableMills={availableMills}\n        onUpdate={handleUpdate}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n}","size_bytes":811},"client/src/components/examples/TabNavigation.tsx":{"content":"import { useState } from \"react\";\nimport TabNavigation from \"../TabNavigation\";\n\nexport default function TabNavigationExample() {\n  const [activeTab, setActiveTab] = useState(\"principal\");\n\n  const tabs = [\n    { id: \"principal\", label: \"Principal\" },\n    { id: \"chacras\", label: \"Gestión de Chacras y Polígonos\" },\n    { id: \"eventos\", label: \"Eventos\" },\n    { id: \"cosecha\", label: \"Cosecha\" },\n  ];\n\n  return (\n    <div className=\"w-full\">\n      <TabNavigation\n        tabs={tabs}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n      />\n      <div className=\"p-6\">\n        <p className=\"text-muted-foreground\">\n          Contenido de la pestaña: {tabs.find(t => t.id === activeTab)?.label}\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":758},"client/src/components/examples/Timeline.tsx":{"content":"import Timeline from \"../Timeline\";\nimport { Event, Zafra } from \"@shared/schema\";\n\nexport default function TimelineExample() {\n  // todo: remove mock functionality - sample timeline data\n  const mockEvents: Event[] = [\n    {\n      id: \"e1\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"laboreo\",\n      date: \"2024-09-15\",\n      details: \"Arado y rastreado\",\n      notes: \"Preparación del suelo\"\n    },\n    {\n      id: \"e2\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"fertilización\",\n      date: \"2024-10-05\",\n      details: \"Urea, 80 kg/ha\",\n      notes: \"Fertilización base\"\n    },\n    {\n      id: \"e3\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"siembra\",\n      date: \"2024-10-20\",\n      details: \"INIA Olimar, 160 kg/ha\",\n      notes: \"Siembra directa\"\n    },\n    {\n      id: \"e4\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"inundación\",\n      date: \"2024-11-15\",\n      details: \"Lámina de 10cm\",\n      notes: \"Inicio fase acuática\"\n    }\n  ];\n\n  const mockZafras: Zafra[] = [\n    {\n      id: \"z1\",\n      chacraId: \"1\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\",\n      type: \"arroz\",\n      variety: \"INIA Olimar\",\n      waterLevel: \"10cm\",\n      notes: \"Zafra actual\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h3 className=\"font-semibold mb-2\">Timeline Compacta</h3>\n        <Timeline\n          events={mockEvents}\n          zafras={mockZafras}\n          isCompact={true}\n          onEventClick={(event) => console.log('Compact timeline event:', event)}\n        />\n      </div>\n      \n      <div>\n        <h3 className=\"font-semibold mb-2\">Timeline Detallada</h3>\n        <Timeline\n          events={mockEvents}\n          zafras={mockZafras}\n          monthsToShow={8}\n          isCompact={false}\n          onEventClick={(event) => console.log('Detailed timeline event:', event)}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1932},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/contexts/UserContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\nexport type UserType = \"productor\" | \"molino\";\n\nexport interface MockUser {\n  id: string;\n  name: string;\n  email: string;\n  initials: string;\n  type: UserType;\n  organization?: string;\n}\n\ninterface UserContextType {\n  currentUser: MockUser;\n  setCurrentUser: (user: MockUser) => void;\n  isProductor: boolean;\n  isMolino: boolean;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\n// Mock users\nexport const MOCK_USERS: Record<string, MockUser> = {\n  productor: {\n    id: \"1\",\n    name: \"Juan Carlos Rodríguez\",\n    email: \"juan.rodriguez@example.com\",\n    initials: \"JR\",\n    type: \"productor\"\n  },\n  molino: {\n    id: \"2\",\n    name: \"María González\",\n    email: \"maria.gonzalez@molinolospinos.com\",\n    initials: \"MG\",\n    type: \"molino\",\n    organization: \"Molino Los Pinos\"\n  }\n};\n\nexport function UserProvider({ children }: { children: ReactNode }) {\n  const [currentUser, setCurrentUser] = useState<MockUser>(MOCK_USERS.productor);\n\n  const isProductor = currentUser.type === \"productor\";\n  const isMolino = currentUser.type === \"molino\";\n\n  return (\n    <UserContext.Provider value={{ currentUser, setCurrentUser, isProductor, isMolino }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUser() {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n}\n","size_bytes":1498},"client/src/components/ChacrasManagementMolino.tsx":{"content":"import { useState } from \"react\";\nimport MapTabs from \"./MapTabs\";\nimport ChacrasTable from \"./ChacrasTable\";\nimport { Chacra, Establishment } from \"@shared/schema\";\n\nexport default function ChacrasManagementMolino() {\n  // todo: remove mock functionality - comprehensive mock data\n  const [establishments, setEstablishments] = useState<Establishment[]>([\n    { \n      id: \"1\", \n      name: \"La Juanita\",\n      address: \"Ruta 8 Km 380\",\n      phone: \"099 123 456\",\n      owner: \"Juan Carlos Rodríguez\",\n      rut: \"21.456.789-0\",\n      latitude: \"-32.3054\",\n      longitude: \"-58.0836\",\n      referenceCoordinates: \"-32.3054, -58.0836\",\n      adminEmail: null\n    },\n    { \n      id: \"2\", \n      name: \"Don Timoteo\",\n      address: \"Ruta 7 Km 125, Treinta y Tres\",\n      phone: \"099 987 654\",\n      owner: \"Juan Carlos Rodríguez\",\n      rut: \"21.456.789-0\",\n      latitude: \"-33.2341\",\n      longitude: \"-54.3872\",\n      referenceCoordinates: \"-33.2341, -54.3872\",\n      adminEmail: null\n    },\n    { \n      id: \"3\", \n      name: \"Los Pinos\",\n      address: \"Parque Industrial Ruta 5 Km 280, Durazno\",\n      phone: \"099 555 777\",\n      owner: \"Molino Los Pinos S.A.\",\n      rut: \"21.789.456-0\",\n      latitude: \"-33.3856\",\n      longitude: \"-56.5242\",\n      referenceCoordinates: \"-33.3856, -56.5242\",\n      adminEmail: null\n    },\n  ]);\n\n  // IDs de establecimientos compartidos por productores (no son del molino)\n  const sharedEstablishmentIds = [\"1\", \"2\"];\n\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"propiedad\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"5\",\n      name: \"Loma Alta\",\n      area: \"156.3\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"6\",\n      name: \"Campo Nuevo\",\n      area: \"92.1\",\n      regime: \"propiedad\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"7\",\n      name: \"Chacra Central\",\n      area: \"178.9\",\n      regime: \"propiedad\", \n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"8\",\n      name: \"Sector Norte\",\n      area: \"145.3\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"9\",\n      name: \"Parcela Industrial A\",\n      area: \"98.7\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"10\",\n      name: \"Zona de Almacenamiento\",\n      area: \"112.4\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"11\",\n      name: \"Campo Experimental\",\n      area: \"87.6\",\n      regime: \"arrendamiento\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"12\",\n      name: \"Predio Auxiliar\",\n      area: \"134.2\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    }\n  ];\n\n  const handleAddEstablishment = (newEstablishment: Establishment) => {\n    setEstablishments(prev => [...prev, newEstablishment]);\n  };\n  \n  const handleUpdateEstablishment = (updatedEstablishment: Establishment) => {\n    setEstablishments(prev => \n      prev.map(est => \n        est.id === updatedEstablishment.id ? updatedEstablishment : est\n      )\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Chacras y Polígonos\n        </h2>\n        <MapTabs \n          establishments={establishments}\n          onAddEstablishment={handleAddEstablishment}\n          onUpdateEstablishment={handleUpdateEstablishment}\n          sharedEstablishmentIds={sharedEstablishmentIds}\n        />\n      </div>\n      \n      <ChacrasTable chacras={mockChacras} />\n    </div>\n  );\n}\n","size_bytes":4451},"client/src/components/ChacrasManagementProductor.tsx":{"content":"import { useState } from \"react\";\nimport MapTabs from \"./MapTabs\";\nimport ChacrasTable from \"./ChacrasTable\";\nimport { Chacra, Establishment } from \"@shared/schema\";\n\nexport default function ChacrasManagementProductor() {\n  // todo: remove mock functionality - comprehensive mock data\n  const [establishments, setEstablishments] = useState<Establishment[]>([\n    { \n      id: \"1\", \n      name: \"La Juanita\",\n      address: \"Ruta 8 Km 380\",\n      phone: \"099 123 456\",\n      owner: \"Juan Carlos Rodríguez\",\n      rut: \"21.456.789-0\",\n      latitude: \"-32.3054\",\n      longitude: \"-58.0836\",\n      referenceCoordinates: \"-32.3054, -58.0836\",\n      adminEmail: null\n    },\n    { \n      id: \"2\", \n      name: \"Don Timoteo\",\n      address: \"Ruta 7 Km 125, Treinta y Tres\",\n      phone: \"099 987 654\",\n      owner: \"Juan Carlos Rodríguez\",\n      rut: \"21.456.789-0\",\n      latitude: \"-33.2341\",\n      longitude: \"-54.3872\",\n      referenceCoordinates: \"-33.2341, -54.3872\",\n      adminEmail: null\n    },\n  ]);\n\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"propiedad\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"5\",\n      name: \"Loma Alta\",\n      area: \"156.3\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"6\",\n      name: \"Campo Nuevo\",\n      area: \"92.1\",\n      regime: \"propiedad\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"7\",\n      name: \"Chacra Central\",\n      area: \"178.9\",\n      regime: \"propiedad\", \n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    }\n  ];\n\n  const handleAddEstablishment = (newEstablishment: Establishment) => {\n    setEstablishments(prev => [...prev, newEstablishment]);\n  };\n  \n  const handleUpdateEstablishment = (updatedEstablishment: Establishment) => {\n    setEstablishments(prev => \n      prev.map(est => \n        est.id === updatedEstablishment.id ? updatedEstablishment : est\n      )\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Chacras y Polígonos\n        </h2>\n        <MapTabs \n          establishments={establishments}\n          onAddEstablishment={handleAddEstablishment}\n          onUpdateEstablishment={handleUpdateEstablishment}\n          showAdminAssignment={false}\n        />\n      </div>\n      \n      <ChacrasTable chacras={mockChacras} />\n    </div>\n  );\n}\n","size_bytes":3097},"client/src/components/CosechaManagementMolino.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport RemitoGenerationForm, { RemitoFormData, mockIndustrialPlants } from \"./RemitoGenerationForm\";\nimport CosechaTabs from \"./CosechaTabs\";\nimport { Chacra, Remito } from \"@shared/schema\";\n\nexport default function CosechaManagementMolino() {\n  const [selectedChacras, setSelectedChacras] = useState<string[]>([]);\n  const [remitos, setRemitos] = useState<Remito[]>([]);\n\n  // todo: remove mock functionality - comprehensive mock data for chacras\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"gestionando para terceros\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"5\",\n      name: \"Loma Alta\",\n      area: \"156.3\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"6\",\n      name: \"Campo Nuevo\",\n      area: \"92.1\",\n      regime: \"gestionando para terceros\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"7\",\n      name: \"Chacra Central\",\n      area: \"178.9\",\n      regime: \"propiedad\", \n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    }\n  ];\n\n  // todo: remove mock functionality - sample remitos with different statuses\n  const mockRemitos: Remito[] = [\n    {\n      id: \"r1\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      estimatedWeight: 28,\n      trailerPlate: \"SAA 1234\",\n      driverName: \"Carlos González\",\n      driverWhatsapp: \"+59899123456\",\n      industrialPlantId: \"1\",\n      industrialPlantName: \"Planta Arrocera del Este\",\n      destinationSilo: \"Silo A-3\",\n      status: \"descargado\",\n      createdAt: \"2024-09-15T08:00:00.000Z\",\n      departureDateTime: \"2024-09-15T10:30:00.000Z\",\n      arrivalDateTime: \"2024-09-15T14:45:00.000Z\",\n      notes: null\n    },\n    {\n      id: \"r2\",\n      chacraId: \"2\",\n      chacraName: \"Campo Sur\", \n      estimatedWeight: 24,\n      trailerPlate: \"SBB 5678\",\n      driverName: \"Juan Pérez\",\n      driverWhatsapp: \"+59899234567\",\n      industrialPlantId: \"2\",\n      industrialPlantName: \"Molino San Fernando\",\n      destinationSilo: \"Silo B-1\",\n      status: \"en_viaje\",\n      createdAt: \"2024-09-18T09:15:00.000Z\",\n      departureDateTime: \"2024-09-18T11:00:00.000Z\",\n      arrivalDateTime: null,\n      notes: \"Carga completa\"\n    },\n    {\n      id: \"r3\",\n      chacraId: \"3\",\n      chacraName: \"Potrero Este\",\n      estimatedWeight: 33,\n      trailerPlate: \"SCC 9012\",\n      driverName: \"Roberto Silva\",\n      driverWhatsapp: \"+59899345678\",\n      industrialPlantId: \"1\",\n      industrialPlantName: \"Planta Arrocera del Este\",\n      destinationSilo: \"Silo A-5\",\n      status: \"cargandose\",\n      createdAt: \"2024-09-19T07:30:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: null\n    },\n    {\n      id: \"r4\",\n      chacraId: \"4\",\n      chacraName: \"Bajo Inundable\",\n      estimatedWeight: 18,\n      trailerPlate: \"SDD 3456\",\n      driverName: \"Miguel Fernández\",\n      driverWhatsapp: \"+59899456789\",\n      industrialPlantId: \"3\",\n      industrialPlantName: \"Cooperativa Arrocera\",\n      destinationSilo: null,\n      status: \"creado\",\n      createdAt: \"2024-09-19T11:20:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: \"WhatsApp enviado\"\n    },\n    {\n      id: \"r5\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      estimatedWeight: 29,\n      trailerPlate: \"SEE 7890\",\n      driverName: \"Diego Martínez\",\n      driverWhatsapp: \"+59899567890\",\n      industrialPlantId: \"4\",\n      industrialPlantName: \"Planta Industrial del Norte\",\n      destinationSilo: \"Silo C-2\",\n      status: \"descargandose\",\n      createdAt: \"2024-09-19T13:45:00.000Z\",\n      departureDateTime: \"2024-09-19T15:30:00.000Z\",\n      arrivalDateTime: \"2024-09-19T18:15:00.000Z\",\n      notes: null\n    },\n    {\n      id: \"r6\",\n      chacraId: \"5\",\n      chacraName: \"Loma Alta\",\n      estimatedWeight: 22,\n      trailerPlate: \"SFF 2345\",\n      driverName: \"Fernando López\",\n      driverWhatsapp: \"+59899678901\",\n      industrialPlantId: \"2\",\n      industrialPlantName: \"Molino San Fernando\",\n      destinationSilo: \"Silo B-3\",\n      status: \"creandose\",\n      createdAt: \"2024-09-19T16:00:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: null\n    }\n  ];\n\n  // Initialize remitos with mock data on component mount\n  useEffect(() => {\n    setRemitos(mockRemitos);\n  }, []);\n\n  const handleRemitoGeneration = (formData: RemitoFormData) => {\n    const newRemitos: Remito[] = [];\n    const currentTimestamp = new Date().toISOString();\n    \n    // Process each remito row from the form\n    formData.remitoRows.forEach((rowData, rowIndex) => {\n      const plant = mockIndustrialPlants.find(p => p.id === rowData.industrialPlantId);\n      const chacra = rowData.chacraId ? mockChacras.find(c => c.id === rowData.chacraId) : null;\n      \n      // Skip if no chacra selected for this row\n      if (!chacra) return;\n      \n      const newRemito: Remito = {\n        id: `remito-${Date.now()}-${rowData.chacraId}-${rowIndex}`,\n        chacraId: chacra.id,\n        chacraName: chacra.name,\n        estimatedWeight: rowData.estimatedWeight,\n        trailerPlate: rowData.trailerPlate,\n        driverName: rowData.driverName,\n        driverWhatsapp: rowData.driverWhatsapp,\n        industrialPlantId: rowData.industrialPlantId,\n        industrialPlantName: plant?.name || \"Planta no encontrada\",\n        destinationSilo: null,\n        status: \"creandose\",\n        createdAt: currentTimestamp,\n        departureDateTime: null,\n        arrivalDateTime: null,\n        notes: null\n      };\n      newRemitos.push(newRemito);\n    });\n    \n    // Add new remitos to state\n    setRemitos(prev => [...newRemitos, ...prev]);\n    \n    // Clear selections after successful generation\n    setSelectedChacras([]);\n    alert(`${newRemitos.length} remito${newRemitos.length > 1 ? 's' : ''} generado${newRemitos.length > 1 ? 's' : ''} exitosamente!`);\n  };\n\n  const handleChacraSelectionChange = (chacraId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedChacras(prev => [...prev, chacraId]);\n    } else {\n      setSelectedChacras(prev => prev.filter(id => id !== chacraId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Cosecha y Remitos\n        </h2>\n        \n        {/* Remito Generation Form */}\n        <RemitoGenerationForm \n          onSubmit={handleRemitoGeneration}\n          selectedChacras={selectedChacras}\n          chacras={mockChacras}\n        />\n      </div>\n      \n      <CosechaTabs\n        chacras={mockChacras}\n        remitos={remitos}\n        selectedChacras={selectedChacras}\n        onChacraSelectionChange={handleChacraSelectionChange}\n      />\n    </div>\n  );\n}\n","size_bytes":7457},"client/src/components/CosechaManagementProductor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport RemitoGenerationForm, { RemitoFormData, mockIndustrialPlants } from \"./RemitoGenerationForm\";\nimport CosechaTabs from \"./CosechaTabs\";\nimport { Chacra, Remito } from \"@shared/schema\";\n\nexport default function CosechaManagementProductor() {\n  const [selectedChacras, setSelectedChacras] = useState<string[]>([]);\n  const [remitos, setRemitos] = useState<Remito[]>([]);\n\n  // todo: remove mock functionality - comprehensive mock data for chacras\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"gestionando para terceros\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"5\",\n      name: \"Loma Alta\",\n      area: \"156.3\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"6\",\n      name: \"Campo Nuevo\",\n      area: \"92.1\",\n      regime: \"gestionando para terceros\",\n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"7\",\n      name: \"Chacra Central\",\n      area: \"178.9\",\n      regime: \"propiedad\", \n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    }\n  ];\n\n  // todo: remove mock functionality - sample remitos with different statuses\n  const mockRemitos: Remito[] = [\n    {\n      id: \"r1\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      estimatedWeight: 28,\n      trailerPlate: \"SAA 1234\",\n      driverName: \"Carlos González\",\n      driverWhatsapp: \"+59899123456\",\n      industrialPlantId: \"1\",\n      industrialPlantName: \"Planta Arrocera del Este\",\n      destinationSilo: \"Silo A-3\",\n      status: \"descargado\",\n      createdAt: \"2024-09-15T08:00:00.000Z\",\n      departureDateTime: \"2024-09-15T10:30:00.000Z\",\n      arrivalDateTime: \"2024-09-15T14:45:00.000Z\",\n      notes: null\n    },\n    {\n      id: \"r2\",\n      chacraId: \"2\",\n      chacraName: \"Campo Sur\", \n      estimatedWeight: 24,\n      trailerPlate: \"SBB 5678\",\n      driverName: \"Juan Pérez\",\n      driverWhatsapp: \"+59899234567\",\n      industrialPlantId: \"2\",\n      industrialPlantName: \"Molino San Fernando\",\n      destinationSilo: \"Silo B-1\",\n      status: \"en_viaje\",\n      createdAt: \"2024-09-18T09:15:00.000Z\",\n      departureDateTime: \"2024-09-18T11:00:00.000Z\",\n      arrivalDateTime: null,\n      notes: \"Carga completa\"\n    },\n    {\n      id: \"r3\",\n      chacraId: \"3\",\n      chacraName: \"Potrero Este\",\n      estimatedWeight: 33,\n      trailerPlate: \"SCC 9012\",\n      driverName: \"Roberto Silva\",\n      driverWhatsapp: \"+59899345678\",\n      industrialPlantId: \"1\",\n      industrialPlantName: \"Planta Arrocera del Este\",\n      destinationSilo: \"Silo A-5\",\n      status: \"cargandose\",\n      createdAt: \"2024-09-19T07:30:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: null\n    },\n    {\n      id: \"r4\",\n      chacraId: \"4\",\n      chacraName: \"Bajo Inundable\",\n      estimatedWeight: 18,\n      trailerPlate: \"SDD 3456\",\n      driverName: \"Miguel Fernández\",\n      driverWhatsapp: \"+59899456789\",\n      industrialPlantId: \"3\",\n      industrialPlantName: \"Cooperativa Arrocera\",\n      destinationSilo: null,\n      status: \"creado\",\n      createdAt: \"2024-09-19T11:20:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: \"WhatsApp enviado\"\n    },\n    {\n      id: \"r5\",\n      chacraId: \"1\",\n      chacraName: \"Chacra Norte\",\n      estimatedWeight: 29,\n      trailerPlate: \"SEE 7890\",\n      driverName: \"Diego Martínez\",\n      driverWhatsapp: \"+59899567890\",\n      industrialPlantId: \"4\",\n      industrialPlantName: \"Planta Industrial del Norte\",\n      destinationSilo: \"Silo C-2\",\n      status: \"descargandose\",\n      createdAt: \"2024-09-19T13:45:00.000Z\",\n      departureDateTime: \"2024-09-19T15:30:00.000Z\",\n      arrivalDateTime: \"2024-09-19T18:15:00.000Z\",\n      notes: null\n    },\n    {\n      id: \"r6\",\n      chacraId: \"5\",\n      chacraName: \"Loma Alta\",\n      estimatedWeight: 22,\n      trailerPlate: \"SFF 2345\",\n      driverName: \"Fernando López\",\n      driverWhatsapp: \"+59899678901\",\n      industrialPlantId: \"2\",\n      industrialPlantName: \"Molino San Fernando\",\n      destinationSilo: \"Silo B-3\",\n      status: \"creandose\",\n      createdAt: \"2024-09-19T16:00:00.000Z\",\n      departureDateTime: null,\n      arrivalDateTime: null,\n      notes: null\n    }\n  ];\n\n  // Initialize remitos with mock data on component mount\n  useEffect(() => {\n    setRemitos(mockRemitos);\n  }, []);\n\n  const handleRemitoGeneration = (formData: RemitoFormData) => {\n    const newRemitos: Remito[] = [];\n    const currentTimestamp = new Date().toISOString();\n    \n    // Process each remito row from the form\n    formData.remitoRows.forEach((rowData, rowIndex) => {\n      const plant = mockIndustrialPlants.find(p => p.id === rowData.industrialPlantId);\n      const chacra = rowData.chacraId ? mockChacras.find(c => c.id === rowData.chacraId) : null;\n      \n      // Skip if no chacra selected for this row\n      if (!chacra) return;\n      \n      const newRemito: Remito = {\n        id: `remito-${Date.now()}-${rowData.chacraId}-${rowIndex}`,\n        chacraId: chacra.id,\n        chacraName: chacra.name,\n        estimatedWeight: rowData.estimatedWeight,\n        trailerPlate: rowData.trailerPlate,\n        driverName: rowData.driverName,\n        driverWhatsapp: rowData.driverWhatsapp,\n        industrialPlantId: rowData.industrialPlantId,\n        industrialPlantName: plant?.name || \"Planta no encontrada\",\n        destinationSilo: null,\n        status: \"creandose\",\n        createdAt: currentTimestamp,\n        departureDateTime: null,\n        arrivalDateTime: null,\n        notes: null\n      };\n      newRemitos.push(newRemito);\n    });\n    \n    // Add new remitos to state\n    setRemitos(prev => [...newRemitos, ...prev]);\n    \n    // Clear selections after successful generation\n    setSelectedChacras([]);\n    alert(`${newRemitos.length} remito${newRemitos.length > 1 ? 's' : ''} generado${newRemitos.length > 1 ? 's' : ''} exitosamente!`);\n  };\n\n  const handleChacraSelectionChange = (chacraId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedChacras(prev => [...prev, chacraId]);\n    } else {\n      setSelectedChacras(prev => prev.filter(id => id !== chacraId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Cosecha y Remitos\n        </h2>\n        \n        {/* Remito Generation Form */}\n        <RemitoGenerationForm \n          onSubmit={handleRemitoGeneration}\n          selectedChacras={selectedChacras}\n          chacras={mockChacras}\n        />\n      </div>\n      \n      <CosechaTabs\n        chacras={mockChacras}\n        remitos={remitos}\n        selectedChacras={selectedChacras}\n        onChacraSelectionChange={handleChacraSelectionChange}\n      />\n    </div>\n  );\n}\n","size_bytes":7460},"client/src/components/EventsManagementMolino.tsx":{"content":"import { useState } from \"react\";\nimport EventRegistrationForm from \"./EventRegistrationForm\";\nimport EventsFilters, { EventFilters } from \"./EventsFilters\";\nimport EventsTable from \"./EventsTable\";\nimport { Chacra, Event, Zafra } from \"@shared/schema\";\n\nexport default function EventsManagementMolino() {\n  const [filters, setFilters] = useState<EventFilters>({\n    establishment: \"all\",\n    zafra: \"all\",\n    regime: \"all\",\n    type: \"all\"\n  });\n  \n  const [selectedChacras, setSelectedChacras] = useState<string[]>([]);\n\n  // todo: remove mock functionality - comprehensive mock data for events and zafras\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"propiedad\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"8\",\n      name: \"Sector Norte\",\n      area: \"145.3\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"9\",\n      name: \"Parcela Industrial A\",\n      area: \"98.7\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"10\",\n      name: \"Zona de Almacenamiento\",\n      area: \"112.4\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"11\",\n      name: \"Campo Experimental\",\n      area: \"87.6\",\n      regime: \"arrendamiento\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    },\n    {\n      id: \"12\",\n      name: \"Predio Auxiliar\",\n      area: \"134.2\",\n      regime: \"propiedad\",\n      establishmentId: \"3\",\n      establishmentName: \"Los Pinos\"\n    }\n  ];\n\n  const mockZafras: Zafra[] = [\n    {\n      id: \"z1\",\n      chacraId: \"1\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\",\n      type: \"arroz\",\n      variety: \"INIA Olimar\",\n      waterLevel: \"10cm\",\n      notes: \"Zafra actual\"\n    },\n    {\n      id: \"z2\", \n      chacraId: \"2\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\",\n      type: \"pasturas\",\n      variety: \"Festuca y trébol blanco\",\n      waterLevel: null,\n      notes: \"Rotación con pasturas\"\n    },\n    {\n      id: \"z3\",\n      chacraId: \"3\",\n      startDate: \"2024-10-01\", \n      endDate: \"2025-03-31\",\n      type: \"arroz\",\n      variety: \"INIA Merín\",\n      waterLevel: \"12cm\",\n      notes: \"Zafra para terceros\"\n    },\n    {\n      id: \"z4\",\n      chacraId: \"4\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\", \n      type: \"pasturas\",\n      variety: \"Raigrás y lotus\",\n      waterLevel: null,\n      notes: \"Campo de pastoreo\"\n    }\n  ];\n\n  const mockEvents: Event[] = [\n    // Chacra Norte events\n    {\n      id: \"e1\",\n      chacraId: \"1\",\n      zafraId: \"z1\", \n      type: \"laboreo\",\n      date: \"2024-09-15\",\n      details: \"Arado y rastreado\",\n      notes: \"Preparación del suelo\"\n    },\n    {\n      id: \"e2\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"fertilización\", \n      date: \"2024-10-05\",\n      details: \"Urea, 80 kg/ha\",\n      notes: \"Fertilización base\"\n    },\n    {\n      id: \"e3\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"siembra\",\n      date: \"2024-10-20\",\n      details: \"INIA Olimar, 160 kg/ha\",\n      notes: \"Siembra directa\"\n    },\n    {\n      id: \"e4\",\n      chacraId: \"1\", \n      zafraId: \"z1\",\n      type: \"emergencia\",\n      date: \"2024-11-02\",\n      details: \"85% emergencia\",\n      notes: \"Buena implantación\"\n    },\n    {\n      id: \"e5\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"inundación\",\n      date: \"2024-11-15\", \n      details: \"Lámina de 10cm\",\n      notes: \"Inicio fase acuática\"\n    },\n\n    // Campo Sur events  \n    {\n      id: \"e6\",\n      chacraId: \"2\",\n      zafraId: \"z2\",\n      type: \"laboreo\",\n      date: \"2024-09-20\",\n      details: \"Rastra de discos\",\n      notes: \"Preparación para pasturas\"\n    },\n    {\n      id: \"e7\",\n      chacraId: \"2\",\n      zafraId: \"z2\",\n      type: \"siembra\", \n      date: \"2024-10-10\",\n      details: \"Festuca 15kg/ha + Trébol 3kg/ha\",\n      notes: \"Mezcla forrajera\"\n    },\n\n    // Potrero Este events\n    {\n      id: \"e8\", \n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"laboreo\",\n      date: \"2024-09-10\",\n      details: \"Arado y nivelación\",\n      notes: \"Preparación intensiva\"\n    },\n    {\n      id: \"e9\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"fertilización\",\n      date: \"2024-10-01\",\n      details: \"Fosfato DAP, 120 kg/ha\", \n      notes: \"Fertilización de base\"\n    },\n    {\n      id: \"e10\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"siembra\",\n      date: \"2024-10-25\",\n      details: \"INIA Merín, 170 kg/ha\",\n      notes: \"Variedad de alta productividad\"\n    },\n    {\n      id: \"e11\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"aplicación\",\n      date: \"2024-11-20\",\n      details: \"Herbicida post-emergente\",\n      notes: \"Control de malezas\"\n    },\n\n    // Bajo Inundable events\n    {\n      id: \"e12\",\n      chacraId: \"4\",\n      zafraId: \"z4\", \n      type: \"siembra\",\n      date: \"2024-10-05\",\n      details: \"Raigrás 25kg/ha + Lotus 8kg/ha\",\n      notes: \"Pastura de invierno\"\n    }\n  ];\n\n  const handleFilterChange = (newFilters: EventFilters) => {\n    setFilters(newFilters);\n    console.log(\"Filters changed:\", newFilters);\n  };\n\n  const handleEventRegistration = (eventData: any) => {\n    if (selectedChacras.length === 0) {\n      alert(\"Debe seleccionar al menos una chacra en la tabla de abajo\");\n      return;\n    }\n    \n    const eventWithChacras = {\n      ...eventData,\n      selectedChacras\n    };\n    \n    console.log(\"New event registered:\", eventWithChacras);\n    // TODO: Implement actual event creation logic\n    // Clear selections after successful registration\n    setSelectedChacras([]);\n  };\n\n  const handleChacraSelectionChange = (chacraId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedChacras(prev => [...prev, chacraId]);\n    } else {\n      setSelectedChacras(prev => prev.filter(id => id !== chacraId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Eventos y Líneas de Tiempo\n        </h2>\n        \n        {/* Event Registration Form */}\n        <EventRegistrationForm \n          onSubmit={handleEventRegistration}\n        />\n      </div>\n      \n      <div className=\"space-y-6\">\n        <EventsFilters onFilterChange={handleFilterChange} />\n        \n        <EventsTable \n          chacras={mockChacras}\n          events={mockEvents}\n          zafras={mockZafras}\n          filters={filters}\n          selectedChacras={selectedChacras}\n          onChacraSelectionChange={handleChacraSelectionChange}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":7310},"client/src/components/EventsManagementProductor.tsx":{"content":"import { useState } from \"react\";\nimport EventRegistrationForm from \"./EventRegistrationForm\";\nimport EventsFilters, { EventFilters } from \"./EventsFilters\";\nimport EventsTable from \"./EventsTable\";\nimport { Chacra, Event, Zafra } from \"@shared/schema\";\n\nexport default function EventsManagementProductor() {\n  const [filters, setFilters] = useState<EventFilters>({\n    establishment: \"all\",\n    zafra: \"all\",\n    regime: \"all\",\n    type: \"all\"\n  });\n  \n  const [selectedChacras, setSelectedChacras] = useState<string[]>([]);\n\n  // todo: remove mock functionality - comprehensive mock data for events and zafras\n  const mockChacras: Chacra[] = [\n    {\n      id: \"1\",\n      name: \"Chacra Norte\",\n      area: \"125.5\",\n      regime: \"propiedad\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"2\", \n      name: \"Campo Sur\",\n      area: \"89.2\",\n      regime: \"arrendamiento\",\n      establishmentId: \"1\",\n      establishmentName: \"La Juanita\"\n    },\n    {\n      id: \"3\",\n      name: \"Potrero Este\",\n      area: \"203.7\",\n      regime: \"propiedad\", \n      establishmentId: \"2\",\n      establishmentName: \"Don Timoteo\"\n    },\n    {\n      id: \"4\",\n      name: \"Bajo Inundable\",\n      area: \"67.8\",\n      regime: \"propiedad\",\n      establishmentId: \"2\", \n      establishmentName: \"Don Timoteo\"\n    }\n  ];\n\n  const mockZafras: Zafra[] = [\n    {\n      id: \"z1\",\n      chacraId: \"1\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\",\n      type: \"arroz\",\n      variety: \"INIA Olimar\",\n      waterLevel: \"10cm\",\n      notes: \"Zafra actual\"\n    },\n    {\n      id: \"z2\", \n      chacraId: \"2\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\",\n      type: \"pasturas\",\n      variety: \"Festuca y trébol blanco\",\n      waterLevel: null,\n      notes: \"Rotación con pasturas\"\n    },\n    {\n      id: \"z3\",\n      chacraId: \"3\",\n      startDate: \"2024-10-01\", \n      endDate: \"2025-03-31\",\n      type: \"arroz\",\n      variety: \"INIA Merín\",\n      waterLevel: \"12cm\",\n      notes: \"Zafra para terceros\"\n    },\n    {\n      id: \"z4\",\n      chacraId: \"4\",\n      startDate: \"2024-10-01\",\n      endDate: \"2025-03-31\", \n      type: \"pasturas\",\n      variety: \"Raigrás y lotus\",\n      waterLevel: null,\n      notes: \"Campo de pastoreo\"\n    }\n  ];\n\n  const mockEvents: Event[] = [\n    // Chacra Norte events\n    {\n      id: \"e1\",\n      chacraId: \"1\",\n      zafraId: \"z1\", \n      type: \"laboreo\",\n      date: \"2024-09-15\",\n      details: \"Arado y rastreado\",\n      notes: \"Preparación del suelo\"\n    },\n    {\n      id: \"e2\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"fertilización\", \n      date: \"2024-10-05\",\n      details: \"Urea, 80 kg/ha\",\n      notes: \"Fertilización base\"\n    },\n    {\n      id: \"e3\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"siembra\",\n      date: \"2024-10-20\",\n      details: \"INIA Olimar, 160 kg/ha\",\n      notes: \"Siembra directa\"\n    },\n    {\n      id: \"e4\",\n      chacraId: \"1\", \n      zafraId: \"z1\",\n      type: \"emergencia\",\n      date: \"2024-11-02\",\n      details: \"85% emergencia\",\n      notes: \"Buena implantación\"\n    },\n    {\n      id: \"e5\",\n      chacraId: \"1\",\n      zafraId: \"z1\",\n      type: \"inundación\",\n      date: \"2024-11-15\", \n      details: \"Lámina de 10cm\",\n      notes: \"Inicio fase acuática\"\n    },\n\n    // Campo Sur events  \n    {\n      id: \"e6\",\n      chacraId: \"2\",\n      zafraId: \"z2\",\n      type: \"laboreo\",\n      date: \"2024-09-20\",\n      details: \"Rastra de discos\",\n      notes: \"Preparación para pasturas\"\n    },\n    {\n      id: \"e7\",\n      chacraId: \"2\",\n      zafraId: \"z2\",\n      type: \"siembra\", \n      date: \"2024-10-10\",\n      details: \"Festuca 15kg/ha + Trébol 3kg/ha\",\n      notes: \"Mezcla forrajera\"\n    },\n\n    // Potrero Este events\n    {\n      id: \"e8\", \n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"laboreo\",\n      date: \"2024-09-10\",\n      details: \"Arado y nivelación\",\n      notes: \"Preparación intensiva\"\n    },\n    {\n      id: \"e9\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"fertilización\",\n      date: \"2024-10-01\",\n      details: \"Fosfato DAP, 120 kg/ha\", \n      notes: \"Fertilización de base\"\n    },\n    {\n      id: \"e10\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"siembra\",\n      date: \"2024-10-25\",\n      details: \"INIA Merín, 170 kg/ha\",\n      notes: \"Variedad de alta productividad\"\n    },\n    {\n      id: \"e11\",\n      chacraId: \"3\",\n      zafraId: \"z3\",\n      type: \"aplicación\",\n      date: \"2024-11-20\",\n      details: \"Herbicida post-emergente\",\n      notes: \"Control de malezas\"\n    },\n\n    // Bajo Inundable events\n    {\n      id: \"e12\",\n      chacraId: \"4\",\n      zafraId: \"z4\", \n      type: \"siembra\",\n      date: \"2024-10-05\",\n      details: \"Raigrás 25kg/ha + Lotus 8kg/ha\",\n      notes: \"Pastura de invierno\"\n    }\n  ];\n\n  const handleFilterChange = (newFilters: EventFilters) => {\n    setFilters(newFilters);\n    console.log(\"Filters changed:\", newFilters);\n  };\n\n  const handleEventRegistration = (eventData: any) => {\n    if (selectedChacras.length === 0) {\n      alert(\"Debe seleccionar al menos una chacra en la tabla de abajo\");\n      return;\n    }\n    \n    const eventWithChacras = {\n      ...eventData,\n      selectedChacras\n    };\n    \n    console.log(\"New event registered:\", eventWithChacras);\n    // TODO: Implement actual event creation logic\n    // Clear selections after successful registration\n    setSelectedChacras([]);\n  };\n\n  const handleChacraSelectionChange = (chacraId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedChacras(prev => [...prev, chacraId]);\n    } else {\n      setSelectedChacras(prev => prev.filter(id => id !== chacraId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-6\">\n          Gestión de Eventos y Líneas de Tiempo\n        </h2>\n        \n        {/* Event Registration Form */}\n        <EventRegistrationForm \n          onSubmit={handleEventRegistration}\n        />\n      </div>\n      \n      <div className=\"space-y-6\">\n        <EventsFilters onFilterChange={handleFilterChange} />\n        \n        <EventsTable \n          chacras={mockChacras}\n          events={mockEvents}\n          zafras={mockZafras}\n          filters={filters}\n          selectedChacras={selectedChacras}\n          onChacraSelectionChange={handleChacraSelectionChange}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":6436},"client/src/components/TrazabilidadManagementMolino.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Plus, MoreHorizontal, Eye, Edit, X, FileDown } from \"lucide-react\";\nimport { SalesOrder } from \"@shared/schema\";\nimport SalesOrderWizard from \"./SalesOrderWizard\";\n\nexport default function TrazabilidadManagementMolino() {\n  const [selectedOrder, setSelectedOrder] = useState<SalesOrder | null>(null);\n  const [showCreateWizard, setShowCreateWizard] = useState(false);\n  const [showTraceabilityModal, setShowTraceabilityModal] = useState(false);\n\n  // Mock sales orders data - initially load mock data, but allow updates\n  const [salesOrders, setSalesOrders] = useState<SalesOrder[]>([\n    {\n      id: \"so1\",\n      orderNumber: \"OV-2024-001\",\n      clientName: \"Cooperativa Tacuarembó\",\n      destination: \"Montevideo\",\n      totalTonnage: \"500.00\",\n      qualityRequirements: JSON.stringify({\n        variety: \"INIA Olimar\",\n        moisture: \"14%\",\n        purity: \"98%\"\n      }),\n      status: \"En Proceso\",\n      orderDate: \"2024-09-15T10:00:00.000Z\",\n      estimatedDeliveryDate: \"2024-09-25T10:00:00.000Z\",\n      notes: \"Entrega urgente para exportación\",\n      createdAt: \"2024-09-15T10:00:00.000Z\"\n    },\n    {\n      id: \"so2\", \n      orderNumber: \"OV-2024-002\",\n      clientName: \"Molinos del Uruguay SA\",\n      destination: \"Paysandú\",\n      totalTonnage: \"1200.00\",\n      qualityRequirements: JSON.stringify({\n        variety: \"El Paso 144\",\n        moisture: \"13.5%\",\n        purity: \"99%\"\n      }),\n      status: \"Lista\",\n      orderDate: \"2024-09-12T14:30:00.000Z\",\n      estimatedDeliveryDate: \"2024-09-22T14:30:00.000Z\",\n      notes: \"Cliente preferencial\",\n      createdAt: \"2024-09-12T14:30:00.000Z\"\n    },\n    {\n      id: \"so3\",\n      orderNumber: \"OV-2024-003\", \n      clientName: \"Arrocera San José\",\n      destination: \"Canelones\",\n      totalTonnage: \"800.00\",\n      qualityRequirements: JSON.stringify({\n        variety: \"INIA Olimar\",\n        moisture: \"14%\",\n        purity: \"97%\"\n      }),\n      status: \"Virgen\",\n      orderDate: \"2024-09-18T09:15:00.000Z\",\n      estimatedDeliveryDate: \"2024-09-28T09:15:00.000Z\",\n      notes: \"\",\n      createdAt: \"2024-09-18T09:15:00.000Z\"\n    }\n  ]);\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      \"Virgen\": { variant: \"secondary\" as const, className: \"bg-gray-100 text-gray-800\" },\n      \"En Proceso\": { variant: \"default\" as const, className: \"bg-blue-100 text-blue-800\" },\n      \"Lista\": { variant: \"default\" as const, className: \"bg-green-100 text-green-800\" },\n      \"Despachando\": { variant: \"default\" as const, className: \"bg-orange-100 text-orange-800\" },\n      \"Despachada\": { variant: \"default\" as const, className: \"bg-purple-100 text-purple-800\" },\n      \"Rechazada\": { variant: \"destructive\" as const, className: \"bg-red-100 text-red-800\" },\n      \"Cancelada\": { variant: \"outline\" as const, className: \"bg-gray-50 text-gray-600\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig[\"Virgen\"];\n    \n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {status}\n      </Badge>\n    );\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"-\";\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString(\"es-UY\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\"\n      });\n    } catch {\n      return \"-\";\n    }\n  };\n\n  const handleViewTraceability = (order: SalesOrder) => {\n    setSelectedOrder(order);\n    setShowTraceabilityModal(true);\n  };\n\n  const handleEditOrder = (order: SalesOrder) => {\n    // TODO: Implement edit functionality\n    console.log(\"Edit order:\", order.orderNumber);\n  };\n\n  const handleCancelOrder = (order: SalesOrder) => {\n    // TODO: Implement cancel functionality\n    console.log(\"Cancel order:\", order.orderNumber);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-foreground\">\n            Gestión de Trazabilidad\n          </h2>\n          <p className=\"text-muted-foreground mt-1\">\n            Crear y gestionar órdenes de venta con trazabilidad completa desde chacra hasta cliente\n          </p>\n        </div>\n        <Button\n          className=\"gap-2\"\n          onClick={() => setShowCreateWizard(true)}\n          data-testid=\"button-create-sales-order\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Crear Nueva Orden de Venta\n        </Button>\n      </div>\n\n      {/* Tabla de Órdenes de Venta */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Órdenes de Venta</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {salesOrders.length > 0 ? (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID Orden</TableHead>\n                    <TableHead>Cliente</TableHead>\n                    <TableHead>Destino</TableHead>\n                    <TableHead className=\"text-right\">Tonelaje Total</TableHead>\n                    <TableHead>Fecha</TableHead>\n                    <TableHead>Estado</TableHead>\n                    <TableHead className=\"w-[100px]\">Acciones</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {salesOrders.map((order) => (\n                    <TableRow key={order.id} data-testid={`row-sales-order-${order.id}`}>\n                      <TableCell className=\"font-mono font-medium\">\n                        {order.orderNumber}\n                      </TableCell>\n                      <TableCell>{order.clientName}</TableCell>\n                      <TableCell>{order.destination}</TableCell>\n                      <TableCell className=\"text-right font-mono\">\n                        {parseFloat(order.totalTonnage || \"0\").toLocaleString()} t\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDate(order.orderDate || \"\")}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(order.status || \"Virgen\")}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-actions-${order.id}`}\n                            >\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem\n                              onClick={() => handleViewTraceability(order)}\n                              data-testid={`menu-view-traceability-${order.id}`}\n                            >\n                              <Eye className=\"mr-2 h-4 w-4\" />\n                              Ver Trazabilidad Completa\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => handleEditOrder(order)}\n                              data-testid={`menu-edit-order-${order.id}`}\n                            >\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Editar\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() => handleCancelOrder(order)}\n                              className=\"text-destructive\"\n                              data-testid={`menu-cancel-order-${order.id}`}\n                            >\n                              <X className=\"mr-2 h-4 w-4\" />\n                              Cancelar Orden\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <FileDown className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No hay órdenes de venta</h3>\n              <p className=\"mb-4\">Comience creando su primera orden de venta con trazabilidad completa.</p>\n              <Button \n                onClick={() => setShowCreateWizard(true)}\n                className=\"gap-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Crear Primera Orden\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Sales Order Creation Wizard */}\n      <SalesOrderWizard\n        open={showCreateWizard}\n        onOpenChange={setShowCreateWizard}\n        onOrderCreated={(newOrder) => {\n          // Add the new order to the existing orders list\n          setSalesOrders(prevOrders => [...prevOrders, newOrder]);\n        }}\n      />\n\n      {/* TODO: Implement Traceability Modal */}\n      {showTraceabilityModal && selectedOrder && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"bg-background p-6 rounded-lg max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">Trazabilidad Completa</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Orden: {selectedOrder.orderNumber}<br />\n              Cliente: {selectedOrder.clientName}\n            </p>\n            <Button onClick={() => setShowTraceabilityModal(false)}>\n              Cerrar\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10399},"client/src/components/TrazabilidadManagementProductor.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function TrazabilidadManagementProductor() {\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Construction className=\"h-5 w-5 text-muted-foreground\" />\n            Trazabilidad\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <div className=\"p-4 bg-muted rounded-full inline-block mb-4\">\n              <Construction className=\"h-12 w-12 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n              Funcionalidad en Construcción\n            </h3>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              Esta sección está en desarrollo y estará disponible próximamente.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1074}},"version":1}